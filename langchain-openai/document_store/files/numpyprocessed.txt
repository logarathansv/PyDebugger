page: https://numpy.org/doc/stable/release/2.2.0-notes.html
numpy 2.2.0 release note # numpy 2.2.0 release quick release brings u back sync
usual twice yearly release cycle. number small cleanups,
well work bringing new stringdtype completion improving support
free threaded python. highlight are: new function matvec vecmat , see below. many improved annotations. improved support new stringdtype. improved support free threaded python fix f2py release support python version 3.10-3.13. deprecation # _add_newdoc_ufunc deprecated. ufunc.__doc__ = newdoc
used instead. ( gh-27735 ) expired deprecation # bool(np.array([])) empty array raise error.
use arr.size > 0 instead check whether array elements. ( gh-27160 ) compatibility note # numpy.cov properly transpose single-row (2d array) design matrix
rowvar=false . previously, single-row design matrix would return
scalar scenario, correct, behavior change
array appropriate shape returned. ( gh-27661 ) new feature # new function matrix-vector vector-matrix product two new generalized ufuncs defined: numpy.matvec - matrix-vector product, treating argument
stack matrix column vectors, respectively. numpy.vecmat - vector-matrix product, treating argument
stack column vector matrices, respectively. complex
vectors, conjugate taken. add existing numpy.matmul well numpy.vecdot ,
added numpy 2.0. note numpy.matmul never take complex conjugate, also
left input vector, numpy.vecdot numpy.vecmat take conjugate complex vector
left-hand side (which taken one transposed,
following physic convention). ( gh-25675 ) np.complexfloating[t, t] also written np.complexfloating[t] ( gh-27420 ) ufuncs support __dict__ attribute allow overriding __doc__ (either directly via ufunc.__dict__["__doc__"] ). __dict__
used also override properties, __module__ __qualname__ . ( gh-27735 ) “nbit” type parameter np.number subtypes default
typing.any . way, type-checkers infer annotation x: np.floating x: np.floating[any] , even strict mode. ( gh-27736 ) improvement # datetime64 timedelta64 hash correctly match python
builtin datetime timedelta ones. hash evaluated equal
even equal value different time units. ( gh-14622 ) fixed number issue around promotion string ufuncs stringdtype
arguments. mixing stringdtype fixed-width dtypes using string
ufuncs generate much uniform results. ( gh-27636 ) improved support empty memmap . previously empty memmap would fail
unless non-zero offset set. zero-size memmap supported
even offset=0 . achieve this, memmap mapped empty
file file padded single byte. ( gh-27723 ) f2py handle multiple module expose variable # regression fixed allows f2py user expose variable
python module assignments, also fix situation
multiple module present within single source file. ( gh-27695 ) performance improvement change # improved multithreaded scaling free-threaded build many thread
simultaneously call ufunc operations. ( gh-27896 ) numpy us fast-on-failure attribute lookup protocols.
greatly reduce overhead function call array creation especially
custom python objects. largest improvement seen python 3.12
newer. ( gh-27119 ) openblas x86_64 i686 built fewer kernels. based
benchmarking, 5 cluster performance around kernels: prescott nehalem sandybridge haswell skylakex . openblas window linked without quadmath, simplifying licensing due regression openblas windows, performance improvement
using multiple thread openblas 0.3.26 reverted. ( gh-27147 ) numpy indicates hugepages also large np.zeros allocation
linux. thus generally improve performance. ( gh-27808 ) change # numpy.fix won’t perform casting floating data-type integer
boolean data-type input arrays. ( gh-26766 ) type annotation numpy.float64 numpy.complex128
reflect also subtypes built-in float complex types, respectively. update prevents static type-checkers reporting
error case as: x : float = numpy . float64 ( 6.28 ) # valid z : complex = numpy . complex128 ( - 1 j ) # valid ( gh-27334 ) repr array large enough summarized (i.e., element
replaced ... ) includes shape array, similar
already case array zero size non-obvious
shape. change, shape always given cannot
inferred values. note written shape=... ,
argument cannot actually passed np.array constructor.
encounter problems, e.g., due failing doctests, use print
option legacy=2.1 get old behaviour. ( gh-27482 ) calling __array_wrap__ directly numpy array scalar
right thing return_scalar passed (added numpy 2).
safe call scalar __array_wrap__ non-scalar
result. ( gh-27807 ) bump musllinux ci image wheel 1_2 1_1. 1_1 end life . ( gh-27088 ) nep 50 promotion state option removed # nep 50 promotion state setting removed. always meant
temporary mean testing. warning given environment
variable set anything npy_promotion_state=weak _set_promotion_state _get_promotion_state removed. case
code used _no_nep50_warning , contextlib.nullcontext could used
replace available. ( gh-27156 )
missing_data
page: https://numpy.org/doc/stable/reference/generated/numpy.cov.html#numpy.cov
numpy.cov # numpy. cov ( , = none , rowvar = true , bias = false , ddof = none , fweights = none , aweights = none , * , dtype = none ) [source] # estimate covariance matrix, given data weights. covariance indicates level two variable vary together.
examine n-dimensional samples, \(x = [x_1, x_2, ... x_n]^t\) ,
covariance matrix element \(c_{ij}\) covariance \(x_i\) \(x_j\) . element \(c_{ii}\) variance
\(x_i\) . see note outline algorithm. parameter : array_like 1-d 2-d array containing multiple variable observations.
row represents variable, column single
observation variables. also see rowvar below. array_like, optional additional set variable observations. form
. rowvar bool, optional rowvar true (default), row represents
variable, observation columns. otherwise, relationship
transposed: column represents variable, row
contain observations. bias bool, optional default normalization (false) (n - 1) , n
number observation given (unbiased estimate). bias true,
normalization n . value overridden using
keyword ddof numpy version >= 1.5. ddof int, optional none default value implied bias overridden.
note ddof=1 return unbiased estimate, even fweights aweights specified, ddof=0 return
simple average. see note details. default value
none . fweights array_like, int, optional 1-d array integer frequency weights; number time
observation vector repeated. aweights array_like, optional 1-d array observation vector weights. relative weight
typically large observation considered “important” smaller
observation considered less “important”. ddof=0 array
weight used assign probability observation vectors. dtype data-type, optional data-type result. default, return data-type
least numpy.float64 precision. new version 1.20. return : ndarray covariance matrix variables. see also corrcoef normalized covariance matrix note assume observation column observation
array let f = fweights = aweights brevity.
step compute weighted covariance follows: >>> = np . arange ( 10 , dtype = np . float64 ) >>> f = np . arange ( 10 ) * 2 >>> = np . arange ( 10 ) ** 2. >>> ddof = 1 >>> w = f * >>> v1 = np . sum ( w ) >>> v2 = np . sum ( w * ) >>> -= np . sum ( * w , axis = none , keepdims = true ) / v1 >>> cov = np . dot ( * w , . ) * v1 / ( v1 ** 2 - ddof * v2 ) note == 1 , normalization factor v1 / (v1**2 - ddof * v2) go 1 / (np.sum(f) - ddof) should. example >>> import numpy np consider two variables, \(x_0\) \(x_1\) ,
correlate perfectly, opposite directions: >>> x = np . array ([[ 0 , 2 ], [ 1 , 1 ], [ 2 , 0 ]]) . >>> x array([[0, 1, 2], [2, 1, 0]]) note \(x_0\) increase \(x_1\) decreases. covariance
matrix show clearly: >>> np . cov ( x ) array([[ 1., -1.], [-1., 1.]]) note element \(c_{0,1}\) , show correlation \(x_0\) \(x_1\) , negative. further, note x combined: >>> x = [ - 2.1 , - 1 , 4.3 ] >>> = [ 3 , 1.1 , 0.12 ] >>> x = np . stack (( x , ), axis = 0 ) >>> np . cov ( x ) array([[11.71 , -4.286 ], # may vary [-4.286 , 2.144133]]) >>> np . cov ( x , ) array([[11.71 , -4.286 ], # may vary [-4.286 , 2.144133]]) >>> np . cov ( x ) array(11.71)
page: https://numpy.org/doc/stable/reference/generated/numpy.matvec.html#numpy.matvec
numpy.matvec # numpy. matvec ( x1 , x2 , / , out=none , * , casting='same_kind' , order='k' , dtype=none , subok=true [ , signature , ax , axis ] ) = # matrix-vector dot product two arrays. given matrix (or stack matrices) \(\mathbf{a}\) x1
vector (or stack vectors) \(\mathbf{v}\) x2 ,
matrix-vector product defined as: \[\mathbf{a} \cdot \mathbf{b} = \sum_{j=0}^{n-1} a_{ij} v_j\] sum last dimension x1 x2 (unless ax specified). (for matrix-vector product
vector conjugated, use np.vecmat(x2, x1.mt) .) new version 2.2.0. parameter : x1, x2 array_like input arrays, scalar allowed. ndarray, optional location result stored. provided, must
broadcasted shape x1 x2 summation axis
removed. provided none, freshly-allocated array used. **kwargs keyword-only arguments, see ufunc doc . return : ndarray matrix-vector product inputs. raise : valueerror last dimension x1 x2 size. scalar value passed in. see also vecdot vector-vector product. vecmat vector-matrix product. matmul matrix-matrix product. einsum einstein summation convention. example rotate set vector x along z. >>> = np . array ([[ 0. , 1. , 0. ], ... [ - 1. , 0. , 0. ], ... [ 0. , 0. , 1. ]]) >>> v = np . array ([[ 1. , 0. , 0. ], ... [ 0. , 1. , 0. ], ... [ 0. , 0. , 1. ], ... [ 0. , 6. , 8. ]]) >>> np . matvec ( , v ) array([[ 0., -1., 0.], [ 1., 0., 0.], [ 0., 0., 1.], [ 6., 0., 8.]])
page: https://numpy.org/doc/stable/reference/generated/numpy.vecmat.html#numpy.vecmat
numpy.vecmat # numpy. vecmat ( x1 , x2 , / , out=none , * , casting='same_kind' , order='k' , dtype=none , subok=true [ , signature , ax , axis ] ) = # vector-matrix dot product two arrays. given vector (or stack vector) \(\mathbf{v}\) x1
matrix (or stack matrices) \(\mathbf{a}\) x2 ,
vector-matrix product defined as: \[\mathbf{b} \cdot \mathbf{a} = \sum_{i=0}^{n-1} \overline{v_i}a_{ij}\] sum last dimension x1 one-but-last
dimension x2 (unless ax specified) \(\overline{v_i}\) denotes complex conjugate \(v\) complex identity otherwise. (for non-conjugated vector-matrix
product, use np.matvec(x2.mt, x1) .) new version 2.2.0. parameter : x1, x2 array_like input arrays, scalar allowed. ndarray, optional location result stored. provided, must
removed. provided none, freshly-allocated array used. **kwargs keyword-only arguments, see ufunc doc . return : ndarray vector-matrix product inputs. raise : valueerror last dimension x1 one-but-last dimension x2 size. scalar value passed in. see also vecdot vector-vector product. matvec matrix-vector product. matmul matrix-matrix product. einsum einstein summation convention. example project vector along x y. >>> v = np . array ([ 0. , 4. , 2. ]) >>> = np . array ([[ 1. , 0. , 0. ], ... [ 0. , 1. , 0. ], ... [ 0. , 0. , 0. ]]) >>> np . vecmat ( v , ) array([ 0., 4., 0.])
page: https://numpy.org/doc/stable/reference/generated/numpy.matmul.html#numpy.matmul
numpy.matmul # numpy. matmul ( x1 , x2 , / , out=none , * , casting='same_kind' , order='k' , dtype=none , subok=true [ , signature , ax , axis ] ) = # matrix product two arrays. parameter : x1, x2 array_like input arrays, scalar allowed. ndarray, optional location result stored. provided, must
shape match signature (n,k),(k,m)->(n,m) .
provided none, freshly-allocated array returned. **kwargs keyword-only arguments, see ufunc doc . return : ndarray matrix product inputs.
scalar x1, x2 1-d vectors. raise : valueerror last dimension x1 size
second-to-last dimension x2 . scalar value passed in. see also vecdot complex-conjugating dot product stack vectors. matvec matrix-vector product stack matrix vectors. vecmat vector-matrix product stack vector matrices. tensordot sum product arbitrary axes. einsum einstein summation convention. dot alternative matrix product different broadcasting rules. note behavior depends argument following way. argument 2-d multiplied like conventional
matrices. either argument n-d, n > 2, treated stack
matrix residing last two index broadcast accordingly. first argument 1-d, promoted matrix
prepending 1 dimensions. matrix multiplication
prepended 1 removed. (for stack vectors, use vecmat .) second argument 1-d, promoted matrix
appending 1 dimensions. matrix multiplication
appended 1 removed. (for stack vectors, use matvec .) matmul differs dot two important ways: multiplication scalar allowed, use * instead. stack matrix broadcast together matrix
elements, respecting signature (n,k),(k,m)->(n,m) : >>> = np . one ([ 9 , 5 , 7 , 4 ]) >>> c = np . one ([ 9 , 5 , 4 , 3 ]) >>> np . dot ( , c ) . shape (9, 5, 7, 9, 5, 3) >>> np . matmul ( , c ) . shape (9, 5, 7, 3) >>> # n 7, k 4, 3 matmul function implement semantics @ operator
introduced python 3.5 following pep 465 . us optimized blas library possible (see numpy.linalg ). example 2-d array matrix product: >>> import numpy np >>> = np . array ([[ 1 , 0 ], ... [ 0 , 1 ]]) >>> b = np . array ([[ 4 , 1 ], ... [ 2 , 2 ]]) >>> np . matmul ( , b ) array([[4, 1], [2, 2]]) 2-d mixed 1-d, result usual. >>> = np . array ([[ 1 , 0 ], ... [ 0 , 1 ]]) >>> b = np . array ([ 1 , 2 ]) >>> np . matmul ( , b ) array([1, 2]) >>> np . matmul ( b , ) array([1, 2]) broadcasting conventional stack array >>> = np . arange ( 2 * 2 * 4 ) . reshape (( 2 , 2 , 4 )) >>> b = np . arange ( 2 * 2 * 4 ) . reshape (( 2 , 4 , 2 )) >>> np . matmul ( , b ) . shape (2, 2, 2) >>> np . matmul ( , b )[ 0 , 1 , 1 ] 98 >>> sum ( [ 0 , 1 , :] * b [ 0 , :, 1 ]) 98 vector, vector return scalar inner product, neither argument
complex-conjugated: >>> np . matmul ([ 2 j , 3 j ], [ 2 j , 3 j ]) (-13+0j) scalar multiplication raise error. >>> np . matmul ([ 1 , 2 ], 3 ) traceback (most recent call last): ... valueerror : matmul: input operand 1 enough dimension ... @ operator used shorthand np.matmul
ndarrays. >>> x1 = np . array ([ 2 j , 3 j ]) >>> x2 = np . array ([ 2 j , 3 j ]) >>> x1 @ x2 (-13+0j)
page: https://numpy.org/doc/stable/reference/generated/numpy.vecdot.html#numpy.vecdot
numpy.vecdot # numpy. vecdot ( x1 , x2 , / , out=none , * , casting='same_kind' , order='k' , dtype=none , subok=true [ , signature , ax , axis ] ) = # vector dot product two arrays. let \(\mathbf{a}\) vector x1 \(\mathbf{b}\)
corresponding vector x2 . dot product defined as: \[\mathbf{a} \cdot \mathbf{b} = \sum_{i=0}^{n-1} \overline{a_i}b_i\] sum last dimension (unless axis specified)
\(\overline{a_i}\) denotes complex conjugate \(a_i\) complex identity otherwise. new version 2.0.0. parameter : x1, x2 array_like input arrays, scalar allowed. ndarray, optional location result stored. provided, must
broadcasted shape x1 x2 last axis removed.
provided none, freshly-allocated array used. **kwargs keyword-only arguments, see ufunc doc . return : ndarray vector dot product inputs.
last dimension x2 . scalar value passed in. see also vdot flattens argument first matmul matrix-matrix product. vecmat vector-matrix product. matvec matrix-vector product. einsum einstein summation convention. example >>> import numpy np get projected size along given normal array vectors. >>> v = np . array ([[ 0. , 5. , 0. ], [ 0. , 0. , 10. ], [ 0. , 6. , 8. ]]) >>> n = np . array ([ 0. , 0.6 , 0.8 ]) >>> np . vecdot ( v , n ) array([ 3., 8., 10.])
page: https://numpy.org/doc/stable/reference/generated/numpy.memmap.html#numpy.memmap
numpy.memmap # class numpy. memmap ( filename , dtype= , mode='r+' , offset=0 , shape=none , order='c' ) [source] # create memory-map array stored binary file disk. memory-mapped file used accessing small segment large file
disk, without reading entire file memory. numpy’s
memmap’s array-like objects. differs python’s mmap module, us file-like objects. subclass ndarray unpleasant interaction
operations, doesn’t quite fit properly subclass.
alternative using subclass create mmap object yourself, create ndarray ndarray.__new__ directly,
passing object created ‘buffer=’ parameter. class may point turned factory function
return view mmap buffer. flush memmap instance write change file. currently
api close underlying mmap . tricky ensure
resource actually closed, since may shared different
memmap instances. parameter : filename str, file-like object, pathlib.path instance file name file object used array data buffer. dtype data-type, optional data-type used interpret file contents.
default uint8 . mode {‘r+’, ‘r’, ‘w+’, ‘c’}, optional file opened mode: ‘r’ open existing file reading only. ‘r+’ open existing file reading writing. ‘w+’ create overwrite existing file reading writing.
mode == 'w+' shape must also specified. ‘c’ copy-on-write: assignment affect data memory,
change saved disk. file disk
read-only. default ‘r+’. offset int, optional file, array data start offset. since offset
measured bytes, normally multiple byte-size
dtype . mode != 'r' , even positive offset beyond end
file valid; file extended accommodate
additional data. default, memmap start beginning
file, even filename file pointer fp fp.tell() != 0 . shape int sequence ints, optional desired shape array. mode == 'r' number
remaining byte offset multiple byte-size
dtype , must specify shape . default, returned array
1-d number element determined file size
data-type. changed version 2.0: shape parameter integer sequence type, previously
type limited tuple int. order {‘c’, ‘f’}, optional specify order ndarray memory layout: row-major , c-style column-major ,
fortran-style. effect shape
greater 1-d. default order ‘c’. see also lib.format.open_memmap create load memory-mapped .npy file. note memmap object used anywhere ndarray accepted.
given memmap fp , isinstance(fp, numpy.ndarray) return true . memory-mapped file cannot larger 2gb 32-bit systems. memmap cause file created extended beyond
current size filesystem, content new part
unspecified. system posix filesystem semantics, extended
part filled zero bytes. example >>> import numpy np >>> data = np . arange ( 12 , dtype = 'float32' ) >>> data . resize (( 3 , 4 )) example us temporary file doctest doesn’t write
file directory. would use ‘normal’ filename. >>> tempfile import mkdtemp >>> import os.path path >>> filename = path . join ( mkdtemp (), 'newfile.dat' ) create memmap dtype shape match data: >>> fp = np . memmap ( filename , dtype = 'float32' , mode = 'w+' , shape = ( 3 , 4 )) >>> fp memmap([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]], dtype=float32) write data memmap array: >>> fp [:] = data [:] >>> fp memmap([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.]], dtype=float32) >>> fp . filename == path . abspath ( filename ) true flush memory change disk order read back >>> fp . flush () load memmap verify data stored: >>> newfp = np . memmap ( filename , dtype = 'float32' , mode = 'r' , shape = ( 3 , 4 )) >>> newfp memmap([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.]], dtype=float32) read-only memmap: >>> fpr = np . memmap ( filename , dtype = 'float32' , mode = 'r' , shape = ( 3 , 4 )) >>> fpr . flag . writeable false copy-on-write memmap: >>> fpc = np . memmap ( filename , dtype = 'float32' , mode = 'c' , shape = ( 3 , 4 )) >>> fpc . flag . writeable true it’s possible assign copy-on-write array, value
written memory copy array, written disk: >>> fpc memmap([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.]], dtype=float32) >>> fpc [ 0 ,:] = 0 >>> fpc memmap([[ 0., 0., 0., 0.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.]], dtype=float32) file disk unchanged: >>> fpr memmap([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.]], dtype=float32) offset memmap: >>> fpo = np . memmap ( filename , dtype = 'float32' , mode = 'r' , offset = 16 ) >>> fpo memmap([ 4., 5., 6., 7., 8., 9., 10., 11.], dtype=float32) attribute : filename str pathlib.path instance path mapped file. offset int offset position file. mode str file mode. method flush () write change array file disk.
page: https://numpy.org/doc/stable/reference/generated/numpy.fix.html#numpy.fix
numpy.fix # numpy. fix ( x , = none ) [source] # round nearest integer towards zero. round array float element-wise nearest integer towards zero.
rounded value data-type input. parameter : x array_like array rounded ndarray, optional location result stored. provided, must
shape input broadcast to. provided none,
freshly-allocated array returned. return : ndarray float array dimension data-type input.
second argument supplied new array returned
rounded values. second argument supplied result stored there.
return value reference array. see also rint , trunc , floor , ceil around round given number decimal example >>> import numpy np >>> np . fix ( 3.14 ) 3.0 >>> np . fix ( 3 ) 3 >>> np . fix ([ 2.1 , 2.9 , - 2.1 , - 2.9 ]) array([ 2., 2., -2., -2.])
