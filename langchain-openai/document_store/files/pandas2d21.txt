Page: https://pandas.pydata.org/docs/whatsnew/v2.2.1.html
Whatâs new in 2.2.1 (February 22, 2024) # These are the changes in pandas 2.2.1. See Release notes for a full changelog
including other versions of pandas. Enhancements # Added pyarrow pip extra so users can install pandas and pyarrow with pip with pip install pandas[pyarrow] ( GH 54466 ) Fixed regressions # Fixed memory leak in read_csv() ( GH 57039 ) Fixed performance regression in Series.combine_first() ( GH 55845 ) Fixed regression causing overflow for near-minimum timestamps ( GH 57150 ) Fixed regression in concat() changing long-standing behavior that always sorted the non-concatenation axis when the axis was a DatetimeIndex ( GH 57006 ) Fixed regression in merge_ordered() raising TypeError for fill_method="ffill" and how="left" ( GH 57010 ) Fixed regression in pandas.testing.assert_series_equal() defaulting to check_exact=True when checking the Index ( GH 57067 ) Fixed regression in read_json() where an Index would be returned instead of a RangeIndex ( GH 57429 ) Fixed regression in wide_to_long() raising an AttributeError for string columns ( GH 57066 ) Fixed regression in DataFrameGroupBy.idxmin() , DataFrameGroupBy.idxmax() , SeriesGroupBy.idxmin() , SeriesGroupBy.idxmax() ignoring the skipna argument ( GH 57040 ) Fixed regression in DataFrameGroupBy.idxmin() , DataFrameGroupBy.idxmax() , SeriesGroupBy.idxmin() , SeriesGroupBy.idxmax() where values containing the minimum or maximum value for the dtype could produce incorrect results ( GH 57040 ) Fixed regression in CategoricalIndex.difference() raising KeyError when other contains null values other than NaN ( GH 57318 ) Fixed regression in DataFrame.groupby() raising ValueError when grouping by a Series in some cases ( GH 57276 ) Fixed regression in DataFrame.loc() raising IndexError for non-unique, masked dtype indexes where result has more than 10,000 rows ( GH 57027 ) Fixed regression in DataFrame.loc() which was unnecessarily throwing âincompatible dtype warningâ when expanding with partial row indexer and multiple columns (see PDEP6 ) ( GH 56503 ) Fixed regression in DataFrame.map() with na_action="ignore" not being respected for NumPy nullable and ArrowDtypes ( GH 57316 ) Fixed regression in DataFrame.merge() raising ValueError for certain types of 3rd-party extension arrays ( GH 57316 ) Fixed regression in DataFrame.query() with all NaT column with object dtype ( GH 57068 ) Fixed regression in DataFrame.shift() raising AssertionError for axis=1 and empty DataFrame ( GH 57301 ) Fixed regression in DataFrame.sort_index() not producing a stable sort for a index with duplicates ( GH 57151 ) Fixed regression in DataFrame.to_dict() with orient='list' and datetime or timedelta types returning integers ( GH 54824 ) Fixed regression in DataFrame.to_json() converting nullable integers to floats ( GH 57224 ) Fixed regression in DataFrame.to_sql() when method="multi" is passed and the dialect type is not Oracle ( GH 57310 ) Fixed regression in DataFrame.transpose() with nullable extension dtypes not having F-contiguous data potentially causing exceptions when used ( GH 57315 ) Fixed regression in DataFrame.update() emitting incorrect warnings about downcasting ( GH 57124 ) Fixed regression in DataFrameGroupBy.idxmin() , DataFrameGroupBy.idxmax() , SeriesGroupBy.idxmin() , SeriesGroupBy.idxmax() ignoring the skipna argument ( GH 57040 ) Fixed regression in DataFrameGroupBy.idxmin() , DataFrameGroupBy.idxmax() , SeriesGroupBy.idxmin() , SeriesGroupBy.idxmax() where values containing the minimum or maximum value for the dtype could produce incorrect results ( GH 57040 ) Fixed regression in ExtensionArray.to_numpy() raising for non-numeric masked dtypes ( GH 56991 ) Fixed regression in Index.join() raising TypeError when joining an empty index to a non-empty index containing mixed dtype values ( GH 57048 ) Fixed regression in Series.astype() introducing decimals when converting from integer with missing values to string dtype ( GH 57418 ) Fixed regression in Series.pct_change() raising a ValueError for an empty Series ( GH 57056 ) Fixed regression in Series.to_numpy() when dtype is given as float and the data contains NaNs ( GH 57121 ) Fixed regression in addition or subtraction of DateOffset objects with millisecond components to datetime64 Index , Series , or DataFrame ( GH 57529 ) Bug fixes # Fixed bug in pandas.api.interchange.from_dataframe() which was raising for Nullable integers ( GH 55069 ) Fixed bug in pandas.api.interchange.from_dataframe() which was raising for empty inputs ( GH 56700 ) Fixed bug in pandas.api.interchange.from_dataframe() which wasnât converting columns names to strings ( GH 55069 ) Fixed bug in DataFrame.__getitem__() for empty DataFrame with Copy-on-Write enabled ( GH 57130 ) Fixed bug in PeriodIndex.asfreq() which was silently converting frequencies which are not supported as period frequencies instead of raising an error ( GH 56945 ) Other # Note The DeprecationWarning that was raised when pandas was imported without PyArrow being
installed has been removed. This decision was made because the warning was too noisy for too
many users and a lot of feedback was collected about the decision to make PyArrow a required
dependency. Pandas is currently considering the decision whether or not PyArrow should be added
as a hard dependency in 3.0. Interested users can follow the discussion here . Added the argument skipna to DataFrameGroupBy.first() , DataFrameGroupBy.last() , SeriesGroupBy.first() , and SeriesGroupBy.last() ; achieving skipna=False used to be available via DataFrameGroupBy.nth() , but the behavior was changed in pandas 2.0.0 ( GH 57019 ) Added the argument skipna to Resampler.first() , Resampler.last() ( GH 57019 ) Contributors # A total of 14 people contributed patches to this release.  People with a
â+â by their names contributed a patch for the first time. Albert Villanova del Moral Luke Manley Lumberbot (aka Jack) Marco Edward Gorelli Matthew Roeschke Natalia Mokeeva Pandas Development Team Patrick Hoefler Richard Shadrach Robert Schmidtke + Samuel Chai + Thomas Li William Ayd dependabot[bot]


Page: https://pandas.pydata.org/docs/whatsnew/index.html#release
Release notes # This is the list of changes to pandas between each release. For full details,
see the commit logs . For install and
upgrade instructions, see Installation . Version 2.2 # Whatâs new in 2.2.3 (September 20, 2024) Pandas 2.2.3 is now compatible with Python 3.13 Bug fixes Other Contributors Whatâs new in 2.2.2 (April 10, 2024) Pandas 2.2.2 is now compatible with numpy 2.0 Fixed regressions Bug fixes Other Contributors Whatâs new in 2.2.1 (February 22, 2024) Enhancements Fixed regressions Bug fixes Other Contributors Whatâs new in 2.2.0 (January 19, 2024) Upcoming changes in pandas 3.0 Enhancements Notable bug fixes Deprecations Performance improvements Bug fixes Contributors Version 2.1 # Whatâs new in 2.1.4 (December 8, 2023) Fixed regressions Bug fixes Contributors Whatâs new in 2.1.3 (November 10, 2023) Fixed regressions Bug fixes Contributors Whatâs new in 2.1.2 (October 26, 2023) Deprecations Fixed regressions Bug fixes Other Contributors Whatâs new in 2.1.1 (September 20, 2023) Fixed regressions Bug fixes Other Contributors Whatâs new in 2.1.0 (Aug 30, 2023) Enhancements Backwards incompatible API changes Deprecations Performance improvements Bug fixes Contributors Version 2.0 # Whatâs new in 2.0.3 (June 28, 2023) Fixed regressions Bug fixes Other Contributors Whatâs new in 2.0.2 (May 29, 2023) Fixed regressions Bug fixes Other Contributors Whatâs new in 2.0.1 (April 24, 2023) Fixed regressions Bug fixes Other Contributors Whatâs new in 2.0.0 (April 3, 2023) Enhancements Notable bug fixes Backwards incompatible API changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 1.5 # Whatâs new in 1.5.3 (January 18, 2023) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.5.2 (November 21, 2022) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.5.1 (October 19, 2022) Behavior of groupby with categorical groupers (GH 48645) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.5.0 (September 19, 2022) Enhancements Notable bug fixes Backwards incompatible API changes Deprecations Performance improvements Bug fixes Contributors Version 1.4 # Whatâs new in 1.4.4 (August 31, 2022) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.4.3 (June 23, 2022) Behavior of concat with empty or all-NA DataFrame columns Fixed regressions Bug fixes Other Contributors Whatâs new in 1.4.2 (April 2, 2022) Fixed regressions Bug fixes Contributors Whatâs new in 1.4.1 (February 12, 2022) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.4.0 (January 22, 2022) Enhancements Notable bug fixes Backwards incompatible API changes Deprecations Performance improvements Bug fixes Contributors Version 1.3 # Whatâs new in 1.3.5 (December 12, 2021) Fixed regressions Contributors Whatâs new in 1.3.4 (October 17, 2021) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.3.3 (September 12, 2021) Fixed regressions Performance improvements Bug fixes Contributors Whatâs new in 1.3.2 (August 15, 2021) Fixed regressions Bug fixes Contributors Whatâs new in 1.3.1 (July 25, 2021) Fixed regressions Bug fixes Contributors Whatâs new in 1.3.0 (July 2, 2021) Enhancements Notable bug fixes Backwards incompatible API changes Deprecations Performance improvements Bug fixes Contributors Version 1.2 # Whatâs new in 1.2.5 (June 22, 2021) Fixed regressions Contributors Whatâs new in 1.2.4 (April 12, 2021) Fixed regressions Contributors Whatâs new in 1.2.3 (March 02, 2021) Fixed regressions Contributors Whatâs new in 1.2.2 (February 09, 2021) Fixed regressions Bug fixes Contributors Whatâs new in 1.2.1 (January 20, 2021) Fixed regressions Calling NumPy ufuncs on non-aligned DataFrames Bug fixes Other Contributors Whatâs new in 1.2.0 (December 26, 2020) Enhancements Notable bug fixes Deprecations Performance improvements Bug fixes Contributors Version 1.1 # Whatâs new in 1.1.5 (December 07, 2020) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.1.4 (October 30, 2020) Fixed regressions Bug fixes Contributors Whatâs new in 1.1.3 (October 5, 2020) Enhancements Fixed regressions Bug fixes Other Contributors Whatâs new in 1.1.2 (September 8, 2020) Fixed regressions Bug fixes Other Contributors Whatâs new in 1.1.1 (August 20, 2020) Fixed regressions Bug fixes Contributors Whatâs new in 1.1.0 (July 28, 2020) Enhancements Notable bug fixes Backwards incompatible API changes Deprecations Performance improvements Bug fixes Contributors Version 1.0 # Whatâs new in 1.0.5 (June 17, 2020) Fixed regressions Bug fixes Contributors Whatâs new in 1.0.4 (May 28, 2020) Fixed regressions Bug fixes Contributors Whatâs new in 1.0.3 (March 17, 2020) Fixed regressions Bug fixes Contributors Whatâs new in 1.0.2 (March 12, 2020) Fixed regressions Indexing with nullable boolean arrays Bug fixes Contributors Whatâs new in 1.0.1 (February 5, 2020) Fixed regressions Deprecations Bug fixes Contributors Whatâs new in 1.0.0 (January 29, 2020) New deprecation policy Enhancements Experimental new features Other enhancements Backwards incompatible API changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 0.25 # Whatâs new in 0.25.3 (October 31, 2019) Bug fixes Contributors Whatâs new in 0.25.2 (October 15, 2019) Bug fixes Contributors Whatâs new in 0.25.1 (August 21, 2019) IO and LZMA Bug fixes Contributors Whatâs new in 0.25.0 (July 18, 2019) Enhancements Backwards incompatible API changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 0.24 # Whatâs new in 0.24.2 (March 12, 2019) Fixed regressions Bug fixes Contributors Whatâs new in 0.24.1 (February 3, 2019) API changes Fixed regressions Bug fixes Contributors Whatâs new in 0.24.0 (January 25, 2019) Enhancements Backwards incompatible API changes Extension type changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 0.23 # Whatâs new in 0.23.4 (August 3, 2018) Fixed regressions Bug fixes Contributors Whatâs new in 0.23.3 (July 7, 2018) Contributors Whatâs new in 0.23.2 (July 5, 2018) Logical reductions over entire DataFrame Fixed regressions Build changes Bug fixes Contributors Whatâs new in 0.23.1 (June 12, 2018) Fixed regressions Performance improvements Bug fixes Contributors Whatâs new in 0.23.0 (May 15, 2018) New features Backwards incompatible API changes Deprecations Removal of prior version deprecations/changes Performance improvements Documentation changes Bug fixes Contributors Version 0.22 # Version 0.22.0 (December 29, 2017) Backwards incompatible API changes Compatibility Contributors Version 0.21 # Version 0.21.1 (December 12, 2017) Restore Matplotlib datetime converter registration New features Deprecations Performance improvements Bug fixes Contributors Version 0.21.0 (October 27, 2017) New features Backwards incompatible API changes Deprecations Removal of prior version deprecations/changes Performance improvements Documentation changes Bug fixes Contributors Version 0.20 # Version 0.20.3 (July 7, 2017) Bug fixes Contributors Version 0.20.2 (June 4, 2017) Enhancements Performance improvements Bug fixes Contributors Version 0.20.1 (May 5, 2017) New features Backwards incompatible API changes Reorganization of the library: privacy changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 0.19 # Version 0.19.2 (December 24, 2016) Enhancements Performance improvements Bug fixes Contributors Version 0.19.1 (November 3, 2016) Performance improvements Bug fixes Contributors Version 0.19.0 (October 2, 2016) New features API changes Deprecations Removal of prior version deprecations/changes Performance improvements Bug fixes Contributors Version 0.18 # Version 0.18.1 (May 3, 2016) New features Sparse changes API changes Performance improvements Bug fixes Contributors Version 0.18.0 (March 13, 2016) New features Backwards incompatible API changes Performance improvements Bug fixes Contributors Version 0.17 # Version 0.17.1 (November 21, 2015) New features Enhancements API changes Performance improvements Bug fixes Contributors Version 0.17.0 (October 9, 2015) New features Backwards incompatible API changes Performance improvements Bug fixes Contributors Version 0.16 # Version 0.16.2 (June 12, 2015) New features API changes Performance improvements Bug fixes Contributors Version 0.16.1 (May 11, 2015) Enhancements API changes Index representation Performance improvements Bug fixes Contributors Version 0.16.0 (March 22, 2015) New features Backwards incompatible API changes Performance improvements Bug fixes Contributors Version 0.15 # Version 0.15.2 (December 12, 2014) API changes Enhancements Performance Bug fixes Contributors Version 0.15.1 (November 9, 2014) API changes Enhancements Bug fixes Contributors Version 0.15.0 (October 18, 2014) New features Backwards incompatible API changes Enhancements Performance Bug fixes Contributors Version 0.14 # Version 0.14.1 (July 11, 2014) API changes Enhancements Performance Experimental Bug fixes Contributors Version 0.14.0 (May 31 , 2014) API changes Display changes Text parsing API changes GroupBy API changes SQL Multi-indexing using slicers Plotting Prior version deprecations/changes Deprecations Known issues Enhancements Performance Experimental Bug fixes Contributors Version 0.13 # Version 0.13.1 (February 3, 2014) Output formatting enhancements API changes Prior version deprecations/changes Deprecations Enhancements Performance Experimental Bug fixes Contributors Version 0.13.0 (January 3, 2014) API changes Prior version deprecations/changes Deprecations Indexing API changes Float64Index API change HDFStore API changes DataFrame repr changes Enhancements Experimental Internal refactoring Bug fixes Contributors Version 0.12 # Version 0.12.0 (July 24, 2013) API changes IO enhancements Other enhancements Experimental features Bug fixes Contributors Version 0.11 # Version 0.11.0 (April 22, 2013) Selection choices Selection deprecations Dtypes Dtype conversion Dtype gotchas Datetimes conversion API changes Enhancements Contributors Version 0.10 # Version 0.10.1 (January 22, 2013) API changes New features HDFStore Contributors Version 0.10.0 (December 17, 2012) File parsing new features API changes New features Wide DataFrame printing Updated PyTables support N dimensional panels (experimental) Contributors Version 0.9 # Version 0.9.1 (November 14, 2012) New features API changes Contributors Version 0.9.0 (October 7, 2012) New features API changes Contributors Version 0.8 # Version 0.8.1 (July 22, 2012) New features Performance improvements Contributors Version 0.8.0 (June 29, 2012) Support for non-unique indexes NumPy datetime64 dtype and 1.6 dependency Time Series changes and improvements Other new features New plotting methods Other API changes Potential porting issues for pandas <= 0.7.3 users Contributors Version 0.7 # Version 0.7.3 (April 12, 2012) New features NA boolean comparison API change Other API changes Contributors Version 0.7.2 (March 16, 2012) New features Performance improvements Contributors Version 0.7.1 (February 29, 2012) New features Performance improvements Contributors Version 0.7.0 (February 9, 2012) New features API changes to integer indexing API tweaks regarding label-based slicing Changes to Series [] operator Other API changes Performance improvements Contributors Version 0.6 # Version 0.6.1 (December 13, 2011) New features Performance improvements Contributors Version 0.6.0 (November 25, 2011) New features Performance enhancements Contributors Version 0.5 # Version 0.5.0 (October 24, 2011) New features Performance enhancements Contributors Version 0.4 # Versions 0.4.1 through 0.4.3 (September 25 - October 9, 2011) New features Performance enhancements Contributors


Page: https://github.com/pandas-dev/pandas/issues/54466



Page: https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv
pandas.read_csv # pandas. read_csv ( filepath_or_buffer , * , sep=<no_default> , delimiter=None , header='infer' , names=<no_default> , index_col=None , usecols=None , dtype=None , engine=None , converters=None , true_values=None , false_values=None , skipinitialspace=False , skiprows=None , skipfooter=0 , nrows=None , na_values=None , keep_default_na=True , na_filter=True , verbose=<no_default> , skip_blank_lines=True , parse_dates=None , infer_datetime_format=<no_default> , keep_date_col=<no_default> , date_parser=<no_default> , date_format=None , dayfirst=False , cache_dates=True , iterator=False , chunksize=None , compression='infer' , thousands=None , decimal='.' , lineterminator=None , quotechar='"' , quoting=0 , doublequote=True , escapechar=None , comment=None , encoding=None , encoding_errors='strict' , dialect=None , on_bad_lines='error' , delim_whitespace=<no_default> , low_memory=True , memory_map=False , float_precision=None , storage_options=None , dtype_backend=<no_default> ) [source] # Read a comma-separated values (csv) file into DataFrame. Also supports optionally iterating or breaking of the file
into chunks. Additional help can be found in the online docs for IO Tools . Parameters : filepath_or_buffer str, path object or file-like object Any valid string path is acceptable. The string could be a URL. Valid
URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is
expected. A local file could be: file://localhost/path/to/table.csv . If you want to pass in a path object, pandas accepts any os.PathLike . By file-like object, we refer to objects with a read() method, such as
a file handle (e.g. via builtin open function) or StringIO . sep str, default â,â Character or regex pattern to treat as the delimiter. If sep=None , the
C engine cannot automatically detect
the separator, but the Python parsing engine can, meaning the latter will
be used and automatically detect the separator from only the first valid
row of the file by Pythonâs builtin sniffer tool, csv.Sniffer .
In addition, separators longer than 1 character and different from '\s+' will be interpreted as regular expressions and will also force
the use of the Python parsing engine. Note that regex delimiters are prone
to ignoring quoted data. Regex example: '\r\t' . delimiter str, optional Alias for sep . header int, Sequence of int, âinferâ or None, default âinferâ Row number(s) containing column labels and marking the start of the
data (zero-indexed). Default behavior is to infer the column names: if no names are passed the behavior is identical to header=0 and column
names are inferred from the first line of the file, if column
names are passed explicitly to names then the behavior is identical to header=None . Explicitly pass header=0 to be able to
replace existing names. The header can be a list of integers that
specify row locations for a MultiIndex on the columns
e.g. [0, 1, 3] . Intervening rows that are not specified will be
skipped (e.g. 2 in this example is skipped). Note that this
parameter ignores commented lines and empty lines if skip_blank_lines=True , so header=0 denotes the first line of
data rather than the first line of the file. names Sequence of Hashable, optional Sequence of column labels to apply. If the file contains a header row,
then you should explicitly pass header=0 to override the column names.
Duplicates in this list are not allowed. index_col Hashable, Sequence of Hashable or False, optional Column(s) to use as row label(s), denoted either by column labels or column
indices.  If a sequence of labels or indices is given, MultiIndex will be formed for the row labels. Note: index_col=False can be used to force pandas to not use the first
column as the index, e.g., when you have a malformed file with delimiters at
the end of each line. usecols Sequence of Hashable or Callable, optional Subset of columns to select, denoted either by column labels or column indices.
If list-like, all elements must either
be positional (i.e. integer indices into the document columns) or strings
that correspond to column names provided either by the user in names or
inferred from the document header row(s). If names are given, the document
header row(s) are not taken into account. For example, a valid list-like usecols parameter would be [0, 1, 2] or ['foo', 'bar', 'baz'] .
Element order is ignored, so usecols=[0, 1] is the same as [1, 0] .
To instantiate a DataFrame from data with element order
preserved use pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']] for columns in ['foo', 'bar'] order or pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']] for ['bar', 'foo'] order. If callable, the callable function will be evaluated against the column
names, returning names where the callable function evaluates to True . An
example of a valid callable argument would be lambda x: x.upper() in ['AAA', 'BBB', 'DDD'] . Using this parameter results in much faster
parsing time and lower memory usage. dtype dtype or dict of {Hashable dtype}, optional Data type(s) to apply to either the whole dataset or individual columns.
E.g., {'a': np.float64, 'b': np.int32, 'c': 'Int64'} Use str or object together with suitable na_values settings
to preserve and not interpret dtype .
If converters are specified, they will be applied INSTEAD
of dtype conversion. Added in version 1.5.0: Support for defaultdict was added. Specify a defaultdict as input where
the default determines the dtype of the columns which are not explicitly
listed. engine {âcâ, âpythonâ, âpyarrowâ}, optional Parser engine to use. The C and pyarrow engines are faster, while the python engine
is currently more feature-complete. Multithreading is currently only supported by
the pyarrow engine. Added in version 1.4.0: The âpyarrowâ engine was added as an experimental engine, and some features
are unsupported, or may not work correctly, with this engine. converters dict of {Hashable Callable}, optional Functions for converting values in specified columns. Keys can either
be column labels or column indices. true_values list, optional Values to consider as True in addition to case-insensitive variants of âTrueâ. false_values list, optional Values to consider as False in addition to case-insensitive variants of âFalseâ. skipinitialspace bool, default False Skip spaces after delimiter. skiprows int, list of int or Callable, optional Line numbers to skip (0-indexed) or number of lines to skip ( int )
at the start of the file. If callable, the callable function will be evaluated against the row
indices, returning True if the row should be skipped and False otherwise.
An example of a valid callable argument would be lambda x: x in [0, 2] . skipfooter int, default 0 Number of lines at bottom of file to skip (Unsupported with engine='c' ). nrows int, optional Number of rows of file to read. Useful for reading pieces of large files. na_values Hashable, Iterable of Hashable or dict of {Hashable Iterable}, optional Additional strings to recognize as NA / NaN . If dict passed, specific
per-column NA values.  By default the following values are interpreted as NaN : â â, â#N/Aâ, â#N/A N/Aâ, â#NAâ, â-1.#INDâ, â-1.#QNANâ, â-NaNâ, â-nanâ,
â1.#INDâ, â1.#QNANâ, â<NA>â, âN/Aâ, âNAâ, âNULLâ, âNaNâ, âNoneâ,
ân/aâ, ânanâ, ânull â. keep_default_na bool, default True Whether or not to include the default NaN values when parsing the data.
Depending on whether na_values is passed in, the behavior is as follows: If keep_default_na is True , and na_values are specified, na_values is appended to the default NaN values used for parsing. If keep_default_na is True , and na_values are not specified, only
the default NaN values are used for parsing. If keep_default_na is False , and na_values are specified, only
the NaN values specified na_values are used for parsing. If keep_default_na is False , and na_values are not specified, no
strings will be parsed as NaN . Note that if na_filter is passed in as False , the keep_default_na and na_values parameters will be ignored. na_filter bool, default True Detect missing value markers (empty strings and the value of na_values ). In
data without any NA values, passing na_filter=False can improve the
performance of reading a large file. verbose bool, default False Indicate number of NA values placed in non-numeric columns. Deprecated since version 2.2.0. skip_blank_lines bool, default True If True , skip over blank lines rather than interpreting as NaN values. parse_dates bool, list of Hashable, list of lists or dict of {Hashable list}, default False The behavior is as follows: bool . If True -> try parsing the index. Note: Automatically set to True if date_format or date_parser arguments have been passed. list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3
each as a separate date column. list of list . e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse
as a single date column. Values are joined with a space before parsing. dict , e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call
result âfooâ. Values are joined with a space before parsing. If a column or index cannot be represented as an array of datetime ,
say because of an unparsable value or a mixture of timezones, the column
or index will be returned unaltered as an object data type. For
non-standard datetime parsing, use to_datetime() after read_csv() . Note: A fast-path exists for iso8601-formatted dates. infer_datetime_format bool, default False If True and parse_dates is enabled, pandas will attempt to infer the
format of the datetime strings in the columns, and if it can be inferred,
switch to a faster method of parsing them. In some cases this can increase
the parsing speed by 5-10x. Deprecated since version 2.0.0: A strict version of this argument is now the default, passing it has no effect. keep_date_col bool, default False If True and parse_dates specifies combining multiple columns then
keep the original columns. date_parser Callable, optional Function to use for converting a sequence of string columns to an array of datetime instances. The default uses dateutil.parser.parser to do the
conversion. pandas will try to call date_parser in three different ways,
advancing to the next if an exception occurs: 1) Pass one or more arrays
(as defined by parse_dates ) as arguments; 2) concatenate (row-wise) the
string values from the columns defined by parse_dates into a single array
and pass that; and 3) call date_parser once for each row using one or
more strings (corresponding to the columns defined by parse_dates ) as
arguments. Deprecated since version 2.0.0: Use date_format instead, or read in as object and then apply to_datetime() as-needed. date_format str or dict of column -> format, optional Format to use for parsing dates when used in conjunction with parse_dates .
The strftime to parse time, e.g. "%d/%m/%Y" . See strftime documentation for more information on choices, though
note that "%f" will parse all the way up to nanoseconds.
You can also pass: âISO8601â, to parse any ISO8601 time string (not necessarily in exactly the same format); âmixedâ, to infer the format for each element individually. This is risky, and you should probably use it along with dayfirst . Added in version 2.0.0. dayfirst bool, default False DD/MM format dates, international and European format. cache_dates bool, default True If True , use a cache of unique, converted dates to apply the datetime conversion. May produce significant speed-up when parsing duplicate
date strings, especially ones with timezone offsets. iterator bool, default False Return TextFileReader object for iteration or getting chunks with get_chunk() . chunksize int, optional Number of lines to read from the file per chunk. Passing a value will cause the
function to return a TextFileReader object for iteration.
See the IO Tools docs for more information on iterator and chunksize . compression str or dict, default âinferâ For on-the-fly decompression of on-disk data. If âinferâ and âfilepath_or_bufferâ is
path-like, then detect compression from the following extensions: â.gzâ,
â.bz2â, â.zipâ, â.xzâ, â.zstâ, â.tarâ, â.tar.gzâ, â.tar.xzâ or â.tar.bz2â
(otherwise no compression).
If using âzipâ or âtarâ, the ZIP file must contain only one data file to be read in.
Set to None for no decompression.
Can also be a dict with key 'method' set
to one of { 'zip' , 'gzip' , 'bz2' , 'zstd' , 'xz' , 'tar' } and
other key-value pairs are forwarded to zipfile.ZipFile , gzip.GzipFile , bz2.BZ2File , zstandard.ZstdDecompressor , lzma.LZMAFile or tarfile.TarFile , respectively.
As an example, the following could be passed for Zstandard decompression using a
custom compression dictionary: compression={'method': 'zstd', 'dict_data': my_compression_dict} . Added in version 1.5.0: Added support for .tar files. Changed in version 1.4.0: Zstandard support. thousands str (length 1), optional Character acting as the thousands separator in numerical values. decimal str (length 1), default â.â Character to recognize as decimal point (e.g., use â,â for European data). lineterminator str (length 1), optional Character used to denote a line break. Only valid with C parser. quotechar str (length 1), optional Character used to denote the start and end of a quoted item. Quoted
items can include the delimiter and it will be ignored. quoting {0 or csv.QUOTE_MINIMAL, 1 or csv.QUOTE_ALL, 2 or csv.QUOTE_NONNUMERIC, 3 or csv.QUOTE_NONE}, default csv.QUOTE_MINIMAL Control field quoting behavior per csv.QUOTE_* constants. Default is csv.QUOTE_MINIMAL (i.e., 0) which implies that only fields containing special
characters are quoted (e.g., characters defined in quotechar , delimiter ,
or lineterminator . doublequote bool, default True When quotechar is specified and quoting is not QUOTE_NONE , indicate
whether or not to interpret two consecutive quotechar elements INSIDE a
field as a single quotechar element. escapechar str (length 1), optional Character used to escape other characters. comment str (length 1), optional Character indicating that the remainder of line should not be parsed.
If found at the beginning
of a line, the line will be ignored altogether. This parameter must be a
single character. Like empty lines (as long as skip_blank_lines=True ),
fully commented lines are ignored by the parameter header but not by skiprows . For example, if comment='#' , parsing #empty\na,b,c\n1,2,3 with header=0 will result in 'a,b,c' being
treated as the header. encoding str, optional, default âutf-8â Encoding to use for UTF when reading/writing (ex. 'utf-8' ). List of Python
standard encodings . encoding_errors str, optional, default âstrictâ How encoding errors are treated. List of possible values . Added in version 1.3.0. dialect str or csv.Dialect, optional If provided, this parameter will override values (default or not) for the
following parameters: delimiter , doublequote , escapechar , skipinitialspace , quotechar , and quoting . If it is necessary to
override values, a ParserWarning will be issued. See csv.Dialect documentation for more details. on_bad_lines {âerrorâ, âwarnâ, âskipâ} or Callable, default âerrorâ Specifies what to do upon encountering a bad line (a line with too many fields).
Allowed values are : 'error' , raise an Exception when a bad line is encountered. 'warn' , raise a warning when a bad line is encountered and skip that line. 'skip' , skip bad lines without raising or warning when they are encountered. Added in version 1.3.0. Added in version 1.4.0: Callable, function with signature (bad_line: list[str]) -> list[str] | None that will process a single
bad line. bad_line is a list of strings split by the sep .
If the function returns None , the bad line will be ignored.
If the function returns a new list of strings with more elements than
expected, a ParserWarning will be emitted while dropping extra elements.
Only supported when engine='python' Changed in version 2.2.0: Callable, function with signature
as described in pyarrow documentation when engine='pyarrow' delim_whitespace bool, default False Specifies whether or not whitespace (e.g. ' ' or '\t' ) will be
used as the sep delimiter. Equivalent to setting sep='\s+' . If this option
is set to True , nothing should be passed in for the delimiter parameter. Deprecated since version 2.2.0: Use sep="\s+" instead. low_memory bool, default True Internally process the file in chunks, resulting in lower memory use
while parsing, but possibly mixed type inference.  To ensure no mixed
types either set False , or specify the type with the dtype parameter.
Note that the entire file is read into a single DataFrame regardless, use the chunksize or iterator parameter to return the data in
chunks. (Only valid with C parser). memory_map bool, default False If a filepath is provided for filepath_or_buffer , map the file object
directly onto memory and access the data directly from there. Using this
option can improve performance because there is no longer any I/O overhead. float_precision {âhighâ, âlegacyâ, âround_tripâ}, optional Specifies which converter the C engine should use for floating-point
values. The options are None or 'high' for the ordinary converter, 'legacy' for the original lower precision pandas converter, and 'round_trip' for the round-trip converter. storage_options dict, optional Extra options that make sense for a particular storage connection, e.g.
host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
are forwarded to urllib.request.Request as header options. For other
URLs (e.g. starting with âs3://â, and âgcs://â) the key-value pairs are
forwarded to fsspec.open . Please see fsspec and urllib for more
details, and for more examples on storage options refer here . dtype_backend {ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâ Back-end data type applied to the resultant DataFrame (still experimental). Behaviour is as follows: "numpy_nullable" : returns nullable-dtype-backed DataFrame (default). "pyarrow" : returns pyarrow-backed nullable ArrowDtype DataFrame. Added in version 2.0. Returns : DataFrame or TextFileReader A comma-separated values (csv) file is returned as two-dimensional
data structure with labeled axes. See also DataFrame.to_csv Write DataFrame to a comma-separated values (csv) file. read_table Read general delimited file into DataFrame. read_fwf Read a table of fixed-width formatted lines into DataFrame. Examples >>> pd . read_csv ( 'data.csv' )


Page: https://github.com/pandas-dev/pandas/issues/57039



Page: https://pandas.pydata.org/docs/reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
pandas.Series.combine_first # Series. combine_first ( other ) [source] # Update null elements with value in the same location in âotherâ. Combine two Series objects by filling null values in one Series with
non-null values from the other Series. Result index will be the union
of the two indexes. Parameters : other Series The value(s) to be used for filling null values. Returns : Series The result of combining the provided Series with the other object. See also Series.combine Perform element-wise operation on two Series using a given function. Examples >>> s1 = pd . Series ([ 1 , np . nan ]) >>> s2 = pd . Series ([ 3 , 4 , 5 ]) >>> s1 . combine_first ( s2 ) 0    1.0 1    4.0 2    5.0 dtype: float64 Null values still persist if the location of that null value
does not exist in other >>> s1 = pd . Series ({ 'falcon' : np . nan , 'eagle' : 160.0 }) >>> s2 = pd . Series ({ 'eagle' : 200.0 , 'duck' : 30.0 }) >>> s1 . combine_first ( s2 ) duck       30.0 eagle     160.0 falcon      NaN dtype: float64


Page: https://github.com/pandas-dev/pandas/issues/55845



Page: https://github.com/pandas-dev/pandas/issues/57150



Page: https://pandas.pydata.org/docs/reference/api/pandas.concat.html#pandas.concat
pandas.concat # pandas. concat ( objs , * , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , sort = False , copy = None ) [source] # Concatenate pandas objects along a particular axis. Allows optional set logic along the other axes. Can also add a layer of hierarchical indexing on the concatenation axis,
which may be useful if the labels are the same (or overlapping) on
the passed axis number. Parameters : objs a sequence or mapping of Series or DataFrame objects If a mapping is passed, the sorted keys will be used as the keys argument, unless it is passed, in which case the values will be
selected (see below). Any None objects will be dropped silently unless
they are all None in which case a ValueError will be raised. axis {0/âindexâ, 1/âcolumnsâ}, default 0 The axis to concatenate along. join {âinnerâ, âouterâ}, default âouterâ How to handle indexes on other axis (or axes). ignore_index bool, default False If True, do not use the index values along the concatenation axis. The
resulting axis will be labeled 0, â¦, n - 1. This is useful if you are
concatenating objects where the concatenation axis does not have
meaningful indexing information. Note the index values on the other
axes are still respected in the join. keys sequence, default None If multiple levels passed, should contain tuples. Construct
hierarchical index using the passed keys as the outermost level. levels list of sequences, default None Specific levels (unique values) to use for constructing a
MultiIndex. Otherwise they will be inferred from the keys. names list, default None Names for the levels in the resulting hierarchical index. verify_integrity bool, default False Check whether the new concatenated axis contains duplicates. This can
be very expensive relative to the actual data concatenation. sort bool, default False Sort non-concatenation axis if it is not already aligned. One exception to
this is when the non-concatentation axis is a DatetimeIndex and join=âouterâ
and the axis is not already aligned. In that case, the non-concatenation
axis is always sorted lexicographically. copy bool, default True If False, do not copy data unnecessarily. Returns : object, type of objs When concatenating all Series along the index (axis=0), a Series is returned. When objs contains at least one DataFrame , a DataFrame is returned. When concatenating along
the columns (axis=1), a DataFrame is returned. See also DataFrame.join Join DataFrames using indexes. DataFrame.merge Merge DataFrames by indexes or columns. Notes The keys, levels, and names arguments are all optional. A walkthrough of how this method fits in with other tools for combining
pandas objects can be found here . It is not recommended to build DataFrames by adding single rows in a
for loop. Build a list of rows and make a DataFrame in a single concat. Examples Combine two Series . >>> s1 = pd . Series ([ 'a' , 'b' ]) >>> s2 = pd . Series ([ 'c' , 'd' ]) >>> pd . concat ([ s1 , s2 ]) 0    a 1    b 0    c 1    d dtype: object Clear the existing index and reset it in the result
by setting the ignore_index option to True . >>> pd . concat ([ s1 , s2 ], ignore_index = True ) 0    a 1    b 2    c 3    d dtype: object Add a hierarchical index at the outermost level of
the data with the keys option. >>> pd . concat ([ s1 , s2 ], keys = [ 's1' , 's2' ]) s1  0    a 1    b s2  0    c 1    d dtype: object Label the index keys you create with the names option. >>> pd . concat ([ s1 , s2 ], keys = [ 's1' , 's2' ], ... names = [ 'Series name' , 'Row ID' ]) Series name  Row ID s1           0         a 1         b s2           0         c 1         d dtype: object Combine two DataFrame objects with identical columns. >>> df1 = pd . DataFrame ([[ 'a' , 1 ], [ 'b' , 2 ]], ... columns = [ 'letter' , 'number' ]) >>> df1 letter  number 0      a       1 1      b       2 >>> df2 = pd . DataFrame ([[ 'c' , 3 ], [ 'd' , 4 ]], ... columns = [ 'letter' , 'number' ]) >>> df2 letter  number 0      c       3 1      d       4 >>> pd . concat ([ df1 , df2 ]) letter  number 0      a       1 1      b       2 0      c       3 1      d       4 Combine DataFrame objects with overlapping columns
and return everything. Columns outside the intersection will
be filled with NaN values. >>> df3 = pd . DataFrame ([[ 'c' , 3 , 'cat' ], [ 'd' , 4 , 'dog' ]], ... columns = [ 'letter' , 'number' , 'animal' ]) >>> df3 letter  number animal 0      c       3    cat 1      d       4    dog >>> pd . concat ([ df1 , df3 ], sort = False ) letter  number animal 0      a       1    NaN 1      b       2    NaN 0      c       3    cat 1      d       4    dog Combine DataFrame objects with overlapping columns
and return only those that are shared by passing inner to
the join keyword argument. >>> pd . concat ([ df1 , df3 ], join = "inner" ) letter  number 0      a       1 1      b       2 0      c       3 1      d       4 Combine DataFrame objects horizontally along the x axis by
passing in axis=1 . >>> df4 = pd . DataFrame ([[ 'bird' , 'polly' ], [ 'monkey' , 'george' ]], ... columns = [ 'animal' , 'name' ]) >>> pd . concat ([ df1 , df4 ], axis = 1 ) letter  number  animal    name 0      a       1    bird   polly 1      b       2  monkey  george Prevent the result from including duplicate index values with the verify_integrity option. >>> df5 = pd . DataFrame ([ 1 ], index = [ 'a' ]) >>> df5 0 a  1 >>> df6 = pd . DataFrame ([ 2 ], index = [ 'a' ]) >>> df6 0 a  2 >>> pd . concat ([ df5 , df6 ], verify_integrity = True ) Traceback (most recent call last): ... ValueError : Indexes have overlapping values: ['a'] Append a single row to the end of a DataFrame object. >>> df7 = pd . DataFrame ({ 'a' : 1 , 'b' : 2 }, index = [ 0 ]) >>> df7 a   b 0   1   2 >>> new_row = pd . Series ({ 'a' : 3 , 'b' : 4 }) >>> new_row a    3 b    4 dtype: int64 >>> pd . concat ([ df7 , new_row . to_frame () . T ], ignore_index = True ) a   b 0   1   2 1   3   4


Page: https://pandas.pydata.org/docs/reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
pandas.DatetimeIndex # class pandas. DatetimeIndex ( data=None , freq=<no_default> , tz=<no_default> , normalize=<no_default> , closed=<no_default> , ambiguous='raise' , dayfirst=False , yearfirst=False , dtype=None , copy=False , name=None ) [source] # Immutable ndarray-like of datetime64 data. Represented internally as int64, and which can be boxed to Timestamp objects
that are subclasses of datetime and carry metadata. Changed in version 2.0.0: The various numeric date/time attributes ( day , month , year etc.) now have dtype int32 . Previously they had dtype int64 . Parameters : data array-like (1-dimensional) Datetime-like data to construct index with. freq str or pandas offset object, optional One of pandas date offset strings or corresponding objects. The string
âinferâ can be passed in order to set the frequency of the index as the
inferred frequency upon creation. tz pytz.timezone or dateutil.tz.tzfile or datetime.tzinfo or str Set the Timezone of the data. normalize bool, default False Normalize start/end dates to midnight before generating date range. Deprecated since version 2.1.0. closed {âleftâ, ârightâ}, optional Set whether to include start and end that are on the
boundary. The default includes boundary points on either end. Deprecated since version 2.1.0. ambiguous âinferâ, bool-ndarray, âNaTâ, default âraiseâ When clocks moved backward due to DST, ambiguous times may arise.
For example in Central European Time (UTC+01), when going from 03:00
DST to 02:00 non-DST, 02:30:00 local time occurs both at 00:30:00 UTC
and at 01:30:00 UTC. In such a situation, the ambiguous parameter
dictates how ambiguous times should be handled. âinferâ will attempt to infer fall dst-transition hours based on
order bool-ndarray where True signifies a DST time, False signifies a
non-DST time (note that this flag is only applicable for ambiguous
times) âNaTâ will return NaT where there are ambiguous times âraiseâ will raise an AmbiguousTimeError if there are ambiguous times. dayfirst bool, default False If True, parse dates in data with the day first order. yearfirst bool, default False If True parse dates in data with the year first order. dtype numpy.dtype or DatetimeTZDtype or str, default None Note that the only NumPy dtype allowed is datetime64[ns] . copy bool, default False Make a copy of input ndarray. name label, default None Name to be stored in the index. Attributes year The year of the datetime. month The month as January=1, December=12. day The day of the datetime. hour The hours of the datetime. minute The minutes of the datetime. second The seconds of the datetime. microsecond The microseconds of the datetime. nanosecond The nanoseconds of the datetime. date Returns numpy array of python datetime.date objects. time Returns numpy array of datetime.time objects. timetz Returns numpy array of datetime.time objects with timezones. dayofyear The ordinal day of the year. day_of_year The ordinal day of the year. dayofweek The day of the week with Monday=0, Sunday=6. day_of_week The day of the week with Monday=0, Sunday=6. weekday The day of the week with Monday=0, Sunday=6. quarter The quarter of the date. tz Return the timezone. freqstr Return the frequency object as a string if it's set, otherwise None. is_month_start Indicates whether the date is the first day of the month. is_month_end Indicates whether the date is the last day of the month. is_quarter_start Indicator for whether the date is the first day of a quarter. is_quarter_end Indicator for whether the date is the last day of a quarter. is_year_start Indicate whether the date is the first day of a year. is_year_end Indicate whether the date is the last day of the year. is_leap_year Boolean indicator if the date belongs to a leap year. inferred_freq Tries to return a string representing a frequency generated by infer_freq. freq Methods normalize (*args,Â **kwargs) Convert times to midnight. strftime (date_format) Convert to Index using specified date_format. snap ([freq]) Snap time stamps to nearest occurring frequency. tz_convert (tz) Convert tz-aware Datetime Array/Index from one time zone to another. tz_localize (tz[,Â ambiguous,Â nonexistent]) Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index. round (*args,Â **kwargs) Perform round operation on the data to the specified freq . floor (*args,Â **kwargs) Perform floor operation on the data to the specified freq . ceil (*args,Â **kwargs) Perform ceil operation on the data to the specified freq . to_period (*args,Â **kwargs) Cast to PeriodArray/PeriodIndex at a particular frequency. to_pydatetime (*args,Â **kwargs) Return an ndarray of datetime.datetime objects. to_series ([index,Â name]) Create a Series with both index and values equal to the index keys. to_frame ([index,Â name]) Create a DataFrame with a column containing the Index. month_name (*args,Â **kwargs) Return the month names with specified locale. day_name (*args,Â **kwargs) Return the day names with specified locale. mean (*[,Â skipna,Â axis]) Return the mean value of the Array. std (*args,Â **kwargs) Return sample standard deviation over requested axis. See also Index The base pandas Index type. TimedeltaIndex Index of timedelta64 data. PeriodIndex Index of Period data. to_datetime Convert argument to datetime. date_range Create a fixed-frequency DatetimeIndex. Notes To learn more about the frequency strings, please see this link . Examples >>> idx = pd . DatetimeIndex ([ "1/1/2020 10:00:00+00:00" , "2/1/2020 11:00:00+00:00" ]) >>> idx DatetimeIndex(['2020-01-01 10:00:00+00:00', '2020-02-01 11:00:00+00:00'], dtype='datetime64[ns, UTC]', freq=None)


Page: https://github.com/pandas-dev/pandas/issues/57006



Page: https://pandas.pydata.org/docs/reference/api/pandas.merge_ordered.html#pandas.merge_ordered
pandas.merge_ordered # pandas. merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ('_x', '_y') , how = 'outer' ) [source] # Perform a merge for ordered data with optional filling/interpolation. Designed for ordered data like time series data. Optionally
perform group-wise merge (see examples). Parameters : left DataFrame or named Series right DataFrame or named Series on label or list Field names to join on. Must be found in both DataFrames. left_on label or list, or array-like Field names to join on in left DataFrame. Can be a vector or list of
vectors of the length of the DataFrame to use a particular vector as
the join key instead of columns. right_on label or list, or array-like Field names to join on in right DataFrame or vector/list of vectors per
left_on docs. left_by column name or list of column names Group left DataFrame by group columns and merge piece by piece with
right DataFrame. Must be None if either left or right are a Series. right_by column name or list of column names Group right DataFrame by group columns and merge piece by piece with
left DataFrame. Must be None if either left or right are a Series. fill_method {âffillâ, None}, default None Interpolation method for data. suffixes list-like, default is (â_xâ, â_yâ) A length-2 sequence where each element is optionally a string
indicating the suffix to add to overlapping column names in left and right respectively. Pass a value of None instead
of a string to indicate that the column name from left or right should be left as-is, with no suffix. At least one of the
values must not be None. how {âleftâ, ârightâ, âouterâ, âinnerâ}, default âouterâ left: use only keys from left frame (SQL: left outer join) right: use only keys from right frame (SQL: right outer join) outer: use union of keys from both frames (SQL: full outer join) inner: use intersection of keys from both frames (SQL: inner join). Returns : DataFrame The merged DataFrame output type will be the same as
âleftâ, if it is a subclass of DataFrame. See also merge Merge with a database-style join. merge_asof Merge on nearest keys. Examples >>> from pandas import merge_ordered >>> df1 = pd . DataFrame ( ... { ... "key" : [ "a" , "c" , "e" , "a" , "c" , "e" ], ... "lvalue" : [ 1 , 2 , 3 , 1 , 2 , 3 ], ... "group" : [ "a" , "a" , "a" , "b" , "b" , "b" ] ... } ... ) >>> df1 key  lvalue group 0   a       1     a 1   c       2     a 2   e       3     a 3   a       1     b 4   c       2     b 5   e       3     b >>> df2 = pd . DataFrame ({ "key" : [ "b" , "c" , "d" ], "rvalue" : [ 1 , 2 , 3 ]}) >>> df2 key  rvalue 0   b       1 1   c       2 2   d       3 >>> merge_ordered ( df1 , df2 , fill_method = "ffill" , left_by = "group" ) key  lvalue group  rvalue 0   a       1     a     NaN 1   b       1     a     1.0 2   c       2     a     2.0 3   d       2     a     3.0 4   e       3     a     3.0 5   a       1     b     NaN 6   b       1     b     1.0 7   c       2     b     2.0 8   d       2     b     3.0 9   e       3     b     3.0


Page: https://github.com/pandas-dev/pandas/issues/57010



Page: https://pandas.pydata.org/docs/reference/api/pandas.testing.assert_series_equal.html#pandas.testing.assert_series_equal
pandas.testing.assert_series_equal # pandas.testing. assert_series_equal ( left , right , check_dtype=True , check_index_type='equiv' , check_series_type=True , check_names=True , check_exact=<no_default> , check_datetimelike_compat=False , check_categorical=True , check_category_order=True , check_freq=True , check_flags=True , rtol=<no_default> , atol=<no_default> , obj='Series' , * , check_index=True , check_like=False ) [source] # Check that left and right Series are equal. Parameters : left Series right Series check_dtype bool, default True Whether to check the Series dtype is identical. check_index_type bool or {âequivâ}, default âequivâ Whether to check the Index class, dtype and inferred_type
are identical. check_series_type bool, default True Whether to check the Series class is identical. check_names bool, default True Whether to check the Series and Index names attribute. check_exact bool, default False Whether to compare number exactly. Changed in version 2.2.0: Defaults to True for integer dtypes if none of check_exact , rtol and atol are specified. check_datetimelike_compat bool, default False Compare datetime-like which is comparable ignoring dtype. check_categorical bool, default True Whether to compare internal Categorical exactly. check_category_order bool, default True Whether to compare category order of internal Categoricals. check_freq bool, default True Whether to check the freq attribute on a DatetimeIndex or TimedeltaIndex. check_flags bool, default True Whether to check the flags attribute. rtol float, default 1e-5 Relative tolerance. Only used when check_exact is False. atol float, default 1e-8 Absolute tolerance. Only used when check_exact is False. obj str, default âSeriesâ Specify object name being compared, internally used to show appropriate
assertion message. check_index bool, default True Whether to check index equivalence. If False, then compare only values. Added in version 1.3.0. check_like bool, default False If True, ignore the order of the index. Must be False if check_index is False.
Note: same labels must be with the same data. Added in version 1.5.0. Examples >>> from pandas import testing as tm >>> a = pd . Series ([ 1 , 2 , 3 , 4 ]) >>> b = pd . Series ([ 1 , 2 , 3 , 4 ]) >>> tm . assert_series_equal ( a , b )


Page: https://pandas.pydata.org/docs/reference/api/pandas.Index.html#pandas.Index
pandas.Index # class pandas. Index ( data = None , dtype = None , copy = False , name = None , tupleize_cols = True ) [source] # Immutable sequence used for indexing and alignment. The basic object storing axis labels for all pandas objects. Changed in version 2.0.0: Index can hold all numpy numeric dtypes (except float16). Previously only
int64/uint64/float64 dtypes were accepted. Parameters : data array-like (1-dimensional) dtype str, numpy.dtype, or ExtensionDtype, optional Data type for the output Index. If not specified, this will be
inferred from data .
See the user guide for more usages. copy bool, default False Copy input data. name object Name to be stored in the index. tupleize_cols bool (default: True) When True, attempt to create a MultiIndex if possible. See also RangeIndex Index implementing a monotonic integer range. CategoricalIndex Index of Categorical s. MultiIndex A multi-level, or hierarchical Index. IntervalIndex An Index of Interval s. DatetimeIndex Index of datetime64 data. TimedeltaIndex Index of timedelta64 data. PeriodIndex Index of Period data. Notes An Index instance can only contain hashable objects.
An Index instance can not hold numpy float16 dtype. Examples >>> pd . Index ([ 1 , 2 , 3 ]) Index([1, 2, 3], dtype='int64') >>> pd . Index ( list ( 'abc' )) Index(['a', 'b', 'c'], dtype='object') >>> pd . Index ([ 1 , 2 , 3 ], dtype = "uint8" ) Index([1, 2, 3], dtype='uint8') Attributes T Return the transpose, which is by definition self. array The ExtensionArray of the data backing this Series or Index. dtype Return the dtype object of the underlying data. empty has_duplicates Check if the Index has duplicate values. hasnans Return True if there are any NaNs. inferred_type Return a string of the type inferred from the values. is_monotonic_decreasing Return a boolean if the values are equal or decreasing. is_monotonic_increasing Return a boolean if the values are equal or increasing. is_unique Return if the index has unique values. name Return Index or MultiIndex name. names nbytes Return the number of bytes in the underlying data. ndim Number of dimensions of the underlying data, by definition 1. nlevels Number of levels. shape Return a tuple of the shape of the underlying data. size Return the number of elements in the underlying data. values Return an array representing the data in the Index. Methods all (*args,Â **kwargs) Return whether all elements are Truthy. any (*args,Â **kwargs) Return whether any element is Truthy. append (other) Append a collection of Index options together. argmax ([axis,Â skipna]) Return int position of the largest value in the Series. argmin ([axis,Â skipna]) Return int position of the smallest value in the Series. argsort (*args,Â **kwargs) Return the integer indices that would sort the index. asof (label) Return the label from the index, or, if not present, the previous one. asof_locs (where,Â mask) Return the locations (indices) of labels in the index. astype (dtype[,Â copy]) Create an Index with values cast to dtypes. copy ([name,Â deep]) Make a copy of this object. delete (loc) Make new Index with passed location(-s) deleted. diff ([periods]) Computes the difference between consecutive values in the Index object. difference (other[,Â sort]) Return a new Index with elements of index not in other . drop (labels[,Â errors]) Make new Index with passed list of labels deleted. drop_duplicates (*[,Â keep]) Return Index with duplicate values removed. droplevel ([level]) Return index with requested level(s) removed. dropna ([how]) Return Index without NA/NaN values. duplicated ([keep]) Indicate duplicate index values. equals (other) Determine if two Index object are equal. factorize ([sort,Â use_na_sentinel]) Encode the object as an enumerated type or categorical variable. fillna ([value,Â downcast]) Fill NA/NaN values with the specified value. format ([name,Â formatter,Â na_rep]) Render a string representation of the Index. get_indexer (target[,Â method,Â limit,Â tolerance]) Compute indexer and mask for new index given the current index. get_indexer_for (target) Guaranteed return of an indexer even when non-unique. get_indexer_non_unique (target) Compute indexer and mask for new index given the current index. get_level_values (level) Return an Index of values for requested level. get_loc (key) Get integer location, slice or boolean mask for requested label. get_slice_bound (label,Â side) Calculate slice bound that corresponds to given label. groupby (values) Group the index labels by a given array of values. holds_integer () (DEPRECATED) Whether the type is an integer type. identical (other) Similar to equals, but checks that object attributes and types are also equal. infer_objects ([copy]) If we have an object dtype, try to infer a non-object dtype. insert (loc,Â item) Make new Index inserting new item at location. intersection (other[,Â sort]) Form the intersection of two Index objects. is_ (other) More flexible, faster check like is but that works through views. is_boolean () (DEPRECATED) Check if the Index only consists of booleans. is_categorical () (DEPRECATED) Check if the Index holds categorical data. is_floating () (DEPRECATED) Check if the Index is a floating type. is_integer () (DEPRECATED) Check if the Index only consists of integers. is_interval () (DEPRECATED) Check if the Index holds Interval objects. is_numeric () (DEPRECATED) Check if the Index only consists of numeric data. is_object () (DEPRECATED) Check if the Index is of the object dtype. isin (values[,Â level]) Return a boolean array where the index values are in values . isna () Detect missing values. isnull () Detect missing values. item () Return the first element of the underlying data as a Python scalar. join (other,Â *[,Â how,Â level,Â ...]) Compute join_index and indexers to conform data structures to the new index. map (mapper[,Â na_action]) Map values using an input mapping or function. max ([axis,Â skipna]) Return the maximum value of the Index. memory_usage ([deep]) Memory usage of the values. min ([axis,Â skipna]) Return the minimum value of the Index. notna () Detect existing (non-missing) values. notnull () Detect existing (non-missing) values. nunique ([dropna]) Return number of unique elements in the object. putmask (mask,Â value) Return a new Index of the values set with the mask. ravel ([order]) Return a view on self. reindex (target[,Â method,Â level,Â limit,Â ...]) Create index with target's values. rename (name,Â *[,Â inplace]) Alter Index or MultiIndex name. repeat (repeats[,Â axis]) Repeat elements of a Index. round ([decimals]) Round each value in the Index to the given number of decimals. searchsorted (value[,Â side,Â sorter]) Find indices where elements should be inserted to maintain order. set_names (names,Â *[,Â level,Â inplace]) Set Index or MultiIndex name. shift ([periods,Â freq]) Shift index by desired number of time frequency increments. slice_indexer ([start,Â end,Â step]) Compute the slice indexer for input labels and step. slice_locs ([start,Â end,Â step]) Compute slice locations for input labels. sort (*args,Â **kwargs) Use sort_values instead. sort_values (*[,Â return_indexer,Â ascending,Â ...]) Return a sorted copy of the index. sortlevel ([level,Â ascending,Â ...]) For internal compatibility with the Index API. symmetric_difference (other[,Â result_name,Â sort]) Compute the symmetric difference of two Index objects. take (indices[,Â axis,Â allow_fill,Â fill_value]) Return a new Index of the values selected by the indices. to_flat_index () Identity method. to_frame ([index,Â name]) Create a DataFrame with a column containing the Index. to_list () Return a list of the values. to_numpy ([dtype,Â copy,Â na_value]) A NumPy ndarray representing the values in this Series or Index. to_series ([index,Â name]) Create a Series with both index and values equal to the index keys. tolist () Return a list of the values. transpose (*args,Â **kwargs) Return the transpose, which is by definition self. union (other[,Â sort]) Form the union of two Index objects. unique ([level]) Return unique values in the index. value_counts ([normalize,Â sort,Â ascending,Â ...]) Return a Series containing counts of unique values. view ([cls]) where (cond[,Â other]) Replace values where the condition is False.


Page: https://github.com/pandas-dev/pandas/issues/57067



Page: https://pandas.pydata.org/docs/reference/api/pandas.read_json.html#pandas.read_json
pandas.read_json # pandas. read_json ( path_or_buf , * , orient=None , typ='frame' , dtype=None , convert_axes=None , convert_dates=True , keep_default_dates=True , precise_float=False , date_unit=None , encoding=None , encoding_errors='strict' , lines=False , chunksize=None , compression='infer' , nrows=None , storage_options=None , dtype_backend=<no_default> , engine='ujson' ) [source] # Convert a JSON string to pandas object. Parameters : path_or_buf a valid JSON str, path object or file-like object Any valid string path is acceptable. The string could be a URL. Valid
URL schemes include http, ftp, s3, and file. For file URLs, a host is
expected. A local file could be: file://localhost/path/to/table.json . If you want to pass in a path object, pandas accepts any os.PathLike . By file-like object, we refer to objects with a read() method,
such as a file handle (e.g. via builtin open function)
or StringIO . Deprecated since version 2.1.0: Passing json literal strings is deprecated. orient str, optional Indication of expected JSON string format.
Compatible JSON strings can be produced by to_json() with a
corresponding orient value.
The set of possible orients is: 'split' : dict like {index -> [index], columns -> [columns], data -> [values]} 'records' : list like [{column -> value}, ... , {column -> value}] 'index' : dict like {index -> {column -> value}} 'columns' : dict like {column -> {index -> value}} 'values' : just the values array 'table' : dict like {'schema': {schema}, 'data': {data}} The allowed and default values depend on the value
of the typ parameter. when typ == 'series' , allowed orients are {'split','records','index'} default is 'index' The Series index must be unique for orient 'index' . when typ == 'frame' , allowed orients are {'split','records','index', 'columns','values', 'table'} default is 'columns' The DataFrame index must be unique for orients 'index' and 'columns' . The DataFrame columns must be unique for orients 'index' , 'columns' , and 'records' . typ {âframeâ, âseriesâ}, default âframeâ The type of object to recover. dtype bool or dict, default None If True, infer dtypes; if a dict of column to dtype, then use those;
if False, then donât infer dtypes at all, applies only to the data. For all orient values except 'table' , default is True. convert_axes bool, default None Try to convert the axes to the proper dtypes. For all orient values except 'table' , default is True. convert_dates bool or list of str, default True If True then default datelike columns may be converted (depending on
keep_default_dates).
If False, no dates will be converted.
If a list of column names, then those columns will be converted and
default datelike columns may also be converted (depending on
keep_default_dates). keep_default_dates bool, default True If parsing dates (convert_dates is not False), then try to parse the
default datelike columns.
A column label is datelike if it ends with '_at' , it ends with '_time' , it begins with 'timestamp' , it is 'modified' , or it is 'date' . precise_float bool, default False Set to enable usage of higher precision (strtod) function when
decoding string to double values. Default (False) is to use fast but
less precise builtin functionality. date_unit str, default None The timestamp unit to detect if converting dates. The default behaviour
is to try and detect the correct precision, but if this is not desired
then pass one of âsâ, âmsâ, âusâ or ânsâ to force parsing only seconds,
milliseconds, microseconds or nanoseconds respectively. encoding str, default is âutf-8â The encoding to use to decode py3 bytes. encoding_errors str, optional, default âstrictâ How encoding errors are treated. List of possible values . Added in version 1.3.0. lines bool, default False Read the file as a json object per line. chunksize int, optional Return JsonReader object for iteration.
See the line-delimited json docs for more information on chunksize .
This can only be passed if lines=True .
If this is None, the file will be read into memory all at once. compression str or dict, default âinferâ For on-the-fly decompression of on-disk data. If âinferâ and âpath_or_bufâ is
path-like, then detect compression from the following extensions: â.gzâ,
â.bz2â, â.zipâ, â.xzâ, â.zstâ, â.tarâ, â.tar.gzâ, â.tar.xzâ or â.tar.bz2â
(otherwise no compression).
If using âzipâ or âtarâ, the ZIP file must contain only one data file to be read in.
Set to None for no decompression.
Can also be a dict with key 'method' set
to one of { 'zip' , 'gzip' , 'bz2' , 'zstd' , 'xz' , 'tar' } and
other key-value pairs are forwarded to zipfile.ZipFile , gzip.GzipFile , bz2.BZ2File , zstandard.ZstdDecompressor , lzma.LZMAFile or tarfile.TarFile , respectively.
As an example, the following could be passed for Zstandard decompression using a
custom compression dictionary: compression={'method': 'zstd', 'dict_data': my_compression_dict} . Added in version 1.5.0: Added support for .tar files. Changed in version 1.4.0: Zstandard support. nrows int, optional The number of lines from the line-delimited jsonfile that has to be read.
This can only be passed if lines=True .
If this is None, all the rows will be returned. storage_options dict, optional Extra options that make sense for a particular storage connection, e.g.
host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
are forwarded to urllib.request.Request as header options. For other
URLs (e.g. starting with âs3://â, and âgcs://â) the key-value pairs are
forwarded to fsspec.open . Please see fsspec and urllib for more
details, and for more examples on storage options refer here . dtype_backend {ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâ Back-end data type applied to the resultant DataFrame (still experimental). Behaviour is as follows: "numpy_nullable" : returns nullable-dtype-backed DataFrame (default). "pyarrow" : returns pyarrow-backed nullable ArrowDtype DataFrame. Added in version 2.0. engine {âujsonâ, âpyarrowâ}, default âujsonâ Parser engine to use. The "pyarrow" engine is only available when lines=True . Added in version 2.0. Returns : Series, DataFrame, or pandas.api.typing.JsonReader A JsonReader is returned when chunksize is not 0 or None .
Otherwise, the type returned depends on the value of typ . See also DataFrame.to_json Convert a DataFrame to a JSON string. Series.to_json Convert a Series to a JSON string. json_normalize Normalize semi-structured JSON data into a flat table. Notes Specific to orient='table' , if a DataFrame with a literal Index name of index gets written with to_json() , the
subsequent read operation will incorrectly set the Index name to None . This is because index is also used by DataFrame.to_json() to denote a missing Index name, and the subsequent read_json() operation cannot distinguish between the two. The same
limitation is encountered with a MultiIndex and any names
beginning with 'level_' . Examples >>> from io import StringIO >>> df = pd . DataFrame ([[ 'a' , 'b' ], [ 'c' , 'd' ]], ... index = [ 'row 1' , 'row 2' ], ... columns = [ 'col 1' , 'col 2' ]) Encoding/decoding a Dataframe using 'split' formatted JSON: >>> df . to_json ( orient = 'split' ) '{"columns":["col 1","col 2"],"index":["row 1","row 2"],"data":[["a","b"],["c","d"]]}' >>> pd . read_json ( StringIO ( _ ), orient = 'split' ) col 1 col 2 row 1     a     b row 2     c     d Encoding/decoding a Dataframe using 'index' formatted JSON: >>> df . to_json ( orient = 'index' ) '{"row 1":{"col 1":"a","col 2":"b"},"row 2":{"col 1":"c","col 2":"d"}}' >>> pd . read_json ( StringIO ( _ ), orient = 'index' ) col 1 col 2 row 1     a     b row 2     c     d Encoding/decoding a Dataframe using 'records' formatted JSON.
Note that index labels are not preserved with this encoding. >>> df . to_json ( orient = 'records' ) '[{"col 1":"a","col 2":"b"},{"col 1":"c","col 2":"d"}]' >>> pd . read_json ( StringIO ( _ ), orient = 'records' ) col 1 col 2 0     a     b 1     c     d Encoding with Table Schema >>> df . to_json ( orient = 'table' ) '{"schema":{"fields":[{"name":"index","type":"string"},{"name":"col 1","type":"string"},{"name":"col 2","type":"string"}],"primaryKey":["index"],"pandas_version":"1.4.0"},"data":[{"index":"row 1","col 1":"a","col 2":"b"},{"index":"row 2","col 1":"c","col 2":"d"}]}' The following example uses dtype_backend="numpy_nullable" >>> data = '''{"index": {"0": 0, "1": 1}, ... "a": {"0": 1, "1": null}, ... "b": {"0": 2.5, "1": 4.5}, ... "c": {"0": true, "1": false}, ... "d": {"0": "a", "1": "b"}, ... "e": {"0": 1577.2, "1": 1577.1}}''' >>> pd . read_json ( StringIO ( data ), dtype_backend = "numpy_nullable" ) index     a    b      c  d       e 0      0     1  2.5   True  a  1577.2 1      1  <NA>  4.5  False  b  1577.1


Page: https://pandas.pydata.org/docs/reference/api/pandas.RangeIndex.html#pandas.RangeIndex
pandas.RangeIndex # class pandas. RangeIndex ( start = None , stop = None , step = None , dtype = None , copy = False , name = None ) [source] # Immutable Index implementing a monotonic integer range. RangeIndex is a memory-saving special case of an Index limited to representing
monotonic ranges with a 64-bit dtype. Using RangeIndex may in some instances
improve computing speed. This is the default index type used
by DataFrame and Series when no explicit index is provided by the user. Parameters : start int (default: 0), range, or other RangeIndex instance If int and âstopâ is not given, interpreted as âstopâ instead. stop int (default: 0) step int (default: 1) dtype np.int64 Unused, accepted for homogeneity with other index types. copy bool, default False Unused, accepted for homogeneity with other index types. name object, optional Name to be stored in the index. Attributes start The value of the start parameter ( 0 if this was not supplied). stop The value of the stop parameter. step The value of the step parameter ( 1 if this was not supplied). Methods from_range (data[,Â name,Â dtype]) Create pandas.RangeIndex from a range object. See also Index The base pandas Index type. Examples >>> list ( pd . RangeIndex ( 5 )) [0, 1, 2, 3, 4] >>> list ( pd . RangeIndex ( - 2 , 4 )) [-2, -1, 0, 1, 2, 3] >>> list ( pd . RangeIndex ( 0 , 10 , 2 )) [0, 2, 4, 6, 8] >>> list ( pd . RangeIndex ( 2 , - 10 , - 3 )) [2, -1, -4, -7] >>> list ( pd . RangeIndex ( 0 )) [] >>> list ( pd . RangeIndex ( 1 , 0 )) []


Page: https://github.com/pandas-dev/pandas/issues/57429



Page: https://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html#pandas.wide_to_long
pandas.wide_to_long # pandas. wide_to_long ( df , stubnames , i , j , sep = '' , suffix = '\\d+' ) [source] # Unpivot a DataFrame from wide to long format. Less flexible but more user-friendly than melt. With stubnames [âAâ, âBâ], this function expects to find one or more
group of columns with format
A-suffix1, A-suffix2,â¦, B-suffix1, B-suffix2,â¦
You specify what you want to call this suffix in the resulting long format
with j (for example j=âyearâ ) Each row of these wide variables are assumed to be uniquely identified by i (can be a single column name or a list of column names) All remaining variables in the data frame are left intact. Parameters : df DataFrame The wide-format DataFrame. stubnames str or list-like The stub name(s). The wide format variables are assumed to
start with the stub names. i str or list-like Column(s) to use as id variable(s). j str The name of the sub-observation variable. What you wish to name your
suffix in the long format. sep str, default ââ A character indicating the separation of the variable names
in the wide format, to be stripped from the names in the long format.
For example, if your column names are A-suffix1, A-suffix2, you
can strip the hyphen by specifying sep=â-â . suffix str, default â\d+â A regular expression capturing the wanted suffixes. â\d+â captures
numeric suffixes. Suffixes with no numbers could be specified with the
negated character class â\D+â. You can also further disambiguate
suffixes, for example, if your wide variables are of the form A-one,
B-two,.., and you have an unrelated column A-rating, you can ignore the
last one by specifying suffix=â(!?one|two)â . When all suffixes are
numeric, they are cast to int64/float64. Returns : DataFrame A DataFrame that contains each stub name as a variable, with new index
(i, j). See also melt Unpivot a DataFrame from wide to long format, optionally leaving identifiers set. pivot Create a spreadsheet-style pivot table as a DataFrame. DataFrame.pivot Pivot without aggregation that can handle non-numeric data. DataFrame.pivot_table Generalization of pivot that can handle duplicate values for one index/column pair. DataFrame.unstack Pivot based on the index values instead of a column. Notes All extra variables are left untouched. This simply uses pandas.melt under the hood, but is hard-coded to âdo the right thingâ
in a typical case. Examples >>> np . random . seed ( 123 ) >>> df = pd . DataFrame ({ "A1970" : { 0 : "a" , 1 : "b" , 2 : "c" }, ... "A1980" : { 0 : "d" , 1 : "e" , 2 : "f" }, ... "B1970" : { 0 : 2.5 , 1 : 1.2 , 2 : .7 }, ... "B1980" : { 0 : 3.2 , 1 : 1.3 , 2 : .1 }, ... "X" : dict ( zip ( range ( 3 ), np . random . randn ( 3 ))) ... }) >>> df [ "id" ] = df . index >>> df A1970 A1980  B1970  B1980         X  id 0     a     d    2.5    3.2 -1.085631   0 1     b     e    1.2    1.3  0.997345   1 2     c     f    0.7    0.1  0.282978   2 >>> pd . wide_to_long ( df , [ "A" , "B" ], i = "id" , j = "year" ) ... X  A    B id year 0  1970 -1.085631  a  2.5 1  1970  0.997345  b  1.2 2  1970  0.282978  c  0.7 0  1980 -1.085631  d  3.2 1  1980  0.997345  e  1.3 2  1980  0.282978  f  0.1 With multiple id columns >>> df = pd . DataFrame ({ ... 'famid' : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ], ... 'birth' : [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ], ... 'ht1' : [ 2.8 , 2.9 , 2.2 , 2 , 1.8 , 1.9 , 2.2 , 2.3 , 2.1 ], ... 'ht2' : [ 3.4 , 3.8 , 2.9 , 3.2 , 2.8 , 2.4 , 3.3 , 3.4 , 2.9 ] ... }) >>> df famid  birth  ht1  ht2 0      1      1  2.8  3.4 1      1      2  2.9  3.8 2      1      3  2.2  2.9 3      2      1  2.0  3.2 4      2      2  1.8  2.8 5      2      3  1.9  2.4 6      3      1  2.2  3.3 7      3      2  2.3  3.4 8      3      3  2.1  2.9 >>> l = pd . wide_to_long ( df , stubnames = 'ht' , i = [ 'famid' , 'birth' ], j = 'age' ) >>> l ... ht famid birth age 1     1     1    2.8 2    3.4 2     1    2.9 2    3.8 3     1    2.2 2    2.9 2     1     1    2.0 2    3.2 2     1    1.8 2    2.8 3     1    1.9 2    2.4 3     1     1    2.2 2    3.3 2     1    2.3 2    3.4 3     1    2.1 2    2.9 Going from long back to wide just takes some creative use of unstack >>> w = l . unstack () >>> w . columns = w . columns . map ( ' {0[0]}{0[1]} ' . format ) >>> w . reset_index () famid  birth  ht1  ht2 0      1      1  2.8  3.4 1      1      2  2.9  3.8 2      1      3  2.2  2.9 3      2      1  2.0  3.2 4      2      2  1.8  2.8 5      2      3  1.9  2.4 6      3      1  2.2  3.3 7      3      2  2.3  3.4 8      3      3  2.1  2.9 Less wieldy column names are also handled >>> np . random . seed ( 0 ) >>> df = pd . DataFrame ({ 'A(weekly)-2010' : np . random . rand ( 3 ), ... 'A(weekly)-2011' : np . random . rand ( 3 ), ... 'B(weekly)-2010' : np . random . rand ( 3 ), ... 'B(weekly)-2011' : np . random . rand ( 3 ), ... 'X' : np . random . randint ( 3 , size = 3 )}) >>> df [ 'id' ] = df . index >>> df A(weekly)-2010  A(weekly)-2011  B(weekly)-2010  B(weekly)-2011  X  id 0        0.548814        0.544883        0.437587        0.383442  0   0 1        0.715189        0.423655        0.891773        0.791725  1   1 2        0.602763        0.645894        0.963663        0.528895  1   2 >>> pd . wide_to_long ( df , [ 'A(weekly)' , 'B(weekly)' ], i = 'id' , ... j = 'year' , sep = '-' ) ... X  A(weekly)  B(weekly) id year 0  2010  0   0.548814   0.437587 1  2010  1   0.715189   0.891773 2  2010  1   0.602763   0.963663 0  2011  0   0.544883   0.383442 1  2011  1   0.423655   0.791725 2  2011  1   0.645894   0.528895 If we have many columns, we could also use a regex to find our
stubnames and pass that list on to wide_to_long >>> stubnames = sorted ( ... set ([ match [ 0 ] for match in df . columns . str . findall ( ... r '[A-B]\(.*\)' ) . values if match != []]) ... ) >>> list ( stubnames ) ['A(weekly)', 'B(weekly)'] All of the above examples have integers as suffixes. It is possible to
have non-integers as suffixes. >>> df = pd . DataFrame ({ ... 'famid' : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ], ... 'birth' : [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ], ... 'ht_one' : [ 2.8 , 2.9 , 2.2 , 2 , 1.8 , 1.9 , 2.2 , 2.3 , 2.1 ], ... 'ht_two' : [ 3.4 , 3.8 , 2.9 , 3.2 , 2.8 , 2.4 , 3.3 , 3.4 , 2.9 ] ... }) >>> df famid  birth  ht_one  ht_two 0      1      1     2.8     3.4 1      1      2     2.9     3.8 2      1      3     2.2     2.9 3      2      1     2.0     3.2 4      2      2     1.8     2.8 5      2      3     1.9     2.4 6      3      1     2.2     3.3 7      3      2     2.3     3.4 8      3      3     2.1     2.9 >>> l = pd . wide_to_long ( df , stubnames = 'ht' , i = [ 'famid' , 'birth' ], j = 'age' , ... sep = '_' , suffix = r '\w+' ) >>> l ... ht famid birth age 1     1     one  2.8 two  3.4 2     one  2.9 two  3.8 3     one  2.2 two  2.9 2     1     one  2.0 two  3.2 2     one  1.8 two  2.8 3     one  1.9 two  2.4 3     1     one  2.2 two  3.3 2     one  2.3 two  3.4 3     one  2.1 two  2.9


Page: https://github.com/pandas-dev/pandas/issues/57066



Page: https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
pandas.core.groupby.DataFrameGroupBy.idxmin # DataFrameGroupBy. idxmin ( axis=<no_default> , skipna=True , numeric_only=False ) [source] # Return index of first occurrence of minimum over requested axis. NA/null values are excluded. Parameters : axis {{0 or âindexâ, 1 or âcolumnsâ}}, default None The axis to use. 0 or âindexâ for row-wise, 1 or âcolumnsâ for column-wise.
If axis is not provided, grouperâs axis is used. Changed in version 2.0.0. Deprecated since version 2.1.0: For axis=1, operate on the underlying object instead. Otherwise
the axis keyword is not necessary. skipna bool, default True Exclude NA/null values. If an entire row/column is NA, the result
will be NA. numeric_only bool, default False Include only float , int or boolean data. Added in version 1.5.0. Returns : Series Indexes of minima along the specified axis. Raises : ValueError If the row/column is empty See also Series.idxmin Return index of the minimum element. Notes This method is the DataFrame version of ndarray.argmin . Examples Consider a dataset containing food consumption in Argentina. >>> df = pd . DataFrame ({ 'consumption' : [ 10.51 , 103.11 , 55.48 ], ... 'co2_emissions' : [ 37.2 , 19.66 , 1712 ]}, ... index = [ 'Pork' , 'Wheat Products' , 'Beef' ]) >>> df consumption  co2_emissions Pork                  10.51         37.20 Wheat Products       103.11         19.66 Beef                  55.48       1712.00 By default, it returns the index for the minimum value in each column. >>> df . idxmin () consumption                Pork co2_emissions    Wheat Products dtype: object To return the index for the minimum value in each row, use axis="columns" . >>> df . idxmin ( axis = "columns" ) Pork                consumption Wheat Products    co2_emissions Beef                consumption dtype: object


Page: https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
pandas.core.groupby.DataFrameGroupBy.idxmax # DataFrameGroupBy. idxmax ( axis=<no_default> , skipna=True , numeric_only=False ) [source] # Return index of first occurrence of maximum over requested axis. NA/null values are excluded. Parameters : axis {{0 or âindexâ, 1 or âcolumnsâ}}, default None The axis to use. 0 or âindexâ for row-wise, 1 or âcolumnsâ for column-wise.
If axis is not provided, grouperâs axis is used. Changed in version 2.0.0. Deprecated since version 2.1.0: For axis=1, operate on the underlying object instead. Otherwise
the axis keyword is not necessary. skipna bool, default True Exclude NA/null values. If an entire row/column is NA, the result
will be NA. numeric_only bool, default False Include only float , int or boolean data. Added in version 1.5.0. Returns : Series Indexes of maxima along the specified axis. Raises : ValueError If the row/column is empty See also Series.idxmax Return index of the maximum element. Notes This method is the DataFrame version of ndarray.argmax . Examples Consider a dataset containing food consumption in Argentina. >>> df = pd . DataFrame ({ 'consumption' : [ 10.51 , 103.11 , 55.48 ], ... 'co2_emissions' : [ 37.2 , 19.66 , 1712 ]}, ... index = [ 'Pork' , 'Wheat Products' , 'Beef' ]) >>> df consumption  co2_emissions Pork                  10.51         37.20 Wheat Products       103.11         19.66 Beef                  55.48       1712.00 By default, it returns the index for the maximum value in each column. >>> df . idxmax () consumption     Wheat Products co2_emissions             Beef dtype: object To return the index for the maximum value in each row, use axis="columns" . >>> df . idxmax ( axis = "columns" ) Pork              co2_emissions Wheat Products     consumption Beef              co2_emissions dtype: object


Page: https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.idxmin.html#pandas.core.groupby.SeriesGroupBy.idxmin
pandas.core.groupby.SeriesGroupBy.idxmin # SeriesGroupBy. idxmin ( axis=<no_default> , skipna=True ) [source] # Return the row label of the minimum value. If multiple values equal the minimum, the first row label with that
value is returned. Parameters : axis {0 or âindexâ} Unused. Parameter needed for compatibility with DataFrame. skipna bool, default True Exclude NA/null values. If the entire Series is NA, the result
will be NA. *args, **kwargs Additional arguments and keywords have no effect but might be
accepted for compatibility with NumPy. Returns : Index Label of the minimum value. Raises : ValueError If the Series is empty. See also numpy.argmin Return indices of the minimum values along the given axis. DataFrame.idxmin Return index of first occurrence of minimum over requested axis. Series.idxmax Return index label of the first occurrence of maximum of values. Notes This method is the Series version of ndarray.argmin . This method
returns the label of the minimum, while ndarray.argmin returns
the position. To get the position, use series.values.argmin() . Examples >>> s = pd . Series ( data = [ 1 , None , 4 , 1 ], ... index = [ 'A' , 'B' , 'C' , 'D' ]) >>> s A    1.0 B    NaN C    4.0 D    1.0 dtype: float64 >>> s . idxmin () 'A' If skipna is False and there is an NA value in the data,
the function returns nan . >>> s . idxmin ( skipna = False ) nan


Page: https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.idxmax.html#pandas.core.groupby.SeriesGroupBy.idxmax
pandas.core.groupby.SeriesGroupBy.idxmax # SeriesGroupBy. idxmax ( axis=<no_default> , skipna=True ) [source] # Return the row label of the maximum value. If multiple values equal the maximum, the first row label with that
value is returned. Parameters : axis {0 or âindexâ} Unused. Parameter needed for compatibility with DataFrame. skipna bool, default True Exclude NA/null values. If the entire Series is NA, the result
will be NA. *args, **kwargs Additional arguments and keywords have no effect but might be
accepted for compatibility with NumPy. Returns : Index Label of the maximum value. Raises : ValueError If the Series is empty. See also numpy.argmax Return indices of the maximum values along the given axis. DataFrame.idxmax Return index of first occurrence of maximum over requested axis. Series.idxmin Return index label of the first occurrence of minimum of values. Notes This method is the Series version of ndarray.argmax . This method
returns the label of the maximum, while ndarray.argmax returns
the position. To get the position, use series.values.argmax() . Examples >>> s = pd . Series ( data = [ 1 , None , 4 , 3 , 4 ], ... index = [ 'A' , 'B' , 'C' , 'D' , 'E' ]) >>> s A    1.0 B    NaN C    4.0 D    3.0 E    4.0 dtype: float64 >>> s . idxmax () 'C' If skipna is False and there is an NA value in the data,
the function returns nan . >>> s . idxmax ( skipna = False ) nan


Page: https://github.com/pandas-dev/pandas/issues/57040



Page: https://github.com/pandas-dev/pandas/issues/57318



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
pandas.DataFrame.groupby # DataFrame. groupby ( by=None , axis=<no_default> , level=None , as_index=True , sort=True , group_keys=True , observed=<no_default> , dropna=True ) [source] # Group DataFrame using a mapper or by a Series of columns. A groupby operation involves some combination of splitting the
object, applying a function, and combining the results. This can be
used to group large amounts of data and compute operations on these
groups. Parameters : by mapping, function, label, pd.Grouper or list of such Used to determine the groups for the groupby.
If by is a function, itâs called on each value of the objectâs
index. If a dict or Series is passed, the Series or dict VALUES
will be used to determine the groups (the Seriesâ values are first
aligned; see .align() method). If a list or ndarray of length
equal to the selected axis is passed (see the groupby user guide ),
the values are used as-is to determine the groups. A label or list
of labels may be passed to group by the columns in self .
Notice that a tuple is interpreted as a (single) key. axis {0 or âindexâ, 1 or âcolumnsâ}, default 0 Split along rows (0) or columns (1). For Series this parameter
is unused and defaults to 0. Deprecated since version 2.1.0: Will be removed and behave like axis=0 in a future version.
For axis=1 , do frame.T.groupby(...) instead. level int, level name, or sequence of such, default None If the axis is a MultiIndex (hierarchical), group by a particular
level or levels. Do not specify both by and level . as_index bool, default True Return object with group labels as the
index. Only relevant for DataFrame input. as_index=False is
effectively âSQL-styleâ grouped output. This argument has no effect
on filtrations (see the filtrations in the user guide ),
such as head() , tail() , nth() and in transformations
(see the transformations in the user guide ). sort bool, default True Sort group keys. Get better performance by turning this off.
Note this does not influence the order of observations within each
group. Groupby preserves the order of rows within each group. If False,
the groups will appear in the same order as they did in the original DataFrame.
This argument has no effect on filtrations (see the filtrations in the user guide ),
such as head() , tail() , nth() and in transformations
(see the transformations in the user guide ). Changed in version 2.0.0: Specifying sort=False with an ordered categorical grouper will no
longer sort the values. group_keys bool, default True When calling apply and the by argument produces a like-indexed
(i.e. a transform ) result, add group keys to
index to identify pieces. By default group keys are not included
when the resultâs index (and column) labels match the inputs, and
are included otherwise. Changed in version 1.5.0: Warns that group_keys will no longer be ignored when the
result from apply is a like-indexed Series or DataFrame.
Specify group_keys explicitly to include the group keys or
not. Changed in version 2.0.0: group_keys now defaults to True . observed bool, default False This only applies if any of the groupers are Categoricals.
If True: only show observed values for categorical groupers.
If False: show all values for categorical groupers. Deprecated since version 2.1.0: The default value will change to True in a future version of pandas. dropna bool, default True If True, and if group keys contain NA values, NA values together
with row/column will be dropped.
If False, NA values will also be treated as the key in groups. Returns : pandas.api.typing.DataFrameGroupBy Returns a groupby object that contains information about the groups. See also resample Convenience method for frequency conversion and resampling of time series. Notes See the user guide for more
detailed usage and examples, including splitting an object into groups,
iterating through groups, selecting a group, aggregation, and more. Examples >>> df = pd . DataFrame ({ 'Animal' : [ 'Falcon' , 'Falcon' , ... 'Parrot' , 'Parrot' ], ... 'Max Speed' : [ 380. , 370. , 24. , 26. ]}) >>> df Animal  Max Speed 0  Falcon      380.0 1  Falcon      370.0 2  Parrot       24.0 3  Parrot       26.0 >>> df . groupby ([ 'Animal' ]) . mean () Max Speed Animal Falcon      375.0 Parrot       25.0 Hierarchical Indexes We can groupby different levels of a hierarchical index
using the level parameter: >>> arrays = [[ 'Falcon' , 'Falcon' , 'Parrot' , 'Parrot' ], ... [ 'Captive' , 'Wild' , 'Captive' , 'Wild' ]] >>> index = pd . MultiIndex . from_arrays ( arrays , names = ( 'Animal' , 'Type' )) >>> df = pd . DataFrame ({ 'Max Speed' : [ 390. , 350. , 30. , 20. ]}, ... index = index ) >>> df Max Speed Animal Type Falcon Captive      390.0 Wild         350.0 Parrot Captive       30.0 Wild          20.0 >>> df . groupby ( level = 0 ) . mean () Max Speed Animal Falcon      370.0 Parrot       25.0 >>> df . groupby ( level = "Type" ) . mean () Max Speed Type Captive      210.0 Wild         185.0 We can also choose to include NA in group keys or not by setting dropna parameter, the default setting is True . >>> l = [[ 1 , 2 , 3 ], [ 1 , None , 4 ], [ 2 , 1 , 3 ], [ 1 , 2 , 2 ]] >>> df = pd . DataFrame ( l , columns = [ "a" , "b" , "c" ]) >>> df . groupby ( by = [ "b" ]) . sum () a   c b 1.0 2   3 2.0 2   5 >>> df . groupby ( by = [ "b" ], dropna = False ) . sum () a   c b 1.0 2   3 2.0 2   5 NaN 1   4 >>> l = [[ "a" , 12 , 12 ], [ None , 12.3 , 33. ], [ "b" , 12.3 , 123 ], [ "a" , 1 , 1 ]] >>> df = pd . DataFrame ( l , columns = [ "a" , "b" , "c" ]) >>> df . groupby ( by = "a" ) . sum () b     c a a   13.0   13.0 b   12.3  123.0 >>> df . groupby ( by = "a" , dropna = False ) . sum () b     c a a   13.0   13.0 b   12.3  123.0 NaN 12.3   33.0 When using .apply() , use group_keys to include or exclude the
group keys. The group_keys argument defaults to True (include). >>> df = pd . DataFrame ({ 'Animal' : [ 'Falcon' , 'Falcon' , ... 'Parrot' , 'Parrot' ], ... 'Max Speed' : [ 380. , 370. , 24. , 26. ]}) >>> df . groupby ( "Animal" , group_keys = True )[[ 'Max Speed' ]] . apply ( lambda x : x ) Max Speed Animal Falcon 0      380.0 1      370.0 Parrot 2       24.0 3       26.0 >>> df . groupby ( "Animal" , group_keys = False )[[ 'Max Speed' ]] . apply ( lambda x : x ) Max Speed 0      380.0 1      370.0 2       24.0 3       26.0


Page: https://pandas.pydata.org/docs/reference/api/pandas.Series.html#pandas.Series
pandas.Series # class pandas. Series ( data=None , index=None , dtype=None , name=None , copy=None , fastpath=<no_default> ) [source] # One-dimensional ndarray with axis labels (including time series). Labels need not be unique but must be a hashable type. The object
supports both integer- and label-based indexing and provides a host of
methods for performing operations involving the index. Statistical
methods from ndarray have been overridden to automatically exclude
missing data (currently represented as NaN). Operations between Series (+, -, /, *, **) align values based on their
associated index valuesâ they need not be the same length. The result
index will be the sorted union of the two indexes. Parameters : data array-like, Iterable, dict, or scalar value Contains data stored in Series. If data is a dict, argument order is
maintained. index array-like or Index (1d) Values must be hashable and have the same length as data .
Non-unique index values are allowed. Will default to
RangeIndex (0, 1, 2, â¦, n) if not provided. If data is dict-like
and index is None, then the keys in the data are used as the index. If the
index is not None, the resulting Series is reindexed with the index values. dtype str, numpy.dtype, or ExtensionDtype, optional Data type for the output Series. If not specified, this will be
inferred from data .
See the user guide for more usages. name Hashable, default None The name to give to the Series. copy bool, default False Copy input data. Only affects Series or 1d ndarray input. See examples. Notes Please reference the User Guide for more information. Examples Constructing Series from a dictionary with an Index specified >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> ser = pd . Series ( data = d , index = [ 'a' , 'b' , 'c' ]) >>> ser a   1 b   2 c   3 dtype: int64 The keys of the dictionary match with the Index values, hence the Index
values have no effect. >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> ser = pd . Series ( data = d , index = [ 'x' , 'y' , 'z' ]) >>> ser x   NaN y   NaN z   NaN dtype: float64 Note that the Index is first build with the keys from the dictionary.
After this the Series is reindexed with the given Index values, hence we
get all NaN as a result. Constructing Series from a list with copy=False . >>> r = [ 1 , 2 ] >>> ser = pd . Series ( r , copy = False ) >>> ser . iloc [ 0 ] = 999 >>> r [1, 2] >>> ser 0    999 1      2 dtype: int64 Due to input data type the Series has a copy of
the original data even though copy=False , so
the data is unchanged. Constructing Series from a 1d ndarray with copy=False . >>> r = np . array ([ 1 , 2 ]) >>> ser = pd . Series ( r , copy = False ) >>> ser . iloc [ 0 ] = 999 >>> r array([999,   2]) >>> ser 0    999 1      2 dtype: int64 Due to input data type the Series has a view on
the original data, so
the data is changed as well. Attributes T Return the transpose, which is by definition self. array The ExtensionArray of the data backing this Series or Index. at Access a single value for a row/column label pair. attrs Dictionary of global attributes of this dataset. axes Return a list of the row axis labels. dtype Return the dtype object of the underlying data. dtypes Return the dtype object of the underlying data. empty Indicator whether Series/DataFrame is empty. flags Get the properties associated with this pandas object. hasnans Return True if there are any NaNs. iat Access a single value for a row/column pair by integer position. iloc (DEPRECATED) Purely integer-location based indexing for selection by position. index The index (axis labels) of the Series. is_monotonic_decreasing Return boolean if values in the object are monotonically decreasing. is_monotonic_increasing Return boolean if values in the object are monotonically increasing. is_unique Return boolean if values in the object are unique. loc Access a group of rows and columns by label(s) or a boolean array. name Return the name of the Series. nbytes Return the number of bytes in the underlying data. ndim Number of dimensions of the underlying data, by definition 1. shape Return a tuple of the shape of the underlying data. size Return the number of elements in the underlying data. values Return Series as ndarray or ndarray-like depending on the dtype. Methods abs () Return a Series/DataFrame with absolute numeric value of each element. add (other[,Â level,Â fill_value,Â axis]) Return Addition of series and other, element-wise (binary operator add ). add_prefix (prefix[,Â axis]) Prefix labels with string prefix . add_suffix (suffix[,Â axis]) Suffix labels with string suffix . agg ([func,Â axis]) Aggregate using one or more operations over the specified axis. aggregate ([func,Â axis]) Aggregate using one or more operations over the specified axis. align (other[,Â join,Â axis,Â level,Â copy,Â ...]) Align two objects on their axes with the specified join method. all ([axis,Â bool_only,Â skipna]) Return whether all elements are True, potentially over an axis. any (*[,Â axis,Â bool_only,Â skipna]) Return whether any element is True, potentially over an axis. apply (func[,Â convert_dtype,Â args,Â by_row]) Invoke function on values of Series. argmax ([axis,Â skipna]) Return int position of the largest value in the Series. argmin ([axis,Â skipna]) Return int position of the smallest value in the Series. argsort ([axis,Â kind,Â order,Â stable]) Return the integer indices that would sort the Series values. asfreq (freq[,Â method,Â how,Â normalize,Â ...]) Convert time series to specified frequency. asof (where[,Â subset]) Return the last row(s) without any NaNs before where . astype (dtype[,Â copy,Â errors]) Cast a pandas object to a specified dtype dtype . at_time (time[,Â asof,Â axis]) Select values at particular time of day (e.g., 9:30AM). autocorr ([lag]) Compute the lag-N autocorrelation. backfill (*[,Â axis,Â inplace,Â limit,Â downcast]) (DEPRECATED) Fill NA/NaN values by using the next valid observation to fill the gap. between (left,Â right[,Â inclusive]) Return boolean Series equivalent to left <= series <= right. between_time (start_time,Â end_time[,Â ...]) Select values between particular times of the day (e.g., 9:00-9:30 AM). bfill (*[,Â axis,Â inplace,Â limit,Â limit_area,Â ...]) Fill NA/NaN values by using the next valid observation to fill the gap. bool () (DEPRECATED) Return the bool of a single element Series or DataFrame. case_when (caselist) Replace values where the conditions are True. clip ([lower,Â upper,Â axis,Â inplace]) Trim values at input threshold(s). combine (other,Â func[,Â fill_value]) Combine the Series with a Series or scalar according to func . combine_first (other) Update null elements with value in the same location in 'other'. compare (other[,Â align_axis,Â keep_shape,Â ...]) Compare to another Series and show the differences. convert_dtypes ([infer_objects,Â ...]) Convert columns to the best possible dtypes using dtypes supporting pd.NA . copy ([deep]) Make a copy of this object's indices and data. corr (other[,Â method,Â min_periods]) Compute correlation with other Series, excluding missing values. count () Return number of non-NA/null observations in the Series. cov (other[,Â min_periods,Â ddof]) Compute covariance with Series, excluding missing values. cummax ([axis,Â skipna]) Return cumulative maximum over a DataFrame or Series axis. cummin ([axis,Â skipna]) Return cumulative minimum over a DataFrame or Series axis. cumprod ([axis,Â skipna]) Return cumulative product over a DataFrame or Series axis. cumsum ([axis,Â skipna]) Return cumulative sum over a DataFrame or Series axis. describe ([percentiles,Â include,Â exclude]) Generate descriptive statistics. diff ([periods]) First discrete difference of element. div (other[,Â level,Â fill_value,Â axis]) Return Floating division of series and other, element-wise (binary operator truediv ). divide (other[,Â level,Â fill_value,Â axis]) Return Floating division of series and other, element-wise (binary operator truediv ). divmod (other[,Â level,Â fill_value,Â axis]) Return Integer division and modulo of series and other, element-wise (binary operator divmod ). dot (other) Compute the dot product between the Series and the columns of other. drop ([labels,Â axis,Â index,Â columns,Â level,Â ...]) Return Series with specified index labels removed. drop_duplicates (*[,Â keep,Â inplace,Â ignore_index]) Return Series with duplicate values removed. droplevel (level[,Â axis]) Return Series/DataFrame with requested index / column level(s) removed. dropna (*[,Â axis,Â inplace,Â how,Â ignore_index]) Return a new Series with missing values removed. duplicated ([keep]) Indicate duplicate Series values. eq (other[,Â level,Â fill_value,Â axis]) Return Equal to of series and other, element-wise (binary operator eq ). equals (other) Test whether two objects contain the same elements. ewm ([com,Â span,Â halflife,Â alpha,Â ...]) Provide exponentially weighted (EW) calculations. expanding ([min_periods,Â axis,Â method]) Provide expanding window calculations. explode ([ignore_index]) Transform each element of a list-like to a row. factorize ([sort,Â use_na_sentinel]) Encode the object as an enumerated type or categorical variable. ffill (*[,Â axis,Â inplace,Â limit,Â limit_area,Â ...]) Fill NA/NaN values by propagating the last valid observation to next valid. fillna ([value,Â method,Â axis,Â inplace,Â ...]) Fill NA/NaN values using the specified method. filter ([items,Â like,Â regex,Â axis]) Subset the dataframe rows or columns according to the specified index labels. first (offset) (DEPRECATED) Select initial periods of time series data based on a date offset. first_valid_index () Return index for first non-NA value or None, if no non-NA value is found. floordiv (other[,Â level,Â fill_value,Â axis]) Return Integer division of series and other, element-wise (binary operator floordiv ). ge (other[,Â level,Â fill_value,Â axis]) Return Greater than or equal to of series and other, element-wise (binary operator ge ). get (key[,Â default]) Get item from object for given key (ex: DataFrame column). groupby ([by,Â axis,Â level,Â as_index,Â sort,Â ...]) Group Series using a mapper or by a Series of columns. gt (other[,Â level,Â fill_value,Â axis]) Return Greater than of series and other, element-wise (binary operator gt ). head ([n]) Return the first n rows. hist ([by,Â ax,Â grid,Â xlabelsize,Â xrot,Â ...]) Draw histogram of the input series using matplotlib. idxmax ([axis,Â skipna]) Return the row label of the maximum value. idxmin ([axis,Â skipna]) Return the row label of the minimum value. infer_objects ([copy]) Attempt to infer better dtypes for object columns. info ([verbose,Â buf,Â max_cols,Â memory_usage,Â ...]) Print a concise summary of a Series. interpolate ([method,Â axis,Â limit,Â inplace,Â ...]) Fill NaN values using an interpolation method. isin (values) Whether elements in Series are contained in values . isna () Detect missing values. isnull () Series.isnull is an alias for Series.isna. item () Return the first element of the underlying data as a Python scalar. items () Lazily iterate over (index, value) tuples. keys () Return alias for index. kurt ([axis,Â skipna,Â numeric_only]) Return unbiased kurtosis over requested axis. kurtosis ([axis,Â skipna,Â numeric_only]) Return unbiased kurtosis over requested axis. last (offset) (DEPRECATED) Select final periods of time series data based on a date offset. last_valid_index () Return index for last non-NA value or None, if no non-NA value is found. le (other[,Â level,Â fill_value,Â axis]) Return Less than or equal to of series and other, element-wise (binary operator le ). lt (other[,Â level,Â fill_value,Â axis]) Return Less than of series and other, element-wise (binary operator lt ). map (arg[,Â na_action]) Map values of Series according to an input mapping or function. mask (cond[,Â other,Â inplace,Â axis,Â level]) Replace values where the condition is True. max ([axis,Â skipna,Â numeric_only]) Return the maximum of the values over the requested axis. mean ([axis,Â skipna,Â numeric_only]) Return the mean of the values over the requested axis. median ([axis,Â skipna,Â numeric_only]) Return the median of the values over the requested axis. memory_usage ([index,Â deep]) Return the memory usage of the Series. min ([axis,Â skipna,Â numeric_only]) Return the minimum of the values over the requested axis. mod (other[,Â level,Â fill_value,Â axis]) Return Modulo of series and other, element-wise (binary operator mod ). mode ([dropna]) Return the mode(s) of the Series. mul (other[,Â level,Â fill_value,Â axis]) Return Multiplication of series and other, element-wise (binary operator mul ). multiply (other[,Â level,Â fill_value,Â axis]) Return Multiplication of series and other, element-wise (binary operator mul ). ne (other[,Â level,Â fill_value,Â axis]) Return Not equal to of series and other, element-wise (binary operator ne ). nlargest ([n,Â keep]) Return the largest n elements. notna () Detect existing (non-missing) values. notnull () Series.notnull is an alias for Series.notna. nsmallest ([n,Â keep]) Return the smallest n elements. nunique ([dropna]) Return number of unique elements in the object. pad (*[,Â axis,Â inplace,Â limit,Â downcast]) (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to next valid. pct_change ([periods,Â fill_method,Â limit,Â freq]) Fractional change between the current and a prior element. pipe (func,Â *args,Â **kwargs) Apply chainable functions that expect Series or DataFrames. pop (item) Return item and drops from series. pow (other[,Â level,Â fill_value,Â axis]) Return Exponential power of series and other, element-wise (binary operator pow ). prod ([axis,Â skipna,Â numeric_only,Â min_count]) Return the product of the values over the requested axis. product ([axis,Â skipna,Â numeric_only,Â min_count]) Return the product of the values over the requested axis. quantile ([q,Â interpolation]) Return value at the given quantile. radd (other[,Â level,Â fill_value,Â axis]) Return Addition of series and other, element-wise (binary operator radd ). rank ([axis,Â method,Â numeric_only,Â ...]) Compute numerical data ranks (1 through n) along axis. ravel ([order]) (DEPRECATED) Return the flattened underlying data as an ndarray or ExtensionArray. rdiv (other[,Â level,Â fill_value,Â axis]) Return Floating division of series and other, element-wise (binary operator rtruediv ). rdivmod (other[,Â level,Â fill_value,Â axis]) Return Integer division and modulo of series and other, element-wise (binary operator rdivmod ). reindex ([index,Â axis,Â method,Â copy,Â level,Â ...]) Conform Series to new index with optional filling logic. reindex_like (other[,Â method,Â copy,Â limit,Â ...]) Return an object with matching indices as other object. rename ([index,Â axis,Â copy,Â inplace,Â level,Â ...]) Alter Series index labels or name. rename_axis ([mapper,Â index,Â axis,Â copy,Â inplace]) Set the name of the axis for the index or columns. reorder_levels (order) Rearrange index levels using input order. repeat (repeats[,Â axis]) Repeat elements of a Series. replace ([to_replace,Â value,Â inplace,Â limit,Â ...]) Replace values given in to_replace with value . resample (rule[,Â axis,Â closed,Â label,Â ...]) Resample time-series data. reset_index ([level,Â drop,Â name,Â inplace,Â ...]) Generate a new DataFrame or Series with the index reset. rfloordiv (other[,Â level,Â fill_value,Â axis]) Return Integer division of series and other, element-wise (binary operator rfloordiv ). rmod (other[,Â level,Â fill_value,Â axis]) Return Modulo of series and other, element-wise (binary operator rmod ). rmul (other[,Â level,Â fill_value,Â axis]) Return Multiplication of series and other, element-wise (binary operator rmul ). rolling (window[,Â min_periods,Â center,Â ...]) Provide rolling window calculations. round ([decimals]) Round each value in a Series to the given number of decimals. rpow (other[,Â level,Â fill_value,Â axis]) Return Exponential power of series and other, element-wise (binary operator rpow ). rsub (other[,Â level,Â fill_value,Â axis]) Return Subtraction of series and other, element-wise (binary operator rsub ). rtruediv (other[,Â level,Â fill_value,Â axis]) Return Floating division of series and other, element-wise (binary operator rtruediv ). sample ([n,Â frac,Â replace,Â weights,Â ...]) Return a random sample of items from an axis of object. searchsorted (value[,Â side,Â sorter]) Find indices where elements should be inserted to maintain order. sem ([axis,Â skipna,Â ddof,Â numeric_only]) Return unbiased standard error of the mean over requested axis. set_axis (labels,Â *[,Â axis,Â copy]) Assign desired index to given axis. set_flags (*[,Â copy,Â allows_duplicate_labels]) Return a new object with updated flags. shift ([periods,Â freq,Â axis,Â fill_value,Â suffix]) Shift index by desired number of periods with an optional time freq . skew ([axis,Â skipna,Â numeric_only]) Return unbiased skew over requested axis. sort_index (*[,Â axis,Â level,Â ascending,Â ...]) Sort Series by index labels. sort_values (*[,Â axis,Â ascending,Â inplace,Â ...]) Sort by the values. squeeze ([axis]) Squeeze 1 dimensional axis objects into scalars. std ([axis,Â skipna,Â ddof,Â numeric_only]) Return sample standard deviation over requested axis. sub (other[,Â level,Â fill_value,Â axis]) Return Subtraction of series and other, element-wise (binary operator sub ). subtract (other[,Â level,Â fill_value,Â axis]) Return Subtraction of series and other, element-wise (binary operator sub ). sum ([axis,Â skipna,Â numeric_only,Â min_count]) Return the sum of the values over the requested axis. swapaxes (axis1,Â axis2[,Â copy]) (DEPRECATED) Interchange axes and swap values axes appropriately. swaplevel ([i,Â j,Â copy]) Swap levels i and j in a MultiIndex . tail ([n]) Return the last n rows. take (indices[,Â axis]) Return the elements in the given positional indices along an axis. to_clipboard (*[,Â excel,Â sep]) Copy object to the system clipboard. to_csv ([path_or_buf,Â sep,Â na_rep,Â ...]) Write object to a comma-separated values (csv) file. to_dict (*[,Â into]) Convert Series to {label -> value} dict or dict-like object. to_excel (excel_writer,Â *[,Â sheet_name,Â ...]) Write object to an Excel sheet. to_frame ([name]) Convert Series to DataFrame. to_hdf (path_or_buf,Â *,Â key[,Â mode,Â ...]) Write the contained data to an HDF5 file using HDFStore. to_json ([path_or_buf,Â orient,Â date_format,Â ...]) Convert the object to a JSON string. to_latex ([buf,Â columns,Â header,Â index,Â ...]) Render object to a LaTeX tabular, longtable, or nested table. to_list () Return a list of the values. to_markdown ([buf,Â mode,Â index,Â storage_options]) Print Series in Markdown-friendly format. to_numpy ([dtype,Â copy,Â na_value]) A NumPy ndarray representing the values in this Series or Index. to_period ([freq,Â copy]) Convert Series from DatetimeIndex to PeriodIndex. to_pickle (path,Â *[,Â compression,Â protocol,Â ...]) Pickle (serialize) object to file. to_sql (name,Â con,Â *[,Â schema,Â if_exists,Â ...]) Write records stored in a DataFrame to a SQL database. to_string ([buf,Â na_rep,Â float_format,Â ...]) Render a string representation of the Series. to_timestamp ([freq,Â how,Â copy]) Cast to DatetimeIndex of Timestamps, at beginning of period. to_xarray () Return an xarray object from the pandas object. tolist () Return a list of the values. transform (func[,Â axis]) Call func on self producing a Series with the same axis shape as self. transpose (*args,Â **kwargs) Return the transpose, which is by definition self. truediv (other[,Â level,Â fill_value,Â axis]) Return Floating division of series and other, element-wise (binary operator truediv ). truncate ([before,Â after,Â axis,Â copy]) Truncate a Series or DataFrame before and after some index value. tz_convert (tz[,Â axis,Â level,Â copy]) Convert tz-aware axis to target time zone. tz_localize (tz[,Â axis,Â level,Â copy,Â ...]) Localize tz-naive index of a Series or DataFrame to target time zone. unique () Return unique values of Series object. unstack ([level,Â fill_value,Â sort]) Unstack, also known as pivot, Series with MultiIndex to produce DataFrame. update (other) Modify Series in place using values from passed Series. value_counts ([normalize,Â sort,Â ascending,Â ...]) Return a Series containing counts of unique values. var ([axis,Â skipna,Â ddof,Â numeric_only]) Return unbiased variance over requested axis. view ([dtype]) (DEPRECATED) Create a new view of the Series. where (cond[,Â other,Â inplace,Â axis,Â level]) Replace values where the condition is False. xs (key[,Â axis,Â level,Â drop_level]) Return cross-section from the Series/DataFrame.


Page: https://github.com/pandas-dev/pandas/issues/57276



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
pandas.DataFrame.loc # property DataFrame. loc [source] # Access a group of rows and columns by label(s) or a boolean array. .loc[] is primarily label based, but may also be used with a
boolean array. Allowed inputs are: A single label, e.g. 5 or 'a' , (note that 5 is
interpreted as a label of the index, and never as an
integer position along the index). A list or array of labels, e.g. ['a', 'b', 'c'] . A slice object with labels, e.g. 'a':'f' . Warning Note that contrary to usual python slices, both the
start and the stop are included A boolean array of the same length as the axis being sliced,
e.g. [True, False, True] . An alignable boolean Series. The index of the key will be aligned before
masking. An alignable Index. The Index of the returned selection will be the input. A callable function with one argument (the calling Series or
DataFrame) and that returns valid output for indexing (one of the above) See more at Selection by Label . Raises : KeyError If any items are not found. IndexingError If an indexed key is passed and its index is unalignable to the frame index. See also DataFrame.at Access a single value for a row/column label pair. DataFrame.iloc Access group of rows and columns by integer position(s). DataFrame.xs Returns a cross-section (row(s) or column(s)) from the Series/DataFrame. Series.loc Access group of values using labels. Examples Getting values >>> df = pd . DataFrame ([[ 1 , 2 ], [ 4 , 5 ], [ 7 , 8 ]], ... index = [ 'cobra' , 'viper' , 'sidewinder' ], ... columns = [ 'max_speed' , 'shield' ]) >>> df max_speed  shield cobra               1       2 viper               4       5 sidewinder          7       8 Single label. Note this returns the row as a Series. >>> df . loc [ 'viper' ] max_speed    4 shield       5 Name: viper, dtype: int64 List of labels. Note using [[]] returns a DataFrame. >>> df . loc [[ 'viper' , 'sidewinder' ]] max_speed  shield viper               4       5 sidewinder          7       8 Single label for row and column >>> df . loc [ 'cobra' , 'shield' ] 2 Slice with labels for row and single label for column. As mentioned
above, note that both the start and stop of the slice are included. >>> df . loc [ 'cobra' : 'viper' , 'max_speed' ] cobra    1 viper    4 Name: max_speed, dtype: int64 Boolean list with the same length as the row axis >>> df . loc [[ False , False , True ]] max_speed  shield sidewinder          7       8 Alignable boolean Series: >>> df . loc [ pd . Series ([ False , True , False ], ... index = [ 'viper' , 'sidewinder' , 'cobra' ])] max_speed  shield sidewinder          7       8 Index (same behavior as df.reindex ) >>> df . loc [ pd . Index ([ "cobra" , "viper" ], name = "foo" )] max_speed  shield foo cobra          1       2 viper          4       5 Conditional that returns a boolean Series >>> df . loc [ df [ 'shield' ] > 6 ] max_speed  shield sidewinder          7       8 Conditional that returns a boolean Series with column labels specified >>> df . loc [ df [ 'shield' ] > 6 , [ 'max_speed' ]] max_speed sidewinder          7 Multiple conditional using & that returns a boolean Series >>> df . loc [( df [ 'max_speed' ] > 1 ) & ( df [ 'shield' ] < 8 )] max_speed  shield viper          4       5 Multiple conditional using | that returns a boolean Series >>> df . loc [( df [ 'max_speed' ] > 4 ) | ( df [ 'shield' ] < 5 )] max_speed  shield cobra               1       2 sidewinder          7       8 Please ensure that each condition is wrapped in parentheses () .
See the user guide for more details and explanations of Boolean indexing. Note If you find yourself using 3 or more conditionals in .loc[] ,
consider using advanced indexing . See below for using .loc[] on MultiIndex DataFrames. Callable that returns a boolean Series >>> df . loc [ lambda df : df [ 'shield' ] == 8 ] max_speed  shield sidewinder          7       8 Setting values Set value for all items matching the list of labels >>> df . loc [[ 'viper' , 'sidewinder' ], [ 'shield' ]] = 50 >>> df max_speed  shield cobra               1       2 viper               4      50 sidewinder          7      50 Set value for an entire row >>> df . loc [ 'cobra' ] = 10 >>> df max_speed  shield cobra              10      10 viper               4      50 sidewinder          7      50 Set value for an entire column >>> df . loc [:, 'max_speed' ] = 30 >>> df max_speed  shield cobra              30      10 viper              30      50 sidewinder         30      50 Set value for rows matching callable condition >>> df . loc [ df [ 'shield' ] > 35 ] = 0 >>> df max_speed  shield cobra              30      10 viper               0       0 sidewinder          0       0 Add value matching location >>> df . loc [ "viper" , "shield" ] += 5 >>> df max_speed  shield cobra              30      10 viper               0       5 sidewinder          0       0 Setting using a Series or a DataFrame sets the values matching the
index labels, not the index positions. >>> shuffled_df = df . loc [[ "viper" , "cobra" , "sidewinder" ]] >>> df . loc [:] += shuffled_df >>> df max_speed  shield cobra              60      20 viper               0      10 sidewinder          0       0 Getting values on a DataFrame with an index that has integer labels Another example using integers for the index >>> df = pd . DataFrame ([[ 1 , 2 ], [ 4 , 5 ], [ 7 , 8 ]], ... index = [ 7 , 8 , 9 ], columns = [ 'max_speed' , 'shield' ]) >>> df max_speed  shield 7          1       2 8          4       5 9          7       8 Slice with integer labels for rows. As mentioned above, note that both
the start and stop of the slice are included. >>> df . loc [ 7 : 9 ] max_speed  shield 7          1       2 8          4       5 9          7       8 Getting values with a MultiIndex A number of examples using a DataFrame with a MultiIndex >>> tuples = [ ... ( 'cobra' , 'mark i' ), ( 'cobra' , 'mark ii' ), ... ( 'sidewinder' , 'mark i' ), ( 'sidewinder' , 'mark ii' ), ... ( 'viper' , 'mark ii' ), ( 'viper' , 'mark iii' ) ... ] >>> index = pd . MultiIndex . from_tuples ( tuples ) >>> values = [[ 12 , 2 ], [ 0 , 4 ], [ 10 , 20 ], ... [ 1 , 4 ], [ 7 , 1 ], [ 16 , 36 ]] >>> df = pd . DataFrame ( values , columns = [ 'max_speed' , 'shield' ], index = index ) >>> df max_speed  shield cobra      mark i           12       2 mark ii           0       4 sidewinder mark i           10      20 mark ii           1       4 viper      mark ii           7       1 mark iii         16      36 Single label. Note this returns a DataFrame with a single index. >>> df . loc [ 'cobra' ] max_speed  shield mark i          12       2 mark ii          0       4 Single index tuple. Note this returns a Series. >>> df . loc [( 'cobra' , 'mark ii' )] max_speed    0 shield       4 Name: (cobra, mark ii), dtype: int64 Single label for row and column. Similar to passing in a tuple, this
returns a Series. >>> df . loc [ 'cobra' , 'mark i' ] max_speed    12 shield        2 Name: (cobra, mark i), dtype: int64 Single tuple. Note using [[]] returns a DataFrame. >>> df . loc [[( 'cobra' , 'mark ii' )]] max_speed  shield cobra mark ii          0       4 Single tuple for the index with a single label for the column >>> df . loc [( 'cobra' , 'mark i' ), 'shield' ] 2 Slice from index tuple to single label >>> df . loc [( 'cobra' , 'mark i' ): 'viper' ] max_speed  shield cobra      mark i           12       2 mark ii           0       4 sidewinder mark i           10      20 mark ii           1       4 viper      mark ii           7       1 mark iii         16      36 Slice from index tuple to index tuple >>> df . loc [( 'cobra' , 'mark i' ):( 'viper' , 'mark ii' )] max_speed  shield cobra      mark i          12       2 mark ii          0       4 sidewinder mark i          10      20 mark ii          1       4 viper      mark ii          7       1 Please see the user guide for more details and explanations of advanced indexing.


Page: https://github.com/pandas-dev/pandas/issues/57027



Page: https://pandas.pydata.org/pdeps/0006-ban-upcasting.html



Page: https://github.com/pandas-dev/pandas/issues/56503



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
pandas.DataFrame.map # DataFrame. map ( func , na_action = None , ** kwargs ) [source] # Apply a function to a Dataframe elementwise. Added in version 2.1.0: DataFrame.applymap was deprecated and renamed to DataFrame.map. This method applies a function that accepts and returns a scalar
to every element of a DataFrame. Parameters : func callable Python function, returns a single value from a single value. na_action {None, âignoreâ}, default None If âignoreâ, propagate NaN values, without passing them to func. **kwargs Additional keyword arguments to pass as keywords arguments to func . Returns : DataFrame Transformed DataFrame. See also DataFrame.apply Apply a function along input axis of DataFrame. DataFrame.replace Replace values given in to_replace with value . Series.map Apply a function elementwise on a Series. Examples >>> df = pd . DataFrame ([[ 1 , 2.12 ], [ 3.356 , 4.567 ]]) >>> df 0      1 0  1.000  2.120 1  3.356  4.567 >>> df . map ( lambda x : len ( str ( x ))) 0  1 0  3  4 1  5  5 Like Series.map, NA values can be ignored: >>> df_copy = df . copy () >>> df_copy . iloc [ 0 , 0 ] = pd . NA >>> df_copy . map ( lambda x : len ( str ( x )), na_action = 'ignore' ) 0  1 0  NaN  4 1  5.0  5 It is also possible to use map with functions that are not lambda functions: >>> df . map ( round , ndigits = 1 ) 0    1 0  1.0  2.1 1  3.4  4.6 Note that a vectorized version of func often exists, which will
be much faster. You could square each number elementwise. >>> df . map ( lambda x : x ** 2 ) 0          1 0   1.000000   4.494400 1  11.262736  20.857489 But itâs better to avoid map in that case. >>> df ** 2 0          1 0   1.000000   4.494400 1  11.262736  20.857489


Page: https://github.com/pandas-dev/pandas/issues/57316



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
pandas.DataFrame.merge # DataFrame. merge ( right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = False , suffixes = ('_x', '_y') , copy = None , indicator = False , validate = None ) [source] # Merge DataFrame or named Series objects with a database-style join. A named Series object is treated as a DataFrame with a single named column. The join is done on columns or indexes. If joining columns on
columns, the DataFrame indexes will be ignored . Otherwise if joining indexes
on indexes or indexes on a column or columns, the index will be passed on.
When performing a cross merge, no column specifications to merge on are
allowed. Warning If both key columns contain rows where the key is a null value, those
rows will be matched against each other. This is different from usual SQL
join behaviour and can lead to unexpected results. Parameters : right DataFrame or named Series Object to merge with. how {âleftâ, ârightâ, âouterâ, âinnerâ, âcrossâ}, default âinnerâ Type of merge to be performed. left: use only keys from left frame, similar to a SQL left outer join;
preserve key order. right: use only keys from right frame, similar to a SQL right outer join;
preserve key order. outer: use union of keys from both frames, similar to a SQL full outer
join; sort keys lexicographically. inner: use intersection of keys from both frames, similar to a SQL inner
join; preserve the order of the left keys. cross: creates the cartesian product from both frames, preserves the order
of the left keys. on label or list Column or index level names to join on. These must be found in both
DataFrames. If on is None and not merging on indexes then this defaults
to the intersection of the columns in both DataFrames. left_on label or list, or array-like Column or index level names to join on in the left DataFrame. Can also
be an array or list of arrays of the length of the left DataFrame.
These arrays are treated as if they are columns. right_on label or list, or array-like Column or index level names to join on in the right DataFrame. Can also
be an array or list of arrays of the length of the right DataFrame.
These arrays are treated as if they are columns. left_index bool, default False Use the index from the left DataFrame as the join key(s). If it is a
MultiIndex, the number of keys in the other DataFrame (either the index
or a number of columns) must match the number of levels. right_index bool, default False Use the index from the right DataFrame as the join key. Same caveats as
left_index. sort bool, default False Sort the join keys lexicographically in the result DataFrame. If False,
the order of the join keys depends on the join type (how keyword). suffixes list-like, default is (â_xâ, â_yâ) A length-2 sequence where each element is optionally a string
indicating the suffix to add to overlapping column names in left and right respectively. Pass a value of None instead
of a string to indicate that the column name from left or right should be left as-is, with no suffix. At least one of the
values must not be None. copy bool, default True If False, avoid copy if possible. Note The copy keyword will change behavior in pandas 3.0. Copy-on-Write will be enabled by default, which means that all methods with a copy keyword will use a lazy copy mechanism to defer the copy and
ignore the copy keyword. The copy keyword will be removed in a
future version of pandas. You can already get the future behavior and improvements through
enabling copy on write pd.options.mode.copy_on_write = True indicator bool or str, default False If True, adds a column to the output DataFrame called â_mergeâ with
information on the source of each row. The column can be given a different
name by providing a string argument. The column will have a Categorical
type with the value of âleft_onlyâ for observations whose merge key only
appears in the left DataFrame, âright_onlyâ for observations
whose merge key only appears in the right DataFrame, and âbothâ
if the observationâs merge key is found in both DataFrames. validate str, optional If specified, checks if merge is of specified type. âone_to_oneâ or â1:1â: check if merge keys are unique in both
left and right datasets. âone_to_manyâ or â1:mâ: check if merge keys are unique in left
dataset. âmany_to_oneâ or âm:1â: check if merge keys are unique in right
dataset. âmany_to_manyâ or âm:mâ: allowed, but does not result in checks. Returns : DataFrame A DataFrame of the two merged objects. See also merge_ordered Merge with optional filling/interpolation. merge_asof Merge on nearest keys. DataFrame.join Similar method using indices. Examples >>> df1 = pd . DataFrame ({ 'lkey' : [ 'foo' , 'bar' , 'baz' , 'foo' ], ... 'value' : [ 1 , 2 , 3 , 5 ]}) >>> df2 = pd . DataFrame ({ 'rkey' : [ 'foo' , 'bar' , 'baz' , 'foo' ], ... 'value' : [ 5 , 6 , 7 , 8 ]}) >>> df1 lkey value 0   foo      1 1   bar      2 2   baz      3 3   foo      5 >>> df2 rkey value 0   foo      5 1   bar      6 2   baz      7 3   foo      8 Merge df1 and df2 on the lkey and rkey columns. The value columns have
the default suffixes, _x and _y, appended. >>> df1 . merge ( df2 , left_on = 'lkey' , right_on = 'rkey' ) lkey  value_x rkey  value_y 0  foo        1  foo        5 1  foo        1  foo        8 2  bar        2  bar        6 3  baz        3  baz        7 4  foo        5  foo        5 5  foo        5  foo        8 Merge DataFrames df1 and df2 with specified left and right suffixes
appended to any overlapping columns. >>> df1 . merge ( df2 , left_on = 'lkey' , right_on = 'rkey' , ... suffixes = ( '_left' , '_right' )) lkey  value_left rkey  value_right 0  foo           1  foo            5 1  foo           1  foo            8 2  bar           2  bar            6 3  baz           3  baz            7 4  foo           5  foo            5 5  foo           5  foo            8 Merge DataFrames df1 and df2, but raise an exception if the DataFrames have
any overlapping columns. >>> df1 . merge ( df2 , left_on = 'lkey' , right_on = 'rkey' , suffixes = ( False , False )) Traceback (most recent call last): ... ValueError : columns overlap but no suffix specified: Index(['value'], dtype='object') >>> df1 = pd . DataFrame ({ 'a' : [ 'foo' , 'bar' ], 'b' : [ 1 , 2 ]}) >>> df2 = pd . DataFrame ({ 'a' : [ 'foo' , 'baz' ], 'c' : [ 3 , 4 ]}) >>> df1 a  b 0   foo  1 1   bar  2 >>> df2 a  c 0   foo  3 1   baz  4 >>> df1 . merge ( df2 , how = 'inner' , on = 'a' ) a  b  c 0   foo  1  3 >>> df1 . merge ( df2 , how = 'left' , on = 'a' ) a  b  c 0   foo  1  3.0 1   bar  2  NaN >>> df1 = pd . DataFrame ({ 'left' : [ 'foo' , 'bar' ]}) >>> df2 = pd . DataFrame ({ 'right' : [ 7 , 8 ]}) >>> df1 left 0   foo 1   bar >>> df2 right 0   7 1   8 >>> df1 . merge ( df2 , how = 'cross' ) left  right 0   foo      7 1   foo      8 2   bar      7 3   bar      8


Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
pandas.DataFrame.query # DataFrame. query ( expr , * , inplace = False , ** kwargs ) [source] # Query the columns of a DataFrame with a boolean expression. Parameters : expr str The query string to evaluate. You can refer to variables
in the environment by prefixing them with an â@â character like @a + b . You can refer to column names that are not valid Python variable names
by surrounding them in backticks. Thus, column names containing spaces
or punctuations (besides underscores) or starting with digits must be
surrounded by backticks. (For example, a column named âArea (cm^2)â would
be referenced as `Area (cm^2)` ). Column names which are Python keywords
(like âlistâ, âforâ, âimportâ, etc) cannot be used. For example, if one of your columns is called a a and you want
to sum it with b , your query should be `a a` + b . inplace bool Whether to modify the DataFrame rather than creating a new one. **kwargs See the documentation for eval() for complete details
on the keyword arguments accepted by DataFrame.query() . Returns : DataFrame or None DataFrame resulting from the provided query expression or
None if inplace=True . See also eval Evaluate a string describing operations on DataFrame columns. DataFrame.eval Evaluate a string describing operations on DataFrame columns. Notes The result of the evaluation of this expression is first passed to DataFrame.loc and if that fails because of a
multidimensional key (e.g., a DataFrame) then the result will be passed
to DataFrame.__getitem__() . This method uses the top-level eval() function to
evaluate the passed query. The query() method uses a slightly
modified Python syntax by default. For example, the & and | (bitwise) operators have the precedence of their boolean cousins, and and or . This is syntactically valid Python,
however the semantics are different. You can change the semantics of the expression by passing the keyword
argument parser='python' . This enforces the same semantics as
evaluation in Python space. Likewise, you can pass engine='python' to evaluate an expression using Python itself as a backend. This is not
recommended as it is inefficient compared to using numexpr as the
engine. The DataFrame.index and DataFrame.columns attributes of the DataFrame instance are placed in the query namespace
by default, which allows you to treat both the index and columns of the
frame as a column in the frame.
The identifier index is used for the frame index; you can also
use the name of the index to identify it in a query. Please note that
Python keywords may not be used as identifiers. For further details and examples see the query documentation in indexing . Backtick quoted variables Backtick quoted variables are parsed as literal Python code and
are converted internally to a Python valid identifier.
This can lead to the following problems. During parsing a number of disallowed characters inside the backtick
quoted string are replaced by strings that are allowed as a Python identifier.
These characters include all operators in Python, the space character, the
question mark, the exclamation mark, the dollar sign, and the euro sign.
For other characters that fall outside the ASCII range (U+0001..U+007F)
and those that are not further specified in PEP 3131,
the query parser will raise an error.
This excludes whitespace different than the space character,
but also the hashtag (as it is used for comments) and the backtick
itself (backtick can also not be escaped). In a special case, quotes that make a pair around a backtick can
confuse the parser.
For example, `it's` > `that's` will raise an error,
as it forms a quoted string ( 's > `that' ) with a backtick inside. See also the Python documentation about lexical analysis
( https://docs.python.org/3/reference/lexical_analysis.html )
in combination with the source code in pandas.core.computation.parsing . Examples >>> df = pd . DataFrame ({ 'A' : range ( 1 , 6 ), ... 'B' : range ( 10 , 0 , - 2 ), ... 'C C' : range ( 10 , 5 , - 1 )}) >>> df A   B  C C 0  1  10   10 1  2   8    9 2  3   6    8 3  4   4    7 4  5   2    6 >>> df . query ( 'A > B' ) A  B  C C 4  5  2    6 The previous expression is equivalent to >>> df [ df . A > df . B ] A  B  C C 4  5  2    6 For columns with spaces in their name, you can use backtick quoting. >>> df . query ( 'B == `C C`' ) A   B  C C 0  1  10   10 The previous expression is equivalent to >>> df [ df . B == df [ 'C C' ]] A   B  C C 0  1  10   10


Page: https://github.com/pandas-dev/pandas/issues/57068



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
pandas.DataFrame.shift # DataFrame. shift ( periods=1 , freq=None , axis=0 , fill_value=<no_default> , suffix=None ) [source] # Shift index by desired number of periods with an optional time freq . When freq is not passed, shift the index without realigning the data.
If freq is passed (in this case, the index must be date or datetime,
or it will raise a NotImplementedError ), the index will be
increased using the periods and the freq . freq can be inferred
when specified as âinferâ as long as either freq or inferred_freq
attribute is set in the index. Parameters : periods int or Sequence Number of periods to shift. Can be positive or negative.
If an iterable of ints, the data will be shifted once by each int.
This is equivalent to shifting by one value at a time and
concatenating all resulting frames. The resulting columns will have
the shift suffixed to their column names. For multiple periods,
axis must not be 1. freq DateOffset, tseries.offsets, timedelta, or str, optional Offset to use from the tseries module or time rule (e.g. âEOMâ).
If freq is specified then the index values are shifted but the
data is not realigned. That is, use freq if you would like to
extend the index when shifting and preserve the original data.
If freq is specified as âinferâ then it will be inferred from
the freq or inferred_freq attributes of the index. If neither of
those attributes exist, a ValueError is thrown. axis {0 or âindexâ, 1 or âcolumnsâ, None}, default None Shift direction. For Series this parameter is unused and defaults to 0. fill_value object, optional The scalar value to use for newly introduced missing values.
the default depends on the dtype of self .
For numeric data, np.nan is used.
For datetime, timedelta, or period data, etc. NaT is used.
For extension dtypes, self.dtype.na_value is used. suffix str, optional If str and periods is an iterable, this is added after the column
name and before the shift value for each shifted column name. Returns : DataFrame Copy of input object, shifted. See also Index.shift Shift values of Index. DatetimeIndex.shift Shift values of DatetimeIndex. PeriodIndex.shift Shift values of PeriodIndex. Examples >>> df = pd . DataFrame ({ "Col1" : [ 10 , 20 , 15 , 30 , 45 ], ... "Col2" : [ 13 , 23 , 18 , 33 , 48 ], ... "Col3" : [ 17 , 27 , 22 , 37 , 52 ]}, ... index = pd . date_range ( "2020-01-01" , "2020-01-05" )) >>> df Col1  Col2  Col3 2020-01-01    10    13    17 2020-01-02    20    23    27 2020-01-03    15    18    22 2020-01-04    30    33    37 2020-01-05    45    48    52 >>> df . shift ( periods = 3 ) Col1  Col2  Col3 2020-01-01   NaN   NaN   NaN 2020-01-02   NaN   NaN   NaN 2020-01-03   NaN   NaN   NaN 2020-01-04  10.0  13.0  17.0 2020-01-05  20.0  23.0  27.0 >>> df . shift ( periods = 1 , axis = "columns" ) Col1  Col2  Col3 2020-01-01   NaN    10    13 2020-01-02   NaN    20    23 2020-01-03   NaN    15    18 2020-01-04   NaN    30    33 2020-01-05   NaN    45    48 >>> df . shift ( periods = 3 , fill_value = 0 ) Col1  Col2  Col3 2020-01-01     0     0     0 2020-01-02     0     0     0 2020-01-03     0     0     0 2020-01-04    10    13    17 2020-01-05    20    23    27 >>> df . shift ( periods = 3 , freq = "D" ) Col1  Col2  Col3 2020-01-04    10    13    17 2020-01-05    20    23    27 2020-01-06    15    18    22 2020-01-07    30    33    37 2020-01-08    45    48    52 >>> df . shift ( periods = 3 , freq = "infer" ) Col1  Col2  Col3 2020-01-04    10    13    17 2020-01-05    20    23    27 2020-01-06    15    18    22 2020-01-07    30    33    37 2020-01-08    45    48    52 >>> df [ 'Col1' ] . shift ( periods = [ 0 , 1 , 2 ]) Col1_0  Col1_1  Col1_2 2020-01-01      10     NaN     NaN 2020-01-02      20    10.0     NaN 2020-01-03      15    20.0    10.0 2020-01-04      30    15.0    20.0 2020-01-05      45    30.0    15.0


Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame
pandas.DataFrame # class pandas. DataFrame ( data = None , index = None , columns = None , dtype = None , copy = None ) [source] # Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns).
Arithmetic operations align on both row and column labels. Can be
thought of as a dict-like container for Series objects. The primary
pandas data structure. Parameters : data ndarray (structured or homogeneous), Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If
data is a dict, column order follows insertion-order. If a dict contains Series
which have an index defined, it is aligned by its index. This alignment also
occurs if data is a Series or a DataFrame itself. Alignment is done on
Series/DataFrame inputs. If data is a list of dicts, column order follows insertion-order. index Index or array-like Index to use for resulting frame. Will default to RangeIndex if
no indexing information part of input data and no index provided. columns Index or array-like Column labels to use for resulting frame when data does not have them,
defaulting to RangeIndex(0, 1, 2, â¦, n). If data contains column labels,
will perform column selection instead. dtype dtype, default None Data type to force. Only a single dtype is allowed. If None, infer. copy bool or None, default None Copy data from inputs.
For dict data, the default of None behaves like copy=True .  For DataFrame
or 2d ndarray input, the default of None behaves like copy=False .
If data is a dict containing one or more Series (possibly of different dtypes), copy=False will ensure that these inputs are not copied. Changed in version 1.3.0. See also DataFrame.from_records Constructor from tuples, also record arrays. DataFrame.from_dict From dicts of Series, arrays, or dicts. read_csv Read a comma-separated values (csv) file into DataFrame. read_table Read general delimited file into DataFrame. read_clipboard Read text from clipboard into DataFrame. Notes Please reference the User Guide for more information. Examples Constructing DataFrame from a dictionary. >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df col1  col2 0     1     3 1     2     4 Notice that the inferred dtype is int64. >>> df . dtypes col1    int64 col2    int64 dtype: object To enforce a single dtype: >>> df = pd . DataFrame ( data = d , dtype = np . int8 ) >>> df . dtypes col1    int8 col2    int8 dtype: object Constructing DataFrame from a dictionary including Series: >>> d = { 'col1' : [ 0 , 1 , 2 , 3 ], 'col2' : pd . Series ([ 2 , 3 ], index = [ 2 , 3 ])} >>> pd . DataFrame ( data = d , index = [ 0 , 1 , 2 , 3 ]) col1  col2 0     0   NaN 1     1   NaN 2     2   2.0 3     3   3.0 Constructing DataFrame from numpy ndarray: >>> df2 = pd . DataFrame ( np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]]), ... columns = [ 'a' , 'b' , 'c' ]) >>> df2 a  b  c 0  1  2  3 1  4  5  6 2  7  8  9 Constructing DataFrame from a numpy ndarray that has labeled columns: >>> data = np . array ([( 1 , 2 , 3 ), ( 4 , 5 , 6 ), ( 7 , 8 , 9 )], ... dtype = [( "a" , "i4" ), ( "b" , "i4" ), ( "c" , "i4" )]) >>> df3 = pd . DataFrame ( data , columns = [ 'c' , 'a' ]) ... >>> df3 c  a 0  3  1 1  6  4 2  9  7 Constructing DataFrame from dataclass: >>> from dataclasses import make_dataclass >>> Point = make_dataclass ( "Point" , [( "x" , int ), ( "y" , int )]) >>> pd . DataFrame ([ Point ( 0 , 0 ), Point ( 0 , 3 ), Point ( 2 , 3 )]) x  y 0  0  0 1  0  3 2  2  3 Constructing DataFrame from Series/DataFrame: >>> ser = pd . Series ([ 1 , 2 , 3 ], index = [ "a" , "b" , "c" ]) >>> df = pd . DataFrame ( data = ser , index = [ "a" , "c" ]) >>> df 0 a  1 c  3 >>> df1 = pd . DataFrame ([ 1 , 2 , 3 ], index = [ "a" , "b" , "c" ], columns = [ "x" ]) >>> df2 = pd . DataFrame ( data = df1 , index = [ "a" , "c" ]) >>> df2 x a  1 c  3 Attributes T The transpose of the DataFrame. at Access a single value for a row/column label pair. attrs Dictionary of global attributes of this dataset. axes Return a list representing the axes of the DataFrame. columns The column labels of the DataFrame. dtypes Return the dtypes in the DataFrame. empty Indicator whether Series/DataFrame is empty. flags Get the properties associated with this pandas object. iat Access a single value for a row/column pair by integer position. iloc (DEPRECATED) Purely integer-location based indexing for selection by position. index The index (row labels) of the DataFrame. loc Access a group of rows and columns by label(s) or a boolean array. ndim Return an int representing the number of axes / array dimensions. shape Return a tuple representing the dimensionality of the DataFrame. size Return an int representing the number of elements in this object. style Returns a Styler object. values Return a Numpy representation of the DataFrame. Methods abs () Return a Series/DataFrame with absolute numeric value of each element. add (other[,Â axis,Â level,Â fill_value]) Get Addition of dataframe and other, element-wise (binary operator add ). add_prefix (prefix[,Â axis]) Prefix labels with string prefix . add_suffix (suffix[,Â axis]) Suffix labels with string suffix . agg ([func,Â axis]) Aggregate using one or more operations over the specified axis. aggregate ([func,Â axis]) Aggregate using one or more operations over the specified axis. align (other[,Â join,Â axis,Â level,Â copy,Â ...]) Align two objects on their axes with the specified join method. all ([axis,Â bool_only,Â skipna]) Return whether all elements are True, potentially over an axis. any (*[,Â axis,Â bool_only,Â skipna]) Return whether any element is True, potentially over an axis. apply (func[,Â axis,Â raw,Â result_type,Â args,Â ...]) Apply a function along an axis of the DataFrame. applymap (func[,Â na_action]) (DEPRECATED) Apply a function to a Dataframe elementwise. asfreq (freq[,Â method,Â how,Â normalize,Â ...]) Convert time series to specified frequency. asof (where[,Â subset]) Return the last row(s) without any NaNs before where . assign (**kwargs) Assign new columns to a DataFrame. astype (dtype[,Â copy,Â errors]) Cast a pandas object to a specified dtype dtype . at_time (time[,Â asof,Â axis]) Select values at particular time of day (e.g., 9:30AM). backfill (*[,Â axis,Â inplace,Â limit,Â downcast]) (DEPRECATED) Fill NA/NaN values by using the next valid observation to fill the gap. between_time (start_time,Â end_time[,Â ...]) Select values between particular times of the day (e.g., 9:00-9:30 AM). bfill (*[,Â axis,Â inplace,Â limit,Â limit_area,Â ...]) Fill NA/NaN values by using the next valid observation to fill the gap. bool () (DEPRECATED) Return the bool of a single element Series or DataFrame. boxplot ([column,Â by,Â ax,Â fontsize,Â rot,Â ...]) Make a box plot from DataFrame columns. clip ([lower,Â upper,Â axis,Â inplace]) Trim values at input threshold(s). combine (other,Â func[,Â fill_value,Â overwrite]) Perform column-wise combine with another DataFrame. combine_first (other) Update null elements with value in the same location in other . compare (other[,Â align_axis,Â keep_shape,Â ...]) Compare to another DataFrame and show the differences. convert_dtypes ([infer_objects,Â ...]) Convert columns to the best possible dtypes using dtypes supporting pd.NA . copy ([deep]) Make a copy of this object's indices and data. corr ([method,Â min_periods,Â numeric_only]) Compute pairwise correlation of columns, excluding NA/null values. corrwith (other[,Â axis,Â drop,Â method,Â ...]) Compute pairwise correlation. count ([axis,Â numeric_only]) Count non-NA cells for each column or row. cov ([min_periods,Â ddof,Â numeric_only]) Compute pairwise covariance of columns, excluding NA/null values. cummax ([axis,Â skipna]) Return cumulative maximum over a DataFrame or Series axis. cummin ([axis,Â skipna]) Return cumulative minimum over a DataFrame or Series axis. cumprod ([axis,Â skipna]) Return cumulative product over a DataFrame or Series axis. cumsum ([axis,Â skipna]) Return cumulative sum over a DataFrame or Series axis. describe ([percentiles,Â include,Â exclude]) Generate descriptive statistics. diff ([periods,Â axis]) First discrete difference of element. div (other[,Â axis,Â level,Â fill_value]) Get Floating division of dataframe and other, element-wise (binary operator truediv ). divide (other[,Â axis,Â level,Â fill_value]) Get Floating division of dataframe and other, element-wise (binary operator truediv ). dot (other) Compute the matrix multiplication between the DataFrame and other. drop ([labels,Â axis,Â index,Â columns,Â level,Â ...]) Drop specified labels from rows or columns. drop_duplicates ([subset,Â keep,Â inplace,Â ...]) Return DataFrame with duplicate rows removed. droplevel (level[,Â axis]) Return Series/DataFrame with requested index / column level(s) removed. dropna (*[,Â axis,Â how,Â thresh,Â subset,Â ...]) Remove missing values. duplicated ([subset,Â keep]) Return boolean Series denoting duplicate rows. eq (other[,Â axis,Â level]) Get Equal to of dataframe and other, element-wise (binary operator eq ). equals (other) Test whether two objects contain the same elements. eval (expr,Â *[,Â inplace]) Evaluate a string describing operations on DataFrame columns. ewm ([com,Â span,Â halflife,Â alpha,Â ...]) Provide exponentially weighted (EW) calculations. expanding ([min_periods,Â axis,Â method]) Provide expanding window calculations. explode (column[,Â ignore_index]) Transform each element of a list-like to a row, replicating index values. ffill (*[,Â axis,Â inplace,Â limit,Â limit_area,Â ...]) Fill NA/NaN values by propagating the last valid observation to next valid. fillna ([value,Â method,Â axis,Â inplace,Â ...]) Fill NA/NaN values using the specified method. filter ([items,Â like,Â regex,Â axis]) Subset the dataframe rows or columns according to the specified index labels. first (offset) (DEPRECATED) Select initial periods of time series data based on a date offset. first_valid_index () Return index for first non-NA value or None, if no non-NA value is found. floordiv (other[,Â axis,Â level,Â fill_value]) Get Integer division of dataframe and other, element-wise (binary operator floordiv ). from_dict (data[,Â orient,Â dtype,Â columns]) Construct DataFrame from dict of array-like or dicts. from_records (data[,Â index,Â exclude,Â ...]) Convert structured or record ndarray to DataFrame. ge (other[,Â axis,Â level]) Get Greater than or equal to of dataframe and other, element-wise (binary operator ge ). get (key[,Â default]) Get item from object for given key (ex: DataFrame column). groupby ([by,Â axis,Â level,Â as_index,Â sort,Â ...]) Group DataFrame using a mapper or by a Series of columns. gt (other[,Â axis,Â level]) Get Greater than of dataframe and other, element-wise (binary operator gt ). head ([n]) Return the first n rows. hist ([column,Â by,Â grid,Â xlabelsize,Â xrot,Â ...]) Make a histogram of the DataFrame's columns. idxmax ([axis,Â skipna,Â numeric_only]) Return index of first occurrence of maximum over requested axis. idxmin ([axis,Â skipna,Â numeric_only]) Return index of first occurrence of minimum over requested axis. infer_objects ([copy]) Attempt to infer better dtypes for object columns. info ([verbose,Â buf,Â max_cols,Â memory_usage,Â ...]) Print a concise summary of a DataFrame. insert (loc,Â column,Â value[,Â allow_duplicates]) Insert column into DataFrame at specified location. interpolate ([method,Â axis,Â limit,Â inplace,Â ...]) Fill NaN values using an interpolation method. isetitem (loc,Â value) Set the given value in the column with position loc . isin (values) Whether each element in the DataFrame is contained in values. isna () Detect missing values. isnull () DataFrame.isnull is an alias for DataFrame.isna. items () Iterate over (column name, Series) pairs. iterrows () Iterate over DataFrame rows as (index, Series) pairs. itertuples ([index,Â name]) Iterate over DataFrame rows as namedtuples. join (other[,Â on,Â how,Â lsuffix,Â rsuffix,Â ...]) Join columns of another DataFrame. keys () Get the 'info axis' (see Indexing for more). kurt ([axis,Â skipna,Â numeric_only]) Return unbiased kurtosis over requested axis. kurtosis ([axis,Â skipna,Â numeric_only]) Return unbiased kurtosis over requested axis. last (offset) (DEPRECATED) Select final periods of time series data based on a date offset. last_valid_index () Return index for last non-NA value or None, if no non-NA value is found. le (other[,Â axis,Â level]) Get Less than or equal to of dataframe and other, element-wise (binary operator le ). lt (other[,Â axis,Â level]) Get Less than of dataframe and other, element-wise (binary operator lt ). map (func[,Â na_action]) Apply a function to a Dataframe elementwise. mask (cond[,Â other,Â inplace,Â axis,Â level]) Replace values where the condition is True. max ([axis,Â skipna,Â numeric_only]) Return the maximum of the values over the requested axis. mean ([axis,Â skipna,Â numeric_only]) Return the mean of the values over the requested axis. median ([axis,Â skipna,Â numeric_only]) Return the median of the values over the requested axis. melt ([id_vars,Â value_vars,Â var_name,Â ...]) Unpivot a DataFrame from wide to long format, optionally leaving identifiers set. memory_usage ([index,Â deep]) Return the memory usage of each column in bytes. merge (right[,Â how,Â on,Â left_on,Â right_on,Â ...]) Merge DataFrame or named Series objects with a database-style join. min ([axis,Â skipna,Â numeric_only]) Return the minimum of the values over the requested axis. mod (other[,Â axis,Â level,Â fill_value]) Get Modulo of dataframe and other, element-wise (binary operator mod ). mode ([axis,Â numeric_only,Â dropna]) Get the mode(s) of each element along the selected axis. mul (other[,Â axis,Â level,Â fill_value]) Get Multiplication of dataframe and other, element-wise (binary operator mul ). multiply (other[,Â axis,Â level,Â fill_value]) Get Multiplication of dataframe and other, element-wise (binary operator mul ). ne (other[,Â axis,Â level]) Get Not equal to of dataframe and other, element-wise (binary operator ne ). nlargest (n,Â columns[,Â keep]) Return the first n rows ordered by columns in descending order. notna () Detect existing (non-missing) values. notnull () DataFrame.notnull is an alias for DataFrame.notna. nsmallest (n,Â columns[,Â keep]) Return the first n rows ordered by columns in ascending order. nunique ([axis,Â dropna]) Count number of distinct elements in specified axis. pad (*[,Â axis,Â inplace,Â limit,Â downcast]) (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to next valid. pct_change ([periods,Â fill_method,Â limit,Â freq]) Fractional change between the current and a prior element. pipe (func,Â *args,Â **kwargs) Apply chainable functions that expect Series or DataFrames. pivot (*,Â columns[,Â index,Â values]) Return reshaped DataFrame organized by given index / column values. pivot_table ([values,Â index,Â columns,Â ...]) Create a spreadsheet-style pivot table as a DataFrame. pop (item) Return item and drop from frame. pow (other[,Â axis,Â level,Â fill_value]) Get Exponential power of dataframe and other, element-wise (binary operator pow ). prod ([axis,Â skipna,Â numeric_only,Â min_count]) Return the product of the values over the requested axis. product ([axis,Â skipna,Â numeric_only,Â min_count]) Return the product of the values over the requested axis. quantile ([q,Â axis,Â numeric_only,Â ...]) Return values at the given quantile over requested axis. query (expr,Â *[,Â inplace]) Query the columns of a DataFrame with a boolean expression. radd (other[,Â axis,Â level,Â fill_value]) Get Addition of dataframe and other, element-wise (binary operator radd ). rank ([axis,Â method,Â numeric_only,Â ...]) Compute numerical data ranks (1 through n) along axis. rdiv (other[,Â axis,Â level,Â fill_value]) Get Floating division of dataframe and other, element-wise (binary operator rtruediv ). reindex ([labels,Â index,Â columns,Â axis,Â ...]) Conform DataFrame to new index with optional filling logic. reindex_like (other[,Â method,Â copy,Â limit,Â ...]) Return an object with matching indices as other object. rename ([mapper,Â index,Â columns,Â axis,Â copy,Â ...]) Rename columns or index labels. rename_axis ([mapper,Â index,Â columns,Â axis,Â ...]) Set the name of the axis for the index or columns. reorder_levels (order[,Â axis]) Rearrange index levels using input order. replace ([to_replace,Â value,Â inplace,Â limit,Â ...]) Replace values given in to_replace with value . resample (rule[,Â axis,Â closed,Â label,Â ...]) Resample time-series data. reset_index ([level,Â drop,Â inplace,Â ...]) Reset the index, or a level of it. rfloordiv (other[,Â axis,Â level,Â fill_value]) Get Integer division of dataframe and other, element-wise (binary operator rfloordiv ). rmod (other[,Â axis,Â level,Â fill_value]) Get Modulo of dataframe and other, element-wise (binary operator rmod ). rmul (other[,Â axis,Â level,Â fill_value]) Get Multiplication of dataframe and other, element-wise (binary operator rmul ). rolling (window[,Â min_periods,Â center,Â ...]) Provide rolling window calculations. round ([decimals]) Round a DataFrame to a variable number of decimal places. rpow (other[,Â axis,Â level,Â fill_value]) Get Exponential power of dataframe and other, element-wise (binary operator rpow ). rsub (other[,Â axis,Â level,Â fill_value]) Get Subtraction of dataframe and other, element-wise (binary operator rsub ). rtruediv (other[,Â axis,Â level,Â fill_value]) Get Floating division of dataframe and other, element-wise (binary operator rtruediv ). sample ([n,Â frac,Â replace,Â weights,Â ...]) Return a random sample of items from an axis of object. select_dtypes ([include,Â exclude]) Return a subset of the DataFrame's columns based on the column dtypes. sem ([axis,Â skipna,Â ddof,Â numeric_only]) Return unbiased standard error of the mean over requested axis. set_axis (labels,Â *[,Â axis,Â copy]) Assign desired index to given axis. set_flags (*[,Â copy,Â allows_duplicate_labels]) Return a new object with updated flags. set_index (keys,Â *[,Â drop,Â append,Â inplace,Â ...]) Set the DataFrame index using existing columns. shift ([periods,Â freq,Â axis,Â fill_value,Â suffix]) Shift index by desired number of periods with an optional time freq . skew ([axis,Â skipna,Â numeric_only]) Return unbiased skew over requested axis. sort_index (*[,Â axis,Â level,Â ascending,Â ...]) Sort object by labels (along an axis). sort_values (by,Â *[,Â axis,Â ascending,Â ...]) Sort by the values along either axis. squeeze ([axis]) Squeeze 1 dimensional axis objects into scalars. stack ([level,Â dropna,Â sort,Â future_stack]) Stack the prescribed level(s) from columns to index. std ([axis,Â skipna,Â ddof,Â numeric_only]) Return sample standard deviation over requested axis. sub (other[,Â axis,Â level,Â fill_value]) Get Subtraction of dataframe and other, element-wise (binary operator sub ). subtract (other[,Â axis,Â level,Â fill_value]) Get Subtraction of dataframe and other, element-wise (binary operator sub ). sum ([axis,Â skipna,Â numeric_only,Â min_count]) Return the sum of the values over the requested axis. swapaxes (axis1,Â axis2[,Â copy]) (DEPRECATED) Interchange axes and swap values axes appropriately. swaplevel ([i,Â j,Â axis]) Swap levels i and j in a MultiIndex . tail ([n]) Return the last n rows. take (indices[,Â axis]) Return the elements in the given positional indices along an axis. to_clipboard (*[,Â excel,Â sep]) Copy object to the system clipboard. to_csv ([path_or_buf,Â sep,Â na_rep,Â ...]) Write object to a comma-separated values (csv) file. to_dict ([orient,Â into,Â index]) Convert the DataFrame to a dictionary. to_excel (excel_writer,Â *[,Â sheet_name,Â ...]) Write object to an Excel sheet. to_feather (path,Â **kwargs) Write a DataFrame to the binary Feather format. to_gbq (destination_table,Â *[,Â project_id,Â ...]) (DEPRECATED) Write a DataFrame to a Google BigQuery table. to_hdf (path_or_buf,Â *,Â key[,Â mode,Â ...]) Write the contained data to an HDF5 file using HDFStore. to_html ([buf,Â columns,Â col_space,Â header,Â ...]) Render a DataFrame as an HTML table. to_json ([path_or_buf,Â orient,Â date_format,Â ...]) Convert the object to a JSON string. to_latex ([buf,Â columns,Â header,Â index,Â ...]) Render object to a LaTeX tabular, longtable, or nested table. to_markdown ([buf,Â mode,Â index,Â storage_options]) Print DataFrame in Markdown-friendly format. to_numpy ([dtype,Â copy,Â na_value]) Convert the DataFrame to a NumPy array. to_orc ([path,Â engine,Â index,Â engine_kwargs]) Write a DataFrame to the ORC format. to_parquet ([path,Â engine,Â compression,Â ...]) Write a DataFrame to the binary parquet format. to_period ([freq,Â axis,Â copy]) Convert DataFrame from DatetimeIndex to PeriodIndex. to_pickle (path,Â *[,Â compression,Â protocol,Â ...]) Pickle (serialize) object to file. to_records ([index,Â column_dtypes,Â index_dtypes]) Convert DataFrame to a NumPy record array. to_sql (name,Â con,Â *[,Â schema,Â if_exists,Â ...]) Write records stored in a DataFrame to a SQL database. to_stata (path,Â *[,Â convert_dates,Â ...]) Export DataFrame object to Stata dta format. to_string ([buf,Â columns,Â col_space,Â header,Â ...]) Render a DataFrame to a console-friendly tabular output. to_timestamp ([freq,Â how,Â axis,Â copy]) Cast to DatetimeIndex of timestamps, at beginning of period. to_xarray () Return an xarray object from the pandas object. to_xml ([path_or_buffer,Â index,Â root_name,Â ...]) Render a DataFrame to an XML document. transform (func[,Â axis]) Call func on self producing a DataFrame with the same axis shape as self. transpose (*args[,Â copy]) Transpose index and columns. truediv (other[,Â axis,Â level,Â fill_value]) Get Floating division of dataframe and other, element-wise (binary operator truediv ). truncate ([before,Â after,Â axis,Â copy]) Truncate a Series or DataFrame before and after some index value. tz_convert (tz[,Â axis,Â level,Â copy]) Convert tz-aware axis to target time zone. tz_localize (tz[,Â axis,Â level,Â copy,Â ...]) Localize tz-naive index of a Series or DataFrame to target time zone. unstack ([level,Â fill_value,Â sort]) Pivot a level of the (necessarily hierarchical) index labels. update (other[,Â join,Â overwrite,Â ...]) Modify in place using non-NA values from another DataFrame. value_counts ([subset,Â normalize,Â sort,Â ...]) Return a Series containing the frequency of each distinct row in the Dataframe. var ([axis,Â skipna,Â ddof,Â numeric_only]) Return unbiased variance over requested axis. where (cond[,Â other,Â inplace,Â axis,Â level]) Replace values where the condition is False. xs (key[,Â axis,Â level,Â drop_level]) Return cross-section from the Series/DataFrame.


Page: https://github.com/pandas-dev/pandas/issues/57301



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
pandas.DataFrame.sort_index # DataFrame. sort_index ( * , axis = 0 , level = None , ascending = True , inplace = False , kind = 'quicksort' , na_position = 'last' , sort_remaining = True , ignore_index = False , key = None ) [source] # Sort object by labels (along an axis). Returns a new DataFrame sorted by label if inplace argument is False , otherwise updates the original DataFrame and returns None. Parameters : axis {0 or âindexâ, 1 or âcolumnsâ}, default 0 The axis along which to sort.  The value 0 identifies the rows,
and 1 identifies the columns. level int or level name or list of ints or list of level names If not None, sort on values in specified index level(s). ascending bool or list-like of bools, default True Sort ascending vs. descending. When the index is a MultiIndex the
sort direction can be controlled for each level individually. inplace bool, default False Whether to modify the DataFrame rather than creating a new one. kind {âquicksortâ, âmergesortâ, âheapsortâ, âstableâ}, default âquicksortâ Choice of sorting algorithm. See also numpy.sort() for more
information. mergesort and stable are the only stable algorithms. For
DataFrames, this option is only applied when sorting on a single
column or label. na_position {âfirstâ, âlastâ}, default âlastâ Puts NaNs at the beginning if first ; last puts NaNs at the end.
Not implemented for MultiIndex. sort_remaining bool, default True If True and sorting by level and index is multilevel, sort by other
levels too (in order) after sorting by specified level. ignore_index bool, default False If True, the resulting axis will be labeled 0, 1, â¦, n - 1. key callable, optional If not None, apply the key function to the index values
before sorting. This is similar to the key argument in the
builtin sorted() function, with the notable difference that
this key function should be vectorized . It should expect an Index and return an Index of the same shape. For MultiIndex
inputs, the key is applied per level . Returns : DataFrame or None The original DataFrame sorted by the labels or None if inplace=True . See also Series.sort_index Sort Series by the index. DataFrame.sort_values Sort DataFrame by the value. Series.sort_values Sort Series by the value. Examples >>> df = pd . DataFrame ([ 1 , 2 , 3 , 4 , 5 ], index = [ 100 , 29 , 234 , 1 , 150 ], ... columns = [ 'A' ]) >>> df . sort_index () A 1    4 29   2 100  1 150  5 234  3 By default, it sorts in ascending order, to sort in descending order,
use ascending=False >>> df . sort_index ( ascending = False ) A 234  3 150  5 100  1 29   2 1    4 A key function can be specified which is applied to the index before
sorting. For a MultiIndex this is applied to each level separately. >>> df = pd . DataFrame ({ "a" : [ 1 , 2 , 3 , 4 ]}, index = [ 'A' , 'b' , 'C' , 'd' ]) >>> df . sort_index ( key = lambda x : x . str . lower ()) a A  1 b  2 C  3 d  4


Page: https://github.com/pandas-dev/pandas/issues/57151



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
pandas.DataFrame.to_dict # DataFrame. to_dict ( orient='dict' , * , into=<class 'dict'> , index=True ) [source] # Convert the DataFrame to a dictionary. The type of the key-value pairs can be customized with the parameters
(see below). Parameters : orient str {âdictâ, âlistâ, âseriesâ, âsplitâ, âtightâ, ârecordsâ, âindexâ} Determines the type of the values of the dictionary. âdictâ (default) : dict like {column -> {index -> value}} âlistâ : dict like {column -> [values]} âseriesâ : dict like {column -> Series(values)} âsplitâ : dict like
{âindexâ -> [index], âcolumnsâ -> [columns], âdataâ -> [values]} âtightâ : dict like
{âindexâ -> [index], âcolumnsâ -> [columns], âdataâ -> [values],
âindex_namesâ -> [index.names], âcolumn_namesâ -> [column.names]} ârecordsâ : list like
[{column -> value}, â¦ , {column -> value}] âindexâ : dict like {index -> {column -> value}} Added in version 1.4.0: âtightâ as an allowed value for the orient argument into class, default dict The collections.abc.MutableMapping subclass used for all Mappings
in the return value.  Can be the actual class or an empty
instance of the mapping type you want.  If you want a
collections.defaultdict, you must pass it initialized. index bool, default True Whether to include the index item (and index_names item if orient is âtightâ) in the returned dictionary. Can only be False when orient is âsplitâ or âtightâ. Added in version 2.0.0. Returns : dict, list or collections.abc.MutableMapping Return a collections.abc.MutableMapping object representing the
DataFrame. The resulting transformation depends on the orient parameter. See also DataFrame.from_dict Create a DataFrame from a dictionary. DataFrame.to_json Convert a DataFrame to JSON format. Examples >>> df = pd . DataFrame ({ 'col1' : [ 1 , 2 ], ... 'col2' : [ 0.5 , 0.75 ]}, ... index = [ 'row1' , 'row2' ]) >>> df col1  col2 row1     1  0.50 row2     2  0.75 >>> df . to_dict () {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}} You can specify the return orientation. >>> df . to_dict ( 'series' ) {'col1': row1    1 row2    2 Name: col1, dtype: int64, 'col2': row1    0.50 row2    0.75 Name: col2, dtype: float64} >>> df . to_dict ( 'split' ) {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'], 'data': [[1, 0.5], [2, 0.75]]} >>> df . to_dict ( 'records' ) [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}] >>> df . to_dict ( 'index' ) {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}} >>> df . to_dict ( 'tight' ) {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'], 'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]} You can also specify the mapping type. >>> from collections import OrderedDict , defaultdict >>> df . to_dict ( into = OrderedDict ) OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])), ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))]) If you want a defaultdict , you need to initialize it: >>> dd = defaultdict ( list ) >>> df . to_dict ( 'records' , into = dd ) [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}), defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]


Page: https://github.com/pandas-dev/pandas/issues/54824



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
pandas.DataFrame.to_json # DataFrame. to_json ( path_or_buf = None , * , orient = None , date_format = None , double_precision = 10 , force_ascii = True , date_unit = 'ms' , default_handler = None , lines = False , compression = 'infer' , index = None , indent = None , storage_options = None , mode = 'w' ) [source] # Convert the object to a JSON string. Note NaNâs and None will be converted to null and datetime objects
will be converted to UNIX timestamps. Parameters : path_or_buf str, path object, file-like object, or None, default None String, path object (implementing os.PathLike[str]), or file-like
object implementing a write() function. If None, the result is
returned as a string. orient str Indication of expected JSON string format. Series: default is âindexâ allowed values are: {âsplitâ, ârecordsâ, âindexâ, âtableâ}. DataFrame: default is âcolumnsâ allowed values are: {âsplitâ, ârecordsâ, âindexâ, âcolumnsâ,
âvaluesâ, âtableâ}. The format of the JSON string: âsplitâ : dict like {âindexâ -> [index], âcolumnsâ -> [columns],
âdataâ -> [values]} ârecordsâ : list like [{column -> value}, â¦ , {column -> value}] âindexâ : dict like {index -> {column -> value}} âcolumnsâ : dict like {column -> {index -> value}} âvaluesâ : just the values array âtableâ : dict like {âschemaâ: {schema}, âdataâ: {data}} Describing the data, where data component is like orient='records' . date_format {None, âepochâ, âisoâ} Type of date conversion. âepochâ = epoch milliseconds,
âisoâ = ISO8601. The default depends on the orient . For orient='table' , the default is âisoâ. For all other orients,
the default is âepochâ. double_precision int, default 10 The number of decimal places to use when encoding
floating point values. The possible maximal value is 15.
Passing double_precision greater than 15 will raise a ValueError. force_ascii bool, default True Force encoded string to be ASCII. date_unit str, default âmsâ (milliseconds) The time unit to encode to, governs timestamp and ISO8601
precision.  One of âsâ, âmsâ, âusâ, ânsâ for second, millisecond,
microsecond, and nanosecond respectively. default_handler callable, default None Handler to call if object cannot otherwise be converted to a
suitable format for JSON. Should receive a single argument which is
the object to convert and return a serialisable object. lines bool, default False If âorientâ is ârecordsâ write out line-delimited json format. Will
throw ValueError if incorrect âorientâ since others are not
list-like. compression str or dict, default âinferâ For on-the-fly compression of the output data. If âinferâ and âpath_or_bufâ is
path-like, then detect compression from the following extensions: â.gzâ,
â.bz2â, â.zipâ, â.xzâ, â.zstâ, â.tarâ, â.tar.gzâ, â.tar.xzâ or â.tar.bz2â
(otherwise no compression).
Set to None for no compression.
Can also be a dict with key 'method' set
to one of { 'zip' , 'gzip' , 'bz2' , 'zstd' , 'xz' , 'tar' } and
other key-value pairs are forwarded to zipfile.ZipFile , gzip.GzipFile , bz2.BZ2File , zstandard.ZstdCompressor , lzma.LZMAFile or tarfile.TarFile , respectively.
As an example, the following could be passed for faster compression and to create
a reproducible gzip archive: compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1} . Added in version 1.5.0: Added support for .tar files. Changed in version 1.4.0: Zstandard support. index bool or None, default None The index is only used when âorientâ is âsplitâ, âindexâ, âcolumnâ,
or âtableâ. Of these, âindexâ and âcolumnâ do not support index=False . indent int, optional Length of whitespace used to indent each record. storage_options dict, optional Extra options that make sense for a particular storage connection, e.g.
host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
are forwarded to urllib.request.Request as header options. For other
URLs (e.g. starting with âs3://â, and âgcs://â) the key-value pairs are
forwarded to fsspec.open . Please see fsspec and urllib for more
details, and for more examples on storage options refer here . mode str, default âwâ (writing) Specify the IO mode for output when supplying a path_or_buf.
Accepted args are âwâ (writing) and âaâ (append) only.
mode=âaâ is only supported when lines is True and orient is ârecordsâ. Returns : None or str If path_or_buf is None, returns the resulting json format as a
string. Otherwise returns None. See also read_json Convert a JSON string to pandas object. Notes The behavior of indent=0 varies from the stdlib, which does not
indent the output but does insert newlines. Currently, indent=0 and the default indent=None are equivalent in pandas, though this
may change in a future release. orient='table' contains a âpandas_versionâ field under âschemaâ.
This stores the version of pandas used in the latest revision of the
schema. Examples >>> from json import loads , dumps >>> df = pd . DataFrame ( ... [[ "a" , "b" ], [ "c" , "d" ]], ... index = [ "row 1" , "row 2" ], ... columns = [ "col 1" , "col 2" ], ... ) >>> result = df . to_json ( orient = "split" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) { "columns": [ "col 1", "col 2" ], "index": [ "row 1", "row 2" ], "data": [ [ "a", "b" ], [ "c", "d" ] ] } Encoding/decoding a Dataframe using 'records' formatted JSON.
Note that index labels are not preserved with this encoding. >>> result = df . to_json ( orient = "records" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) [ { "col 1": "a", "col 2": "b" }, { "col 1": "c", "col 2": "d" } ] Encoding/decoding a Dataframe using 'index' formatted JSON: >>> result = df . to_json ( orient = "index" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) { "row 1": { "col 1": "a", "col 2": "b" }, "row 2": { "col 1": "c", "col 2": "d" } } Encoding/decoding a Dataframe using 'columns' formatted JSON: >>> result = df . to_json ( orient = "columns" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) { "col 1": { "row 1": "a", "row 2": "c" }, "col 2": { "row 1": "b", "row 2": "d" } } Encoding/decoding a Dataframe using 'values' formatted JSON: >>> result = df . to_json ( orient = "values" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) [ [ "a", "b" ], [ "c", "d" ] ] Encoding with Table Schema: >>> result = df . to_json ( orient = "table" ) >>> parsed = loads ( result ) >>> dumps ( parsed , indent = 4 ) { "schema": { "fields": [ { "name": "index", "type": "string" }, { "name": "col 1", "type": "string" }, { "name": "col 2", "type": "string" } ], "primaryKey": [ "index" ], "pandas_version": "1.4.0" }, "data": [ { "index": "row 1", "col 1": "a", "col 2": "b" }, { "index": "row 2", "col 1": "c", "col 2": "d" } ] }


Page: https://github.com/pandas-dev/pandas/issues/57224



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
pandas.DataFrame.to_sql # DataFrame. to_sql ( name , con , * , schema = None , if_exists = 'fail' , index = True , index_label = None , chunksize = None , dtype = None , method = None ) [source] # Write records stored in a DataFrame to a SQL database. Databases supported by SQLAlchemy [1] are supported. Tables can be
newly created, appended to, or overwritten. Parameters : name str Name of SQL table. con sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection Using SQLAlchemy makes it possible to use any DB supported by that
library. Legacy support is provided for sqlite3.Connection objects. The user
is responsible for engine disposal and connection closure for the SQLAlchemy
connectable. See here .
If passing a sqlalchemy.engine.Connection which is already in a transaction,
the transaction will not be committed.  If passing a sqlite3.Connection,
it will not be possible to roll back the record insertion. schema str, optional Specify the schema (if database flavor supports this). If None, use
default schema. if_exists {âfailâ, âreplaceâ, âappendâ}, default âfailâ How to behave if the table already exists. fail: Raise a ValueError. replace: Drop the table before inserting new values. append: Insert new values to the existing table. index bool, default True Write DataFrame index as a column. Uses index_label as the column
name in the table. Creates a table index for this column. index_label str or sequence, default None Column label for index column(s). If None is given (default) and index is True, then the index names are used.
A sequence should be given if the DataFrame uses MultiIndex. chunksize int, optional Specify the number of rows in each batch to be written at a time.
By default, all rows will be written at once. dtype dict or scalar, optional Specifying the datatype for columns. If a dictionary is used, the
keys should be the column names and the values should be the
SQLAlchemy types or strings for the sqlite3 legacy mode. If a
scalar is provided, it will be applied to all columns. method {None, âmultiâ, callable}, optional Controls the SQL insertion clause used: None : Uses standard SQL INSERT clause (one per row). âmultiâ: Pass multiple values in a single INSERT clause. callable with signature (pd_table, conn, keys, data_iter) . Details and a sample callable implementation can be found in the
section insert method . Returns : None or int Number of rows affected by to_sql. None is returned if the callable
passed into method does not return an integer number of rows. The number of returned rows affected is the sum of the rowcount attribute of sqlite3.Cursor or SQLAlchemy connectable which may not
reflect the exact number of written rows as stipulated in the sqlite3 or SQLAlchemy . Added in version 1.4.0. Raises : ValueError When the table already exists and if_exists is âfailâ (the
default). See also read_sql Read a DataFrame from a table. Notes Timezone aware datetime columns will be written as Timestamp with timezone type with SQLAlchemy if supported by the
database. Otherwise, the datetimes will be stored as timezone unaware
timestamps local to the original timezone. Not all datastores support method="multi" . Oracle, for example,
does not support multi-value insert. References [ 1 ] https://docs.sqlalchemy.org [ 2 ] https://www.python.org/dev/peps/pep-0249/ Examples Create an in-memory SQLite database. >>> from sqlalchemy import create_engine >>> engine = create_engine ( 'sqlite://' , echo = False ) Create a table from scratch with 3 rows. >>> df = pd . DataFrame ({ 'name' : [ 'User 1' , 'User 2' , 'User 3' ]}) >>> df name 0  User 1 1  User 2 2  User 3 >>> df . to_sql ( name = 'users' , con = engine ) 3 >>> from sqlalchemy import text >>> with engine . connect () as conn : ... conn . execute ( text ( "SELECT * FROM users" )) . fetchall () [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')] An sqlalchemy.engine.Connection can also be passed to con : >>> with engine . begin () as connection : ... df1 = pd . DataFrame ({ 'name' : [ 'User 4' , 'User 5' ]}) ... df1 . to_sql ( name = 'users' , con = connection , if_exists = 'append' ) 2 This is allowed to support operations that require that the same
DBAPI connection is used for the entire operation. >>> df2 = pd . DataFrame ({ 'name' : [ 'User 6' , 'User 7' ]}) >>> df2 . to_sql ( name = 'users' , con = engine , if_exists = 'append' ) 2 >>> with engine . connect () as conn : ... conn . execute ( text ( "SELECT * FROM users" )) . fetchall () [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'), (0, 'User 4'), (1, 'User 5'), (0, 'User 6'), (1, 'User 7')] Overwrite the table with just df2 . >>> df2 . to_sql ( name = 'users' , con = engine , if_exists = 'replace' , ... index_label = 'id' ) 2 >>> with engine . connect () as conn : ... conn . execute ( text ( "SELECT * FROM users" )) . fetchall () [(0, 'User 6'), (1, 'User 7')] Use method to define a callable insertion method to do nothing
if thereâs a primary key conflict on a table in a PostgreSQL database. >>> from sqlalchemy.dialects.postgresql import insert >>> def insert_on_conflict_nothing ( table , conn , keys , data_iter ): ... # "a" is the primary key in "conflict_table" ... data = [ dict ( zip ( keys , row )) for row in data_iter ] ... stmt = insert ( table . table ) . values ( data ) . on_conflict_do_nothing ( index_elements = [ "a" ]) ... result = conn . execute ( stmt ) ... return result . rowcount >>> df_conflict . to_sql ( name = "conflict_table" , con = conn , if_exists = "append" , method = insert_on_conflict_nothing ) 0 For MySQL, a callable to update columns b and c if thereâs a conflict
on a primary key. >>> from sqlalchemy.dialects.mysql import insert >>> def insert_on_conflict_update ( table , conn , keys , data_iter ): ... # update columns "b" and "c" on primary key conflict ... data = [ dict ( zip ( keys , row )) for row in data_iter ] ... stmt = ( ... insert ( table . table ) ... . values ( data ) ... ) ... stmt = stmt . on_duplicate_key_update ( b = stmt . inserted . b , c = stmt . inserted . c ) ... result = conn . execute ( stmt ) ... return result . rowcount >>> df_conflict . to_sql ( name = "conflict_table" , con = conn , if_exists = "append" , method = insert_on_conflict_update ) 2 Specify the dtype (especially useful for integers with missing values).
Notice that while pandas is forced to store the data as floating point,
the database supports nullable integers. When fetching the data with
Python, we get back integer scalars. >>> df = pd . DataFrame ({ "A" : [ 1 , None , 2 ]}) >>> df A 0  1.0 1  NaN 2  2.0 >>> from sqlalchemy.types import Integer >>> df . to_sql ( name = 'integers' , con = engine , index = False , ... dtype = { "A" : Integer ()}) 3 >>> with engine . connect () as conn : ... conn . execute ( text ( "SELECT * FROM integers" )) . fetchall () [(1,), (None,), (2,)]


Page: https://github.com/pandas-dev/pandas/issues/57310



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
pandas.DataFrame.transpose # DataFrame. transpose ( * args , copy = False ) [source] # Transpose index and columns. Reflect the DataFrame over its main diagonal by writing rows as columns
and vice-versa. The property T is an accessor to the method transpose() . Parameters : *args tuple, optional Accepted for compatibility with NumPy. copy bool, default False Whether to copy the data after transposing, even for DataFrames
with a single dtype. Note that a copy is always required for mixed dtype DataFrames,
or for DataFrames with any extension types. Note The copy keyword will change behavior in pandas 3.0. Copy-on-Write will be enabled by default, which means that all methods with a copy keyword will use a lazy copy mechanism to defer the copy and
ignore the copy keyword. The copy keyword will be removed in a
future version of pandas. You can already get the future behavior and improvements through
enabling copy on write pd.options.mode.copy_on_write = True Returns : DataFrame The transposed DataFrame. See also numpy.transpose Permute the dimensions of a given array. Notes Transposing a DataFrame with mixed dtypes will result in a homogeneous
DataFrame with the object dtype. In such a case, a copy of the data
is always made. Examples Square DataFrame with homogeneous dtype >>> d1 = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df1 = pd . DataFrame ( data = d1 ) >>> df1 col1  col2 0     1     3 1     2     4 >>> df1_transposed = df1 . T # or df1.transpose() >>> df1_transposed 0  1 col1  1  2 col2  3  4 When the dtype is homogeneous in the original DataFrame, we get a
transposed DataFrame with the same dtype: >>> df1 . dtypes col1    int64 col2    int64 dtype: object >>> df1_transposed . dtypes 0    int64 1    int64 dtype: object Non-square DataFrame with mixed dtypes >>> d2 = { 'name' : [ 'Alice' , 'Bob' ], ... 'score' : [ 9.5 , 8 ], ... 'employed' : [ False , True ], ... 'kids' : [ 0 , 0 ]} >>> df2 = pd . DataFrame ( data = d2 ) >>> df2 name  score  employed  kids 0  Alice    9.5     False     0 1    Bob    8.0      True     0 >>> df2_transposed = df2 . T # or df2.transpose() >>> df2_transposed 0     1 name      Alice   Bob score       9.5   8.0 employed  False  True kids          0     0 When the DataFrame has mixed dtypes, we get a transposed DataFrame with
the object dtype: >>> df2 . dtypes name         object score       float64 employed       bool kids          int64 dtype: object >>> df2_transposed . dtypes 0    object 1    object dtype: object


Page: https://github.com/pandas-dev/pandas/issues/57315



Page: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.update.html#pandas.DataFrame.update
pandas.DataFrame.update # DataFrame. update ( other , join = 'left' , overwrite = True , filter_func = None , errors = 'ignore' ) [source] # Modify in place using non-NA values from another DataFrame. Aligns on indices. There is no return value. Parameters : other DataFrame, or object coercible into a DataFrame Should have at least one matching index/column label
with the original DataFrame. If a Series is passed,
its name attribute must be set, and that will be
used as the column name to align with the original DataFrame. join {âleftâ}, default âleftâ Only left join is implemented, keeping the index and columns of the
original object. overwrite bool, default True How to handle non-NA values for overlapping keys: True: overwrite original DataFrameâs values
with values from other . False: only update values that are NA in
the original DataFrame. filter_func callable(1d-array) -> bool 1d-array, optional Can choose to replace values other than NA. Return True for values
that should be updated. errors {âraiseâ, âignoreâ}, default âignoreâ If âraiseâ, will raise a ValueError if the DataFrame and other both contain non-NA data in the same place. Returns : None This method directly changes calling object. Raises : ValueError When errors=âraiseâ and thereâs overlapping non-NA data. When errors is not either âignoreâ or âraiseâ NotImplementedError If join != âleftâ See also dict.update Similar method for dictionaries. DataFrame.merge For column(s)-on-column(s) operations. Examples >>> df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 ], ... 'B' : [ 400 , 500 , 600 ]}) >>> new_df = pd . DataFrame ({ 'B' : [ 4 , 5 , 6 ], ... 'C' : [ 7 , 8 , 9 ]}) >>> df . update ( new_df ) >>> df A  B 0  1  4 1  2  5 2  3  6 The DataFrameâs length does not increase as a result of the update,
only values at matching index/column labels are updated. >>> df = pd . DataFrame ({ 'A' : [ 'a' , 'b' , 'c' ], ... 'B' : [ 'x' , 'y' , 'z' ]}) >>> new_df = pd . DataFrame ({ 'B' : [ 'd' , 'e' , 'f' , 'g' , 'h' , 'i' ]}) >>> df . update ( new_df ) >>> df A  B 0  a  d 1  b  e 2  c  f >>> df = pd . DataFrame ({ 'A' : [ 'a' , 'b' , 'c' ], ... 'B' : [ 'x' , 'y' , 'z' ]}) >>> new_df = pd . DataFrame ({ 'B' : [ 'd' , 'f' ]}, index = [ 0 , 2 ]) >>> df . update ( new_df ) >>> df A  B 0  a  d 1  b  y 2  c  f For Series, its name attribute must be set. >>> df = pd . DataFrame ({ 'A' : [ 'a' , 'b' , 'c' ], ... 'B' : [ 'x' , 'y' , 'z' ]}) >>> new_column = pd . Series ([ 'd' , 'e' , 'f' ], name = 'B' ) >>> df . update ( new_column ) >>> df A  B 0  a  d 1  b  e 2  c  f If other contains NaNs the corresponding values are not updated
in the original dataframe. >>> df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 ], ... 'B' : [ 400. , 500. , 600. ]}) >>> new_df = pd . DataFrame ({ 'B' : [ 4 , np . nan , 6 ]}) >>> df . update ( new_df ) >>> df A      B 0  1    4.0 1  2  500.0 2  3    6.0


Page: https://github.com/pandas-dev/pandas/issues/57124



Page: https://github.com/pandas-dev/pandas/issues/56991



Page: https://pandas.pydata.org/docs/reference/api/pandas.Index.join.html#pandas.Index.join
pandas.Index.join # final Index. join ( other , * , how = 'left' , level = None , return_indexers = False , sort = False ) [source] # Compute join_index and indexers to conform data structures to the new index. Parameters : other Index how {âleftâ, ârightâ, âinnerâ, âouterâ} level int or level name, default None return_indexers bool, default False sort bool, default False Sort the join keys lexicographically in the result Index. If False,
the order of the join keys depends on the join type (how keyword). Returns : join_index, (left_indexer, right_indexer) Examples >>> idx1 = pd . Index ([ 1 , 2 , 3 ]) >>> idx2 = pd . Index ([ 4 , 5 , 6 ]) >>> idx1 . join ( idx2 , how = 'outer' ) Index([1, 2, 3, 4, 5, 6], dtype='int64')


Page: https://github.com/pandas-dev/pandas/issues/57048



Page: https://pandas.pydata.org/docs/reference/api/pandas.Series.astype.html#pandas.Series.astype
pandas.Series.astype # Series. astype ( dtype , copy = None , errors = 'raise' ) [source] # Cast a pandas object to a specified dtype dtype . Parameters : dtype str, data type, Series or Mapping of column name -> data type Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
cast entire pandas object to the same type. Alternatively, use a
mapping, e.g. {col: dtype, â¦}, where col is a column label and dtype is
a numpy.dtype or Python type to cast one or more of the DataFrameâs
columns to column-specific types. copy bool, default True Return a copy when copy=True (be very careful setting copy=False as changes to values then may propagate to other
pandas objects). Note The copy keyword will change behavior in pandas 3.0. Copy-on-Write will be enabled by default, which means that all methods with a copy keyword will use a lazy copy mechanism to defer the copy and
ignore the copy keyword. The copy keyword will be removed in a
future version of pandas. You can already get the future behavior and improvements through
enabling copy on write pd.options.mode.copy_on_write = True errors {âraiseâ, âignoreâ}, default âraiseâ Control raising of exceptions on invalid data for provided dtype. raise : allow exceptions to be raised ignore : suppress exceptions. On error return original object. Returns : same type as caller See also to_datetime Convert argument to datetime. to_timedelta Convert argument to timedelta. to_numeric Convert argument to a numeric type. numpy.ndarray.astype Cast a numpy array to a specified type. Notes Changed in version 2.0.0: Using astype to convert from timezone-naive dtype to
timezone-aware dtype will raise an exception.
Use Series.dt.tz_localize() instead. Examples Create a DataFrame: >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df . dtypes col1    int64 col2    int64 dtype: object Cast all columns to int32: >>> df . astype ( 'int32' ) . dtypes col1    int32 col2    int32 dtype: object Cast col1 to int32 using a dictionary: >>> df . astype ({ 'col1' : 'int32' }) . dtypes col1    int32 col2    int64 dtype: object Create a series: >>> ser = pd . Series ([ 1 , 2 ], dtype = 'int32' ) >>> ser 0    1 1    2 dtype: int32 >>> ser . astype ( 'int64' ) 0    1 1    2 dtype: int64 Convert to categorical type: >>> ser . astype ( 'category' ) 0    1 1    2 dtype: category Categories (2, int32): [1, 2] Convert to ordered categorical type with custom ordering: >>> from pandas.api.types import CategoricalDtype >>> cat_dtype = CategoricalDtype ( ... categories = [ 2 , 1 ], ordered = True ) >>> ser . astype ( cat_dtype ) 0    1 1    2 dtype: category Categories (2, int64): [2 < 1] Create a series of dates: >>> ser_date = pd . Series ( pd . date_range ( '20200101' , periods = 3 )) >>> ser_date 0   2020-01-01 1   2020-01-02 2   2020-01-03 dtype: datetime64[ns]


Page: https://github.com/pandas-dev/pandas/issues/57418



Page: https://pandas.pydata.org/docs/reference/api/pandas.Series.pct_change.html#pandas.Series.pct_change
pandas.Series.pct_change # Series. pct_change ( periods=1 , fill_method=<no_default> , limit=<no_default> , freq=None , **kwargs ) [source] # Fractional change between the current and a prior element. Computes the fractional change from the immediately previous row by
default. This is useful in comparing the fraction of change in a time
series of elements. Note Despite the name of this method, it calculates fractional change
(also known as per unit change or relative change) and not
percentage change. If you need the percentage change, multiply
these values by 100. Parameters : periods int, default 1 Periods to shift for forming percent change. fill_method {âbackfillâ, âbfillâ, âpadâ, âffillâ, None}, default âpadâ How to handle NAs before computing percent changes. Deprecated since version 2.1: All options of fill_method are deprecated except fill_method=None . limit int, default None The number of consecutive NAs to fill before stopping. Deprecated since version 2.1. freq DateOffset, timedelta, or str, optional Increment to use from time series API (e.g. âMEâ or BDay()). **kwargs Additional keyword arguments are passed into DataFrame.shift or Series.shift . Returns : Series or DataFrame The same type as the calling object. See also Series.diff Compute the difference of two elements in a Series. DataFrame.diff Compute the difference of two elements in a DataFrame. Series.shift Shift the index by some number of periods. DataFrame.shift Shift the index by some number of periods. Examples Series >>> s = pd . Series ([ 90 , 91 , 85 ]) >>> s 0    90 1    91 2    85 dtype: int64 >>> s . pct_change () 0         NaN 1    0.011111 2   -0.065934 dtype: float64 >>> s . pct_change ( periods = 2 ) 0         NaN 1         NaN 2   -0.055556 dtype: float64 See the percentage change in a Series where filling NAs with last
valid observation forward to next valid. >>> s = pd . Series ([ 90 , 91 , None , 85 ]) >>> s 0    90.0 1    91.0 2     NaN 3    85.0 dtype: float64 >>> s . ffill () . pct_change () 0         NaN 1    0.011111 2    0.000000 3   -0.065934 dtype: float64 DataFrame Percentage change in French franc, Deutsche Mark, and Italian lira from
1980-01-01 to 1980-03-01. >>> df = pd . DataFrame ({ ... 'FR' : [ 4.0405 , 4.0963 , 4.3149 ], ... 'GR' : [ 1.7246 , 1.7482 , 1.8519 ], ... 'IT' : [ 804.74 , 810.01 , 860.13 ]}, ... index = [ '1980-01-01' , '1980-02-01' , '1980-03-01' ]) >>> df FR      GR      IT 1980-01-01  4.0405  1.7246  804.74 1980-02-01  4.0963  1.7482  810.01 1980-03-01  4.3149  1.8519  860.13 >>> df . pct_change () FR        GR        IT 1980-01-01       NaN       NaN       NaN 1980-02-01  0.013810  0.013684  0.006549 1980-03-01  0.053365  0.059318  0.061876 Percentage of change in GOOG and APPL stock volume. Shows computing
the percentage change between columns. >>> df = pd . DataFrame ({ ... '2016' : [ 1769950 , 30586265 ], ... '2015' : [ 1500923 , 40912316 ], ... '2014' : [ 1371819 , 41403351 ]}, ... index = [ 'GOOG' , 'APPL' ]) >>> df 2016      2015      2014 GOOG   1769950   1500923   1371819 APPL  30586265  40912316  41403351 >>> df . pct_change ( axis = 'columns' , periods =- 1 ) 2016      2015  2014 GOOG  0.179241  0.094112   NaN APPL -0.252395 -0.011860   NaN


Page: https://github.com/pandas-dev/pandas/issues/57056



Page: https://pandas.pydata.org/docs/reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
pandas.Series.to_numpy # Series. to_numpy ( dtype=None , copy=False , na_value=<no_default> , **kwargs ) [source] # A NumPy ndarray representing the values in this Series or Index. Parameters : dtype str or numpy.dtype, optional The dtype to pass to numpy.asarray() . copy bool, default False Whether to ensure that the returned value is not a view on
another array. Note that copy=False does not ensure that to_numpy() is no-copy. Rather, copy=True ensure that
a copy is made, even if not strictly necessary. na_value Any, optional The value to use for missing values. The default value depends
on dtype and the type of the array. **kwargs Additional keywords passed through to the to_numpy method
of the underlying array (for extension arrays). Returns : numpy.ndarray See also Series.array Get the actual data stored within. Index.array Get the actual data stored within. DataFrame.to_numpy Similar method for DataFrame. Notes The returned array will be the same up to equality (values equal
in self will be equal in the returned array; likewise for values
that are not equal). When self contains an ExtensionArray, the
dtype may be different. For example, for a category-dtype Series, to_numpy() will return a NumPy array and the categorical dtype
will be lost. For NumPy dtypes, this will be a reference to the actual data stored
in this Series or Index (assuming copy=False ). Modifying the result
in place will modify the data stored in the Series or Index (not that
we recommend doing that). For extension types, to_numpy() may require copying data and
coercing the result to a NumPy type (possibly object), which may be
expensive. When you need a no-copy reference to the underlying data, Series.array should be used instead. This table lays out the different dtypes and default return types of to_numpy() for various dtypes within pandas. dtype array type category[T] ndarray[T] (same dtype as input) period ndarray[object] (Periods) interval ndarray[object] (Intervals) IntegerNA ndarray[object] datetime64[ns] datetime64[ns] datetime64[ns, tz] ndarray[object] (Timestamps) Examples >>> ser = pd . Series ( pd . Categorical ([ 'a' , 'b' , 'a' ])) >>> ser . to_numpy () array(['a', 'b', 'a'], dtype=object) Specify the dtype to control how datetime-aware data is represented.
Use dtype=object to return an ndarray of pandas Timestamp objects, each with the correct tz . >>> ser = pd . Series ( pd . date_range ( '2000' , periods = 2 , tz = "CET" )) >>> ser . to_numpy ( dtype = object ) array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'), Timestamp('2000-01-02 00:00:00+0100', tz='CET')], dtype=object) Or dtype='datetime64[ns]' to return an ndarray of native
datetime64 values. The values are converted to UTC and the timezone
info is dropped. >>> ser . to_numpy ( dtype = "datetime64[ns]" ) ... array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'], dtype='datetime64[ns]')


Page: https://github.com/pandas-dev/pandas/issues/57121



Page: https://github.com/pandas-dev/pandas/issues/57529



Page: https://pandas.pydata.org/docs/reference/api/pandas.api.interchange.from_dataframe.html#pandas.api.interchange.from_dataframe
pandas.api.interchange.from_dataframe # pandas.api.interchange. from_dataframe ( df , allow_copy = True ) [source] # Build a pd.DataFrame from any DataFrame supporting the interchange protocol. Parameters : df DataFrameXchg Object supporting the interchange protocol, i.e. __dataframe__ method. allow_copy bool, default: True Whether to allow copying the memory to perform the conversion
(if false then zero-copy approach is requested). Returns : pd.DataFrame Examples >>> df_not_necessarily_pandas = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 3 , 4 ]}) >>> interchange_object = df_not_necessarily_pandas . __dataframe__ () >>> interchange_object . column_names () Index(['A', 'B'], dtype='object') >>> df_pandas = ( pd . api . interchange . from_dataframe ... ( interchange_object . select_columns_by_name ([ 'A' ]))) >>> df_pandas A 0    1 1    2 These methods ( column_names , select_columns_by_name ) should work
for any dataframe library which implements the interchange protocol.


Page: https://github.com/pandas-dev/pandas/issues/55069



Page: https://github.com/pandas-dev/pandas/issues/56700



Page: https://github.com/pandas-dev/pandas/issues/57130



Page: https://pandas.pydata.org/docs/reference/api/pandas.PeriodIndex.asfreq.html#pandas.PeriodIndex.asfreq
pandas.PeriodIndex.asfreq # PeriodIndex. asfreq ( freq = None , how = 'E' ) [source] # Convert the PeriodArray to the specified frequency freq . Equivalent to applying pandas.Period.asfreq() with the given arguments
to each Period in this PeriodArray. Parameters : freq str A frequency. how str {âEâ, âSâ}, default âEâ Whether the elements should be aligned to the end
or start within pa period. âEâ, âENDâ, or âFINISHâ for end, âSâ, âSTARTâ, or âBEGINâ for start. January 31st (âENDâ) vs. January 1st (âSTARTâ) for example. Returns : PeriodArray The transformed PeriodArray with the new frequency. See also pandas.arrays.PeriodArray.asfreq Convert each Period in a PeriodArray to the given frequency. Period.asfreq Convert a Period object to the given frequency. Examples >>> pidx = pd . period_range ( '2010-01-01' , '2015-01-01' , freq = 'Y' ) >>> pidx PeriodIndex(['2010', '2011', '2012', '2013', '2014', '2015'], dtype='period[Y-DEC]') >>> pidx . asfreq ( 'M' ) PeriodIndex(['2010-12', '2011-12', '2012-12', '2013-12', '2014-12', '2015-12'], dtype='period[M]') >>> pidx . asfreq ( 'M' , how = 'S' ) PeriodIndex(['2010-01', '2011-01', '2012-01', '2013-01', '2014-01', '2015-01'], dtype='period[M]')


Page: https://github.com/pandas-dev/pandas/issues/56945



Page: https://github.com/pandas-dev/pandas/issues/57073



Page: https://github.com/pandas-dev/pandas/issues/57019

