What’s New In Python 3.13
Editors:
Adam Turner and Thomas Wouters

This article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7, 2024. For full details, see the changelog.

See also PEP 719 – Python 3.13 Release Schedule
Summary – Release Highlights
Python 3.13 is the latest stable release of the Python programming language, with a mix of changes to the language, the implementation and the standard library. The biggest changes include a new interactive interpreter, experimental support for running in a free-threaded mode (PEP 703), and a Just-In-Time compiler (PEP 744).

Error messages continue to improve, with tracebacks now highlighted in color by default. The locals() builtin now has defined semantics for changing the returned mapping, and type parameters now support default values.

The library changes contain removal of deprecated APIs and modules, as well as the usual improvements in user-friendliness and correctness. Several legacy standard library modules have now been removed following their deprecation in Python 3.11 (PEP 594).

This article doesn’t attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details refer to the documentation, such as the Library Reference and Language Reference. To understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented. See Porting to Python 3.13 for guidance on upgrading from earlier versions of Python.

Interpreter improvements:

A greatly improved interactive interpreter and improved error messages.

PEP 667: The locals() builtin now has defined semantics when mutating the returned mapping. Python debuggers and similar tools may now more reliably update local variables in optimized scopes even during concurrent code execution.

PEP 703: CPython 3.13 has experimental support for running with the global interpreter lock disabled. See Free-threaded CPython for more details.

PEP 744: A basic JIT compiler was added. It is currently disabled by default (though we may turn it on later). Performance improvements are modest – we expect to improve this over the next few releases.

Color support in the new interactive interpreter, as well as in tracebacks and doctest output. This can be disabled through the PYTHON_COLORS and NO_COLOR environment variables.

Python data model improvements:

__static_attributes__ stores the names of attributes accessed through self.X in any function in a class body.

__firstlineno__ records the first line number of a class definition.

Significant improvements in the standard library:

Add a new PythonFinalizationError exception, raised when an operation is blocked during finalization.

The argparse module now supports deprecating command-line options, positional arguments, and subcommands.

The new functions base64.z85encode() and base64.z85decode() support encoding and decoding Z85 data.

The copy module now has a copy.replace() function, with support for many builtin types and any class defining the __replace__() method.

The new dbm.sqlite3 module is now the default dbm backend.

The os module has a suite of new functions for working with Linux’s timer notification file descriptors.

The random module now has a command-line interface.

Security improvements:

ssl.create_default_context() sets ssl.VERIFY_X509_PARTIAL_CHAIN and ssl.VERIFY_X509_STRICT as default flags.

C API improvements:

The Py_mod_gil slot is now used to indicate that an extension module supports running with the GIL disabled.

The PyTime C API has been added, providing access to system clocks.

PyMutex is a new lightweight mutex that occupies a single byte.

There is a new suite of functions for generating PEP 669 monitoring events in the C API.

New typing features:

PEP 696: Type parameters (typing.TypeVar, typing.ParamSpec, and typing.TypeVarTuple) now support defaults.

PEP 702: The new warnings.deprecated() decorator adds support for marking deprecations in the type system and at runtime.

PEP 705: typing.ReadOnly can be used to mark an item of a typing.TypedDict as read-only for type checkers.

PEP 742: typing.TypeIs provides more intuitive type narrowing behavior, as an alternative to typing.TypeGuard.

Platform support:

PEP 730: Apple’s iOS is now an officially supported platform, at tier 3.

PEP 738: Android is now an officially supported platform, at tier 3.

wasm32-wasi is now supported as a tier 2 platform.

wasm32-emscripten is no longer an officially supported platform.

Important removals:

PEP 594: The remaining 19 “dead batteries” (legacy stdlib modules) have been removed from the standard library: aifc, audioop, cgi, cgitb, chunk, crypt, imghdr, mailcap, msilib, nis, nntplib, ossaudiodev, pipes, sndhdr, spwd, sunau, telnetlib, uu and xdrlib.

Remove the 2to3 tool and lib2to3 module (deprecated in Python 3.11).

Remove the tkinter.tix module (deprecated in Python 3.6).

Remove the locale.resetlocale() function.

Remove the typing.io and typing.re namespaces.

Remove chained classmethod descriptors.

Release schedule changes:

PEP 602 (“Annual Release Cycle for Python”) has been updated to extend the full support (‘bugfix’) period for new releases to two years. This updated policy means that:

Python 3.9–3.12 have one and a half years of full support, followed by three and a half years of security fixes.

Python 3.13 and later have two years of full support, followed by three years of security fixes.

New Features
A better interactive interpreter
Python now uses a new interactive shell by default, based on code from the PyPy project. When the user starts the REPL from an interactive terminal, the following new features are now supported:

Multiline editing with history preservation.

Direct support for REPL-specific commands like help, exit, and quit, without the need to call them as functions.

Prompts and tracebacks with color enabled by default.

Interactive help browsing using F1 with a separate command history.

History browsing using F2 that skips output as well as the >>> and … prompts.

“Paste mode” with F3 that makes pasting larger blocks of code easier (press F3 again to return to the regular prompt).

To disable the new interactive shell, set the PYTHON_BASIC_REPL environment variable. For more on interactive mode, see Interactive Mode.

(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou in gh-111201 based on code from the PyPy project. Windows support contributed by Dino Viehland and Anthony Shaw.)

Improved error messages
The interpreter now uses color by default when displaying tracebacks in the terminal. This feature can be controlled via the new PYTHON_COLORS environment variable as well as the canonical NO_COLOR and FORCE_COLOR environment variables. (Contributed by Pablo Galindo Salgado in gh-112730.)

A common mistake is to write a script with the same name as a standard library module. When this results in errors, we now display a more helpful error message:

$ python random.py
Traceback (most recent call last):
  File "/home/me/random.py", line 1, in <module>
    import random
  File "/home/me/random.py", line 3, in <module>
    print(random.randint(5))
          ^^^^^^^^^^^^^^
AttributeError: module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)
Similarly, if a script has the same name as a third-party module that it attempts to import and this results in errors, we also display a more helpful error message:

$ python numpy.py
Traceback (most recent call last):
  File "/home/me/numpy.py", line 1, in <module>
    import numpy as np
  File "/home/me/numpy.py", line 3, in <module>
    np.array([1, 2, 3])
    ^^^^^^^^
AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)
(Contributed by Shantanu Jain in gh-95754.)

The error message now tries to suggest the correct keyword argument when an incorrect keyword argument is passed to a function.

>>>
"Better error messages!".split(max_split=1)
Traceback (most recent call last):
  File "<python-input-0>", line 1, in <module>
    "Better error messages!".split(max_split=1)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
TypeError: split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?
(Contributed by Pablo Galindo Salgado and Shantanu Jain in gh-107944.)

Free-threaded CPython
CPython now has experimental support for running in a free-threaded mode, with the global interpreter lock (GIL) disabled. This is an experimental feature and therefore is not enabled by default. The free-threaded mode requires a different executable, usually called python3.13t or python3.13t.exe. Pre-built binaries marked as free-threaded can be installed as part of the official Windows and macOS installers, or CPython can be built from source with the --disable-gil option.

Free-threaded execution allows for full utilization of the available processing power by running threads in parallel on available CPU cores. While not all software will benefit from this automatically, programs designed with threading in mind will run faster on multi-core hardware. The free-threaded mode is experimental and work is ongoing to improve it: expect some bugs and a substantial single-threaded performance hit. Free-threaded builds of CPython support optionally running with the GIL enabled at runtime using the environment variable PYTHON_GIL or the command-line option -X gil=1.

To check if the current interpreter supports free-threading, python -VV and sys.version contain “experimental free-threading build”. The new sys._is_gil_enabled() function can be used to check whether the GIL is actually disabled in the running process.

C-API extension modules need to be built specifically for the free-threaded build. Extensions that support running with the GIL disabled should use the Py_mod_gil slot. Extensions using single-phase init should use PyUnstable_Module_SetGIL() to indicate whether they support running with the GIL disabled. Importing C extensions that don’t use these mechanisms will cause the GIL to be enabled, unless the GIL was explicitly disabled with the PYTHON_GIL environment variable or the -X gil=0 option. pip 24.1 or newer is required to install packages with C extensions in the free-threaded build.

This work was made possible thanks to many individuals and organizations, including the large community of contributors to Python and third-party projects to test and enable free-threading support. Notable contributors include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, and many others. Many of these contributors are employed by Meta, which has provided significant engineering resources to support this project.

See also PEP 703 “Making the Global Interpreter Lock Optional in CPython” contains rationale and information surrounding this work.
Porting Extension Modules to Support Free-Threading: A community-maintained porting guide for extension authors.

An experimental just-in-time (JIT) compiler
When CPython is configured and built using the --enable-experimental-jit option, a just-in-time (JIT) compiler is added which may speed up some Python programs. On Windows, use PCbuild/build.bat --experimental-jit to enable the JIT or --experimental-jit-interpreter to enable the Tier 2 interpreter. Build requirements and further supporting information are contained at Tools/jit/README.md.

The --enable-experimental-jit option takes these (optional) values, defaulting to yes if --enable-experimental-jit is present without the optional value.

no: Disable the entire Tier 2 and JIT pipeline.

yes: Enable the JIT. To disable the JIT at runtime, pass the environment variable PYTHON_JIT=0.

yes-off: Build the JIT but disable it by default. To enable the JIT at runtime, pass the environment variable PYTHON_JIT=1.

interpreter: Enable the Tier 2 interpreter but disable the JIT. The interpreter can be disabled by running with PYTHON_JIT=0.

The internal architecture is roughly as follows:

We start with specialized Tier 1 bytecode. See What’s new in 3.11 for details.

When the Tier 1 bytecode gets hot enough, it gets translated to a new purely internal intermediate representation (IR), called the Tier 2 IR, and sometimes referred to as micro-ops (“uops”).

The Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the instruction format is better suited to translation to machine code.

We have several optimization passes for Tier 2 IR, which are applied before it is interpreted or translated to machine code.

There is a Tier 2 interpreter, but it is mostly intended for debugging the earlier stages of the optimization pipeline. The Tier 2 interpreter can be enabled by configuring Python with --enable-experimental-jit=interpreter.

When the JIT is enabled, the optimized Tier 2 IR is translated to machine code, which is then executed.

The machine code translation process uses a technique called copy-and-patch. It has no runtime dependencies, but there is a new build-time dependency on LLVM.

See also PEP 744
(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer by Ken Jin.)

Defined mutation semantics for locals()
Historically, the expected result of mutating the return value of locals() has been left to individual Python implementations to define. Starting from Python 3.13, PEP 667 standardises the historical behavior of CPython for most code execution scopes, but changes optimized scopes (functions, generators, coroutines, comprehensions, and generator expressions) to explicitly return independent snapshots of the currently assigned local variables, including locally referenced nonlocal variables captured in closures.

This change to the semantics of locals() in optimized scopes also affects the default behavior of code execution functions that implicitly target locals() if no explicit namespace is provided (such as exec() and eval()). In previous versions, whether or not changes could be accessed by calling locals() after calling the code execution function was implementation-dependent. In CPython specifically, such code would typically appear to work as desired, but could sometimes fail in optimized scopes based on other code (including debuggers and code execution tracing tools) potentially resetting the shared snapshot in that scope. Now, the code will always run against an independent snapshot of the local variables in optimized scopes, and hence the changes will never be visible in subsequent calls to locals(). To access the changes made in these cases, an explicit namespace reference must now be passed to the relevant function. Alternatively, it may make sense to update affected code to use a higher level code execution API that returns the resulting code execution namespace (e.g. runpy.run_path() when executing Python files from disk).

To ensure debuggers and similar tools can reliably update local variables in scopes affected by this change, FrameType.f_locals now returns a write-through proxy to the frame’s local and locally referenced nonlocal variables in these scopes, rather than returning an inconsistently updated shared dict instance with undefined runtime semantics.

See PEP 667 for more details, including related C API changes and deprecations. Porting notes are also provided below for the affected Python APIs and C APIs.

(PEP and implementation contributed by Mark Shannon and Tian Gao in gh-74929. Documentation updates provided by Guido van Rossum and Alyssa Coghlan.)

Support for mobile platforms
PEP 730: iOS is now a PEP 11 supported platform, with the arm64-apple-ios and arm64-apple-ios-simulator targets at tier 3 (iPhone and iPad devices released after 2013 and the Xcode iOS simulator running on Apple silicon hardware, respectively). x86_64-apple-ios-simulator (the Xcode iOS simulator running on older x86_64 hardware) is not a tier 3 supported platform, but will have best-effort support. (PEP written and implementation contributed by Russell Keith-Magee in gh-114099.)

PEP 738: Android is now a PEP 11 supported platform, with the aarch64-linux-android and x86_64-linux-android targets at tier 3. The 32-bit targets arm-linux-androideabi and i686-linux-android are not tier 3 supported platforms, but will have best-effort support. (PEP written and implementation contributed by Malcolm Smith in gh-116622.)

See also PEP 730, PEP 738
Other Language Changes
The compiler now strips common leading whitespace from every line in a docstring. This reduces the size of the bytecode cache (such as .pyc files), with reductions in file size of around 5%, for example in sqlalchemy.orm.session from SQLAlchemy 2.0. This change affects tools that use docstrings, such as doctest.

>>>
def spam():
    """
        This is a docstring with
          leading whitespace.

        It even has multiple paragraphs!
    """

spam.__doc__
'\nThis is a docstring with\n  leading whitespace.\n\nIt even has multiple paragraphs!\n'
(Contributed by Inada Naoki in gh-81283.)

Annotation scopes within class scopes can now contain lambdas and comprehensions. Comprehensions that are located within class scopes are not inlined into their parent scope.

class C[T]:
    type Alias = lambda: T
(Contributed by Jelle Zijlstra in gh-109118 and gh-118160.)

Future statements are no longer triggered by relative imports of the __future__ module, meaning that statements of the form from .__future__ import ... are now simply standard relative imports, with no special features activated. (Contributed by Jeremiah Gabriel Pascual in gh-118216.)

global declarations are now permitted in except blocks when that global is used in the else block. Previously this raised an erroneous SyntaxError. (Contributed by Irit Katriel in gh-111123.)

Add PYTHON_FROZEN_MODULES, a new environment variable that determines whether frozen modules are ignored by the import machinery, equivalent to the -X frozen_modules command-line option. (Contributed by Yilei Yang in gh-111374.)

Add support for the perf profiler working without frame pointers through the new environment variable PYTHON_PERF_JIT_SUPPORT and command-line option -X perf_jit. (Contributed by Pablo Galindo in gh-118518.)

The location of a .python_history file can be changed via the new PYTHON_HISTORY environment variable. (Contributed by Levi Sabah, Zackery Spytz and Hugo van Kemenade in gh-73965.)

Classes have a new __static_attributes__ attribute. This is populated by the compiler with a tuple of the class’s attribute names which are assigned through self.<name> from any function in its body. (Contributed by Irit Katriel in gh-115775.)

The compiler now creates a __firstlineno__ attribute on classes with the line number of the first line of the class definition. (Contributed by Serhiy Storchaka in gh-118465.)

The exec() and eval() builtins now accept the globals and locals arguments as keywords. (Contributed by Raphael Gaschignard in gh-105879)

The compile() builtin now accepts a new flag, ast.PyCF_OPTIMIZED_AST, which is similar to ast.PyCF_ONLY_AST except that the returned AST is optimized according to the value of the optimize argument. (Contributed by Irit Katriel in gh-108113).

Add a __name__ attribute on property objects. (Contributed by Eugene Toder in gh-101860.)

Add PythonFinalizationError, a new exception derived from RuntimeError and used to signal when operations are blocked during finalization. The following callables now raise PythonFinalizationError, instead of RuntimeError:

_thread.start_new_thread()

os.fork()

os.forkpty()

subprocess.Popen

(Contributed by Victor Stinner in gh-114570.)

Allow the count argument of str.replace() to be a keyword. (Contributed by Hugo van Kemenade in gh-106487.)

Many functions now emit a warning if a boolean value is passed as a file descriptor argument. This can help catch some errors earlier. (Contributed by Serhiy Storchaka in gh-82626.)

Added name and mode attributes for compressed and archived file-like objects in the bz2, lzma, tarfile, and zipfile modules. (Contributed by Serhiy Storchaka in gh-115961.)

New Modules
dbm.sqlite3: An SQLite backend for dbm. (Contributed by Raymond Hettinger and Erlend E. Aasland in gh-100414.)

Improved Modules
argparse
Add the deprecated parameter to the add_argument() and add_parser() methods, to enable deprecating command-line options, positional arguments, and subcommands. (Contributed by Serhiy Storchaka in gh-83648.)

array
Add the 'w' type code (Py_UCS4) for Unicode characters. It should be used instead of the deprecated 'u' type code. (Contributed by Inada Naoki in gh-80480.)

Register array.array as a MutableSequence by implementing the clear() method. (Contributed by Mike Zimin in gh-114894.)

ast
The constructors of node types in the ast module are now stricter in the arguments they accept, with more intuitive behavior when arguments are omitted.

If an optional field on an AST node is not included as an argument when constructing an instance, the field will now be set to None. Similarly, if a list field is omitted, that field will now be set to an empty list, and if an expr_context field is omitted, it defaults to Load(). (Previously, in all cases, the attribute would be missing on the newly constructed AST node instance.)

In all other cases, where a required argument is omitted, the node constructor will emit a DeprecationWarning. This will raise an exception in Python 3.15. Similarly, passing a keyword argument to the constructor that does not map to a field on the AST node is now deprecated, and will raise an exception in Python 3.15.

These changes do not apply to user-defined subclasses of ast.AST unless the class opts in to the new behavior by defining the AST._field_types mapping.

(Contributed by Jelle Zijlstra in gh-105858, gh-117486, and gh-118851.)

ast.parse() now accepts an optional argument optimize which is passed on to compile(). This makes it possible to obtain an optimized AST. (Contributed by Irit Katriel in gh-108113.)

asyncio
asyncio.as_completed() now returns an object that is both an asynchronous iterator and a plain iterator of awaitables. The awaitables yielded by asynchronous iteration include original task or future objects that were passed in, making it easier to associate results with the tasks being completed. (Contributed by Justin Arthur in gh-77714.)

asyncio.loop.create_unix_server() will now automatically remove the Unix socket when the server is closed. (Contributed by Pierre Ossman in gh-111246.)

DatagramTransport.sendto() will now send zero-length datagrams if called with an empty bytes object. The transport flow control also now accounts for the datagram header when calculating the buffer size. (Contributed by Jamie Phan in gh-115199.)

Add Queue.shutdown and QueueShutDown to manage queue termination. (Contributed by Laurie Opperman and Yves Duprat in gh-104228.)

Add the Server.close_clients() and Server.abort_clients() methods, which more forcefully close an asyncio server. (Contributed by Pierre Ossman in gh-113538.)

Accept a tuple of separators in StreamReader.readuntil(), stopping when any one of them is encountered. (Contributed by Bruce Merry in gh-81322.)

Improve the behavior of TaskGroup when an external cancellation collides with an internal cancellation. For example, when two task groups are nested and both experience an exception in a child task simultaneously, it was possible that the outer task group would hang, because its internal cancellation was swallowed by the inner task group.

In the case where a task group is cancelled externally and also must raise an ExceptionGroup, it will now call the parent task’s cancel() method. This ensures that a CancelledError will be raised at the next await, so the cancellation is not lost.

An added benefit of these changes is that task groups now preserve the cancellation count (cancelling()).

In order to handle some corner cases, uncancel() may now reset the undocumented _must_cancel flag when the cancellation count reaches zero.

(Inspired by an issue reported by Arthur Tacca in gh-116720.)

When TaskGroup.create_task() is called on an inactive TaskGroup, the given coroutine will be closed (which prevents a RuntimeWarning about the given coroutine being never awaited). (Contributed by Arthur Tacca and Jason Zhang in gh-115957.)

base64
Add z85encode() and z85decode() functions for encoding bytes as Z85 data and decoding Z85-encoded data to bytes. (Contributed by Matan Perelman in gh-75299.)

compileall
The default number of worker threads and processes is now selected using os.process_cpu_count() instead of os.cpu_count(). (Contributed by Victor Stinner in gh-109649.)

concurrent.futures
The default number of worker threads and processes is now selected using os.process_cpu_count() instead of os.cpu_count(). (Contributed by Victor Stinner in gh-109649.)

configparser
ConfigParser now has support for unnamed sections, which allows for top-level key-value pairs. This can be enabled with the new allow_unnamed_section parameter. (Contributed by Pedro Sousa Lacerda in gh-66449.)

copy
The new replace() function and the replace protocol make creating modified copies of objects much simpler. This is especially useful when working with immutable objects. The following types support the replace() function and implement the replace protocol:

collections.namedtuple()

dataclasses.dataclass

datetime.datetime, datetime.date, datetime.time

inspect.Signature, inspect.Parameter

types.SimpleNamespace

code objects

Any user-defined class can also support copy.replace() by defining the __replace__() method. (Contributed by Serhiy Storchaka in gh-108751.)

ctypes
As a consequence of necessary internal refactoring, initialization of internal metaclasses now happens in __init__ rather than in __new__. This affects projects that subclass these internal metaclasses to provide custom initialization. Generally:

Custom logic that was done in __new__ after calling super().__new__ should be moved to __init__.

To create a class, call the metaclass, not only the metaclass’s __new__ method.

See gh-124520 for discussion and links to changes in some affected projects.

ctypes.Structure objects have a new _align_ attribute which allows the alignment of the structure being packed to/from memory to be specified explicitly. (Contributed by Matt Sanderson in gh-112433)

dbm
Add dbm.sqlite3, a new module which implements an SQLite backend, and make it the default dbm backend. (Contributed by Raymond Hettinger and Erlend E. Aasland in gh-100414.)

Allow removing all items from the database through the new gdbm.clear() and ndbm.clear() methods. (Contributed by Donghee Na in gh-107122.)

dis
Change the output of dis module functions to show logical labels for jump targets and exception handlers, rather than offsets. The offsets can be added with the new -O command-line option or the show_offsets argument. (Contributed by Irit Katriel in gh-112137.)

get_instructions() no longer represents cache entries as separate instructions. Instead, it returns them as part of the Instruction, in the new cache_info field. The show_caches argument to get_instructions() is deprecated and no longer has any effect. (Contributed by Irit Katriel in gh-112962.)

doctest
doctest output is now colored by default. This can be controlled via the new PYTHON_COLORS environment variable as well as the canonical NO_COLOR and FORCE_COLOR environment variables. See also Controlling color. (Contributed by Hugo van Kemenade in gh-117225.)

The DocTestRunner.run() method now counts the number of skipped tests. Add the DocTestRunner.skips and TestResults.skipped attributes. (Contributed by Victor Stinner in gh-108794.)

email
Headers with embedded newlines are now quoted on output. The generator will now refuse to serialize (write) headers that are improperly folded or delimited, such that they would be parsed as multiple headers or joined with adjacent data. If you need to turn this safety feature off, set verify_generated_headers. (Contributed by Bas Bloemsaat and Petr Viktorin in gh-121650.)

getaddresses() and parseaddr() now return ('', '') pairs in more situations where invalid email addresses are encountered instead of potentially inaccurate values. The two functions have a new optional strict parameter (default True). To get the old behavior (accepting malformed input), use strict=False. getattr(email.utils, 'supports_strict_parsing', False) can be used to check if the strict parameter is available. (Contributed by Thomas Dwyer and Victor Stinner for gh-102988 to improve the CVE 2023-27043 fix.)

fractions
Fraction objects now support the standard format specification mini-language rules for fill, alignment, sign handling, minimum width, and grouping. (Contributed by Mark Dickinson in gh-111320.)

glob
Add translate(), a function to convert a path specification with shell-style wildcards to a regular expression. (Contributed by Barney Gale in gh-72904.)

importlib
The following functions in importlib.resources now allow accessing a directory (or tree) of resources, using multiple positional arguments (the encoding and errors arguments in the text-reading functions are now keyword-only):

is_resource()

open_binary()

open_text()

path()

read_binary()

read_text()

These functions are no longer deprecated and are not scheduled for removal. (Contributed by Petr Viktorin in gh-116608.)

contents() remains deprecated in favor of the fully-featured Traversable API. However, there is now no plan to remove it. (Contributed by Petr Viktorin in gh-116608.)

io
The IOBase finalizer now logs any errors raised by the close() method with sys.unraisablehook. Previously, errors were ignored silently by default, and only logged in Python Development Mode or when using a Python debug build. (Contributed by Victor Stinner in gh-62948.)

ipaddress
Add the IPv4Address.ipv6_mapped property, which returns the IPv4-mapped IPv6 address. (Contributed by Charles Machalow in gh-109466.)

Fix is_global and is_private behavior in IPv4Address, IPv6Address, IPv4Network, and IPv6Network. (Contributed by Jakub Stasiak in gh-113171.)

itertools
batched() has a new strict parameter, which raises a ValueError if the final batch is shorter than the specified batch size. (Contributed by Raymond Hettinger in gh-113202.)

marshal
Add the allow_code parameter in module functions. Passing allow_code=False prevents serialization and de-serialization of code objects which are incompatible between Python versions. (Contributed by Serhiy Storchaka in gh-113626.)

math
The new function fma() performs fused multiply-add operations. This computes x * y + z with only a single round, and so avoids any intermediate loss of precision. It wraps the fma() function provided by C99, and follows the specification of the IEEE 754 “fusedMultiplyAdd” operation for special cases. (Contributed by Mark Dickinson and Victor Stinner in gh-73468.)

mimetypes
Add the guess_file_type() function to guess a MIME type from a filesystem path. Using paths with guess_type() is now soft deprecated. (Contributed by Serhiy Storchaka in gh-66543.)

mmap
mmap is now protected from crashing on Windows when the mapped memory is inaccessible due to file system errors or access violations. (Contributed by Jannis Weigend in gh-118209.)

mmap has a new seekable() method that can be used when a seekable file-like object is required. The seek() method now returns the new absolute position. (Contributed by Donghee Na and Sylvie Liberman in gh-111835.)

The new UNIX-only trackfd parameter for mmap controls file descriptor duplication; if false, the file descriptor specified by fileno will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in gh-78502.)

multiprocessing
The default number of worker threads and processes is now selected using os.process_cpu_count() instead of os.cpu_count(). (Contributed by Victor Stinner in gh-109649.)

os
Add process_cpu_count() function to get the number of logical CPU cores usable by the calling thread of the current process. (Contributed by Victor Stinner in gh-109649.)

cpu_count() and process_cpu_count() can be overridden through the new environment variable PYTHON_CPU_COUNT or the new command-line option -X cpu_count. This option is useful for users who need to limit CPU resources of a container system without having to modify application code or the container itself. (Contributed by Donghee Na in gh-109595.)

Add a low level interface to Linux’s timer file descriptors via timerfd_create(), timerfd_settime(), timerfd_settime_ns(), timerfd_gettime(), timerfd_gettime_ns(), TFD_NONBLOCK, TFD_CLOEXEC, TFD_TIMER_ABSTIME, and TFD_TIMER_CANCEL_ON_SET (Contributed by Masaru Tsuchiyama in gh-108277.)

lchmod() and the follow_symlinks argument of chmod() are both now available on Windows. Note that the default value of follow_symlinks in lchmod() is False on Windows. (Contributed by Serhiy Storchaka in gh-59616.)

fchmod() and support for file descriptors in chmod() are both now available on Windows. (Contributed by Serhiy Storchaka in gh-113191.)

On Windows, mkdir() and makedirs() now support passing a mode value of 0o700 to apply access control to the new directory. This implicitly affects tempfile.mkdtemp() and is a mitigation for CVE 2024-4030. Other values for mode continue to be ignored. (Contributed by Steve Dower in gh-118486.)

posix_spawn() now accepts None for the env argument, which makes the newly spawned process use the current process environment. (Contributed by Jakub Kulik in gh-113119.)

posix_spawn() can now use the POSIX_SPAWN_CLOSEFROM attribute in the file_actions parameter on platforms that support posix_spawn_file_actions_addclosefrom_np(). (Contributed by Jakub Kulik in gh-113117.)

os.path
Add isreserved() to check if a path is reserved on the current system. This function is only available on Windows. (Contributed by Barney Gale in gh-88569.)

On Windows, isabs() no longer considers paths starting with exactly one slash (\ or /) to be absolute. (Contributed by Barney Gale and Jon Foster in gh-44626.)

realpath() now resolves MS-DOS style file names even if the file is not accessible. (Contributed by Moonsik Park in gh-82367.)

pathlib
Add UnsupportedOperation, which is raised instead of NotImplementedError when a path operation isn’t supported. (Contributed by Barney Gale in gh-89812.)

Add a new constructor for creating Path objects from ‘file’ URIs (file:///), Path.from_uri(). (Contributed by Barney Gale in gh-107465.)

Add PurePath.full_match() for matching paths with shell-style wildcards, including the recursive wildcard “**”. (Contributed by Barney Gale in gh-73435.)

Add the PurePath.parser class attribute to store the implementation of os.path used for low-level path parsing and joining. This will be either posixpath or ntpath.

Add recurse_symlinks keyword-only argument to Path.glob() and rglob(). (Contributed by Barney Gale in gh-77609.)

Path.glob() and rglob() now return files and directories when given a pattern that ends with “**”. Previously, only directories were returned. (Contributed by Barney Gale in gh-70303.)

Add the follow_symlinks keyword-only argument to Path.is_file, Path.is_dir, Path.owner(), and Path.group(). (Contributed by Barney Gale in gh-105793 and Kamil Turek in gh-107962.)

pdb
breakpoint() and set_trace() now enter the debugger immediately rather than on the next line of code to be executed. This change prevents the debugger from breaking outside of the context when breakpoint() is positioned at the end of the context. (Contributed by Tian Gao in gh-118579.)

sys.path[0] is no longer replaced by the directory of the script being debugged when sys.flags.safe_path is set. (Contributed by Tian Gao and Christian Walther in gh-111762.)

zipapp is now supported as a debugging target. (Contributed by Tian Gao in gh-118501.)

Add ability to move between chained exceptions during post-mortem debugging in pm() using the new exceptions [exc_number] command for Pdb. (Contributed by Matthias Bussonnier in gh-106676.)

Expressions and statements whose prefix is a pdb command are now correctly identified and executed. (Contributed by Tian Gao in gh-108464.)

queue
Add Queue.shutdown and ShutDown to manage queue termination. (Contributed by Laurie Opperman and Yves Duprat in gh-104750.)

random
Add a command-line interface. (Contributed by Hugo van Kemenade in gh-118131.)

re
Rename re.error to PatternError for improved clarity. re.error is kept for backward compatibility.

shutil
Support the dir_fd and follow_symlinks keyword arguments in chown(). (Contributed by Berker Peksag and Tahia K in gh-62308)

site
.pth files are now decoded using UTF-8 first, and then with the locale encoding if UTF-8 decoding fails. (Contributed by Inada Naoki in gh-117802.)

sqlite3
A ResourceWarning is now emitted if a Connection object is not closed explicitly. (Contributed by Erlend E. Aasland in gh-105539.)

Add the filter keyword-only parameter to Connection.iterdump() for filtering database objects to dump. (Contributed by Mariusz Felisiak in gh-91602.)

ssl
The create_default_context() API now includes VERIFY_X509_PARTIAL_CHAIN and VERIFY_X509_STRICT in its default flags.

Note VERIFY_X509_STRICT may reject pre-RFC 5280 or malformed certificates that the underlying OpenSSL implementation might otherwise accept. Whilst disabling this is not recommended, you can do so using:
import ssl

ctx = ssl.create_default_context()
ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT
(Contributed by William Woodruff in gh-112389.)

statistics
Add kde() for kernel density estimation. This makes it possible to estimate a continuous probability density function from a fixed number of discrete samples. (Contributed by Raymond Hettinger in gh-115863.)

Add kde_random() for sampling from an estimated probability density function created by kde(). (Contributed by Raymond Hettinger in gh-115863.)

subprocess
The subprocess module now uses the posix_spawn() function in more situations.

Notably, when close_fds is True (the default), posix_spawn() will be used when the C library provides posix_spawn_file_actions_addclosefrom_np(), which includes recent versions of Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the existing Linux vfork() based code.

A private control knob subprocess._USE_POSIX_SPAWN can be set to False if you need to force subprocess to never use posix_spawn(). Please report your reason and platform details in the issue tracker if you set this so that we can improve our API selection logic for everyone. (Contributed by Jakub Kulik in gh-113117.)

sys
Add the _is_interned() function to test if a string was interned. This function is not guaranteed to exist in all implementations of Python. (Contributed by Serhiy Storchaka in gh-78573.)

tempfile
On Windows, the default mode 0o700 used by tempfile.mkdtemp() now limits access to the new directory due to changes to os.mkdir(). This is a mitigation for CVE 2024-4030. (Contributed by Steve Dower in gh-118486.)

time
On Windows, monotonic() now uses the QueryPerformanceCounter() clock for a resolution of 1 microsecond, instead of the GetTickCount64() clock which has a resolution of 15.6 milliseconds. (Contributed by Victor Stinner in gh-88494.)

On Windows, time() now uses the GetSystemTimePreciseAsFileTime() clock for a resolution of 1 microsecond, instead of the GetSystemTimeAsFileTime() clock which has a resolution of 15.6 milliseconds. (Contributed by Victor Stinner in gh-63207.)

tkinter
Add tkinter widget methods: tk_busy_hold(), tk_busy_configure(), tk_busy_cget(), tk_busy_forget(), tk_busy_current(), and tk_busy_status(). (Contributed by Miguel, klappnase and Serhiy Storchaka in gh-72684.)

The tkinter widget method wm_attributes() now accepts the attribute name without the minus prefix to get window attributes, for example w.wm_attributes('alpha') and allows specifying attributes and values to set as keyword arguments, for example w.wm_attributes(alpha=0.5). (Contributed by Serhiy Storchaka in gh-43457.)

wm_attributes() can now return attributes as a dict, by using the new optional keyword-only parameter return_python_dict. (Contributed by Serhiy Storchaka in gh-43457.)

Text.count() can now return a simple int when the new optional keyword-only parameter return_ints is used. Otherwise, the single count is returned as a 1-tuple or None. (Contributed by Serhiy Storchaka in gh-97928.)

Support the “vsapi” element type in the element_create() method of tkinter.ttk.Style. (Contributed by Serhiy Storchaka in gh-68166.)

Add the after_info() method for Tkinter widgets. (Contributed by Cheryl Sabella in gh-77020.)

Add a new copy_replace() method to PhotoImage to copy a region from one image to another, possibly with pixel zooming, subsampling, or both. (Contributed by Serhiy Storchaka in gh-118225.)

Add from_coords parameter to the PhotoImage methods copy(), zoom() and subsample(). Add zoom and subsample parameters to the PhotoImage method copy(). (Contributed by Serhiy Storchaka in gh-118225.)

Add the PhotoImage methods read() to read an image from a file and data() to get the image data. Add background and grayscale parameters to the write() method. (Contributed by Serhiy Storchaka in gh-118271.)

traceback
Add the exc_type_str attribute to TracebackException, which holds a string display of the exc_type. Deprecate the exc_type attribute, which holds the type object itself. Add parameter save_exc_type (default True) to indicate whether exc_type should be saved. (Contributed by Irit Katriel in gh-112332.)

Add a new show_group keyword-only parameter to TracebackException.format_exception_only() to (recursively) format the nested exceptions of a BaseExceptionGroup instance. (Contributed by Irit Katriel in gh-105292.)

types
SimpleNamespace can now take a single positional argument to initialise the namespace’s arguments. This argument must either be a mapping or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in gh-108191.)

typing
PEP 705: Add ReadOnly, a special typing construct to mark a TypedDict item as read-only for type checkers.

PEP 742: Add TypeIs, a typing construct that can be used to instruct a type checker how to narrow a type.

Add NoDefault, a sentinel object used to represent the defaults of some parameters in the typing module. (Contributed by Jelle Zijlstra in gh-116126.)

Add get_protocol_members() to return the set of members defining a typing.Protocol. (Contributed by Jelle Zijlstra in gh-104873.)

Add is_protocol() to check whether a class is a Protocol. (Contributed by Jelle Zijlstra in gh-104873.)

ClassVar can now be nested in Final, and vice versa. (Contributed by Mehdi Drissi in gh-89547.)

unicodedata
Update the Unicode database to version 15.1.0. (Contributed by James Gerity in gh-109559.)

venv
Add support for creating source control management (SCM) ignore files in a virtual environment’s directory. By default, Git is supported. This is implemented as opt-in via the API, which can be extended to support other SCMs (EnvBuilder and create()), and opt-out via the CLI, using --without-scm-ignore-files. (Contributed by Brett Cannon in gh-108125.)

warnings
PEP 702: The new warnings.deprecated() decorator provides a way to communicate deprecations to a static type checker and to warn on usage of deprecated classes and functions. A DeprecationWarning may also be emitted when a decorated function or class is used at runtime. (Contributed by Jelle Zijlstra in gh-104003.)

xml
Allow controlling Expat >=2.6.0 reparse deferral (CVE 2023-52425) by adding five new methods:

xml.etree.ElementTree.XMLParser.flush()

xml.etree.ElementTree.XMLPullParser.flush()

xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()

xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()

xml.sax.expatreader.ExpatParser.flush()

(Contributed by Sebastian Pipping in gh-115623.)

Add the close() method for the iterator returned by iterparse() for explicit cleanup. (Contributed by Serhiy Storchaka in gh-69893.)

zipimport
Add support for ZIP64 format files. Everybody loves huge data, right? (Contributed by Tim Hatch in gh-94146.)

Optimizations
Several standard library modules have had their import times significantly improved. For example, the import time of the typing module has been reduced by around a third by removing dependencies on re and contextlib. Other modules to enjoy import-time speedups include email.utils, enum, functools, importlib.metadata, and threading. (Contributed by Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas, and others in gh-109653.)

textwrap.indent() is now around 30% faster than before for large input. (Contributed by Inada Naoki in gh-107369.)

The subprocess module now uses the posix_spawn() function in more situations, including when close_fds is True (the default) on many modern platforms. This should provide a notable performance increase when launching processes on FreeBSD and Solaris. See the subprocess section above for details. (Contributed by Jakub Kulik in gh-113117.)

Removed Modules And APIs
PEP 594: Remove “dead batteries” from the standard library
PEP 594 proposed removing 19 modules from the standard library, colloquially referred to as ‘dead batteries’ due to their historic, obsolete, or insecure status. All of the following modules were deprecated in Python 3.11, and are now removed:

aifc

audioop

chunk

cgi and cgitb

cgi.FieldStorage can typically be replaced with urllib.parse.parse_qsl() for GET and HEAD requests, and the email.message module or the multipart library for POST and PUT requests.

cgi.parse() can be replaced by calling urllib.parse.parse_qs() directly on the desired query string, unless the input is multipart/form-data, which should be replaced as described below for cgi.parse_multipart().

cgi.parse_header() can be replaced with the functionality in the email package, which implements the same MIME RFCs. For example, with email.message.EmailMessage:

from email.message import EmailMessage

msg = EmailMessage()
msg['content-type'] = 'application/json; charset="utf8"'
main, params = msg.get_content_type(), msg['content-type'].params
cgi.parse_multipart() can be replaced with the functionality in the email package, which implements the same MIME RFCs, or with the multipart library. For example, the email.message.EmailMessage and email.message.Message classes.

crypt and the private _crypt extension. The hashlib module may be an appropriate replacement when simply hashing a value is required. Otherwise, various third-party libraries on PyPI are available:

bcrypt: Modern password hashing for your software and your servers.

passlib: Comprehensive password hashing framework supporting over 30 schemes.

argon2-cffi: The secure Argon2 password hashing algorithm.

legacycrypt: ctypes wrapper to the POSIX crypt library call and associated functionality.

crypt_r: Fork of the crypt module, wrapper to the crypt_r(3) library call and associated functionality.

imghdr: The filetype, puremagic, or python-magic libraries should be used as replacements. For example, the puremagic.what() function can be used to replace the imghdr.what() function for all file formats that were supported by imghdr.

mailcap: Use the mimetypes module instead.

msilib

nis

nntplib: Use the pynntp library from PyPI instead.

ossaudiodev: For audio playback, use the pygame library from PyPI instead.

pipes: Use the subprocess module instead. Use shlex.quote() to replace the undocumented pipes.quote function.

sndhdr: The filetype, puremagic, or python-magic libraries should be used as replacements.

spwd: Use the python-pam library from PyPI instead.

sunau

telnetlib, Use the telnetlib3 or Exscript libraries from PyPI instead.

uu: Use the base64 module instead, as a modern alternative.

xdrlib

(Contributed by Victor Stinner and Zachary Ware in gh-104773 and gh-104780.)

2to3
Remove the 2to3 program and the lib2to3 module, previously deprecated in Python 3.11. (Contributed by Victor Stinner in gh-104780.)

builtins
Remove support for chained classmethod descriptors (introduced in gh-63272). These can no longer be used to wrap other descriptors, such as property. The core design of this feature was flawed and led to several problems. To “pass-through” a classmethod, consider using the __wrapped__ attribute that was added in Python 3.10. (Contributed by Raymond Hettinger in gh-89519.)

Raise a RuntimeError when calling frame.clear() on a suspended frame (as has always been the case for an executing frame). (Contributed by Irit Katriel in gh-79932.)

configparser
Remove the undocumented LegacyInterpolation class, deprecated in the docstring since Python 3.2, and at runtime since Python 3.11. (Contributed by Hugo van Kemenade in gh-104886.)

importlib.metadata
Remove deprecated subscript (__getitem__()) access for EntryPoint objects. (Contributed by Jason R. Coombs in gh-113175.)

locale
Remove the locale.resetlocale() function, deprecated in Python 3.11. Use locale.setlocale(locale.LC_ALL, "") instead. (Contributed by Victor Stinner in gh-104783.)

opcode
Move opcode.ENABLE_SPECIALIZATION to _opcode.ENABLE_SPECIALIZATION. This field was added in 3.12, it was never documented, and is not intended for external use. (Contributed by Irit Katriel in gh-105481.)

Remove opcode.is_pseudo(), opcode.MIN_PSEUDO_OPCODE, and opcode.MAX_PSEUDO_OPCODE, which were added in Python 3.12, but were neither documented nor exposed through dis, and were not intended to be used externally. (Contributed by Irit Katriel in gh-105481.)

pathlib
Remove the ability to use Path objects as context managers. This functionality was deprecated and has had no effect since Python 3.9. (Contributed by Barney Gale in gh-83863.)

re
Remove the undocumented, deprecated, and broken re.template() function and re.TEMPLATE / re.T flag. (Contributed by Serhiy Storchaka and Nikita Sobolev in gh-105687.)

tkinter.tix
Remove the tkinter.tix module, deprecated in Python 3.6. The third-party Tix library which the module wrapped is unmaintained. (Contributed by Zachary Ware in gh-75552.)

turtle
Remove the RawTurtle.settiltangle() method, deprecated in the documentation since Python 3.1 and at runtime since Python 3.11. (Contributed by Hugo van Kemenade in gh-104876.)

typing
Remove the typing.io and typing.re namespaces, deprecated since Python 3.8. The items in those namespaces can be imported directly from the typing module. (Contributed by Sebastian Rittau in gh-92871.)

Remove the keyword-argument method of creating TypedDict types, deprecated in Python 3.11. (Contributed by Tomas Roun in gh-104786.)

unittest
Remove the following unittest functions, deprecated in Python 3.11:

unittest.findTestCases()

unittest.makeSuite()

unittest.getTestCaseNames()

Use TestLoader methods instead:

loadTestsFromModule()

loadTestsFromTestCase()

getTestCaseNames()

(Contributed by Hugo van Kemenade in gh-104835.)

Remove the untested and undocumented TestProgram.usageExit() method, deprecated in Python 3.11. (Contributed by Hugo van Kemenade in gh-104992.)

urllib
Remove the cafile, capath, and cadefault parameters of the urllib.request.urlopen() function, deprecated in Python 3.6. Use the context parameter instead with an SSLContext instance. The ssl.SSLContext.load_cert_chain() function can be used to load specific certificates, or let ssl.create_default_context() select the operating system’s trusted certificate authority (CA) certificates. (Contributed by Victor Stinner in gh-105382.)

webbrowser
Remove the untested and undocumented MacOSX class, deprecated in Python 3.11. Use the MacOSXOSAScript class (introduced in Python 3.2) instead. (Contributed by Hugo van Kemenade in gh-104804.)

Remove the deprecated MacOSXOSAScript._name attribute. Use the MacOSXOSAScript.name attribute instead. (Contributed by Nikita Sobolev in gh-105546.)

New Deprecations
User-defined functions:

Deprecate assignment to a function’s __code__ attribute, where the new code object’s type does not match the function’s type. The different types are: plain function, generator, async generator, and coroutine. (Contributed by Irit Katriel in gh-81137.)

array:

Deprecate the 'u' format code (wchar_t) at runtime. This format code has been deprecated in documentation since Python 3.3, and will be removed in Python 3.16. Use the 'w' format code (Py_UCS4) for Unicode characters instead. (Contributed by Hugo van Kemenade in gh-80480.)

ctypes:

Deprecate the undocumented SetPointerType() function, to be removed in Python 3.15. (Contributed by Victor Stinner in gh-105733.)

Soft-deprecate the ARRAY() function in favour of type * length multiplication. (Contributed by Victor Stinner in gh-105733.)

decimal:

Deprecate the non-standard and undocumented Decimal format specifier 'N', which is only supported in the decimal module’s C implementation. (Contributed by Serhiy Storchaka in gh-89902.)

dis:

Deprecate the HAVE_ARGUMENT separator. Check membership in hasarg instead. (Contributed by Irit Katriel in gh-109319.)

getopt and optparse:

Both modules are now soft deprecated, with argparse preferred for new projects. This is a new soft-deprecation for the getopt module, whereas the optparse module was already de facto soft deprecated. (Contributed by Victor Stinner in gh-106535.)

gettext:

Deprecate non-integer numbers as arguments to functions and methods that consider plural forms in the gettext module, even if no translation was found. (Contributed by Serhiy Storchaka in gh-88434.)

glob:

Deprecate the undocumented glob0() and glob1() functions. Use glob() and pass a path-like object specifying the root directory to the root_dir parameter instead. (Contributed by Barney Gale in gh-117337.)

http.server:

Deprecate CGIHTTPRequestHandler, to be removed in Python 3.15. Process-based CGI HTTP servers have been out of favor for a very long time. This code was outdated, unmaintained, and rarely used. It has a high potential for both security and functionality bugs. (Contributed by Gregory P. Smith in gh-109096.)

Deprecate the --cgi flag to the python -m http.server command-line interface, to be removed in Python 3.15. (Contributed by Gregory P. Smith in gh-109096.)

mimetypes:

Soft-deprecate file path arguments to guess_type(), use guess_file_type() instead. (Contributed by Serhiy Storchaka in gh-66543.)

re:

Deprecate passing the optional maxsplit, count, or flags arguments as positional arguments to the module-level split(), sub(), and subn() functions. These parameters will become keyword-only in a future version of Python. (Contributed by Serhiy Storchaka in gh-56166.)

pathlib:

Deprecate PurePath.is_reserved(), to be removed in Python 3.15. Use os.path.isreserved() to detect reserved paths on Windows. (Contributed by Barney Gale in gh-88569.)

platform:

Deprecate java_ver(), to be removed in Python 3.15. This function is only useful for Jython support, has a confusing API, and is largely untested. (Contributed by Nikita Sobolev in gh-116349.)

pydoc:

Deprecate the undocumented ispackage() function. (Contributed by Zackery Spytz in gh-64020.)

sqlite3:

Deprecate passing more than one positional argument to the connect() function and the Connection constructor. The remaining parameters will become keyword-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-107948.)

Deprecate passing name, number of arguments, and the callable as keyword arguments for Connection.create_function() and Connection.create_aggregate() These parameters will become positional-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-108278.)

Deprecate passing the callback callable by keyword for the set_authorizer(), set_progress_handler(), and set_trace_callback() Connection methods. The callback callables will become positional-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-108278.)

sys:

Deprecate the _enablelegacywindowsfsencoding() function, to be removed in Python 3.16. Use the PYTHONLEGACYWINDOWSFSENCODING environment variable instead. (Contributed by Inada Naoki in gh-73427.)

tarfile:

Deprecate the undocumented and unused TarFile.tarfile attribute, to be removed in Python 3.16. (Contributed in gh-115256.)

traceback:

Deprecate the TracebackException.exc_type attribute. Use TracebackException.exc_type_str instead. (Contributed by Irit Katriel in gh-112332.)

typing:

Deprecate the undocumented keyword argument syntax for creating NamedTuple classes (e.g. Point = NamedTuple("Point", x=int, y=int)), to be removed in Python 3.15. Use the class-based syntax or the functional syntax instead. (Contributed by Alex Waygood in gh-105566.)

Deprecate omitting the fields parameter when creating a NamedTuple or typing.TypedDict class, and deprecate passing None to the fields parameter of both types. Python 3.15 will require a valid sequence for the fields parameter. To create a NamedTuple class with zero fields, use class NT(NamedTuple): pass or NT = NamedTuple("NT", ()). To create a TypedDict class with zero fields, use class TD(TypedDict): pass or TD = TypedDict("TD", {}). (Contributed by Alex Waygood in gh-105566 and gh-105570.)

Deprecate the typing.no_type_check_decorator() decorator function, to be removed in in Python 3.15. After eight years in the typing module, it has yet to be supported by any major type checker. (Contributed by Alex Waygood in gh-106309.)

Deprecate typing.AnyStr. In Python 3.16, it will be removed from typing.__all__, and a DeprecationWarning will be emitted at runtime when it is imported or accessed. It will be removed entirely in Python 3.18. Use the new type parameter syntax instead. (Contributed by Michael The in gh-107116.)

wave:

Deprecate the getmark(), setmark(), and getmarkers() methods of the Wave_read and Wave_write classes, to be removed in Python 3.15. (Contributed by Victor Stinner in gh-105096.)